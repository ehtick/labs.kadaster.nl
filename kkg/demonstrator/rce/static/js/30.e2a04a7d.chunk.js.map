{"version":3,"sources":["components/widgets/List.module.css","components/widgets/List.jsx"],"names":["module","exports","List","state","checklist","all","handleAllOnChange","e","target","checked","setAllValue","props","key","data","head","vars","length","n","results","bindings","value","publishVariable","valueString","PublishUtils","getMultiplePropValueAsSingleValue","multipleselectparametertype","publish","setState","handleOnChange","console","log","clearList","nextProps","nextState","this","defaultSelectAll","r","getEmptyMultiplePropValueAsSingleValue","resetParameter","allMultipleSelect","label","items","restructureResponse","className","styles","main","title","mergeClasses","type","onChange","disabled","userActionsDisabled","map","item","index","checkboxvalue","check","multipleselect","renderMultiple","selectedItem","pubsub","Boolean","customStyling","style","textColor","selectedTextColor","bgColor","selectedBgColor","itemBorderStyle","itemPaddingVertical","itemPaddingHorizontal","color","padding","onClick","Component"],"mappings":"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","file":"static/js/30.e2a04a7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"List_main__3_Rcc\",\"btn2\":\"List_btn2__2Dv7S\"};","import { Component } from 'react'\nimport styles from './List.module.css'\n\nimport { Button } from 'reactstrap'\nimport { restructureResponse } from '../../helpers/sparql'\nimport PublishUtils from './../../helpers/PublishUtils'\nimport { mergeClasses } from '../../helpers/styling'\n\nclass List extends Component {\n  state = { checklist: {},all:false }\n\n\n  handleAllOnChange = (e) => {\n    try\n    {\n     let all=e.target.checked;\n     this.setAllValue(all)\n    }\n    catch(e){}\n  }\n\n  setAllValue=(all,props)=>\n  {\n    try{\n     if (props==null) props=this.props;\n    let key = props.data.head.vars[0]\n    let label = props.data.head.vars[0]\n    if (props.data.head.vars.length > 1) {\n      key = props.data.head.vars[1]\n    }\n   \n\n    let checklist = this.state.checklist;\n    for (var n in props.data.results.bindings)\n    {\n      var kvalue = props.data.results.bindings[n][key].value;\n      checklist[kvalue]=all;\n    }\n   \n    let publishVariable = props.publishVariable;\n    if (publishVariable != null) {\n\n      var valueString=PublishUtils.getMultiplePropValueAsSingleValue(props.multipleselectparametertype,checklist);\n\n        \n      props.publish(publishVariable, valueString);\n\n      //PublishUtils.resetParameter(this);\n    }\n    this.setState({ checklist: checklist,all:all });\n  }\n  catch(e){}\n  }\n\n  handleOnChange = (e) => {\n    // setIsChecked(!isChecked);\n    // console.log(e,e.target.value,e.target.checked);\n    let checklist = this.state.checklist\n    checklist[e.target.value] = e.target.checked\n\n    this.setState({ checklist: checklist })\n    let publishVariable = this.props.publishVariable\n    if (publishVariable != null) {\n\n      var valueString=PublishUtils.getMultiplePropValueAsSingleValue(this.props.multipleselectparametertype,checklist);\n      console.log(valueString,publishVariable);\n      this.props.publish(publishVariable, valueString)\n      //PublishUtils.resetParameter(this);\n    }\n  }\n\n  \n\n  //state= {clearList:false};\n  clearList = false\n\n  shouldComponentUpdate(nextProps, nextState) {\n    \n    if (nextProps == null) {\n      return false\n    }\n    if (this.props == null) {      return false    }\n    //if (this.props.data == null) {       return true    }\n\n    //console.log(\"list should update\",nextProps.data !== this.props.data)\n\n    if (nextProps.data !== this.props.data) {\n    \n      \n      if (nextProps.defaultSelectAll)\n      {\n      \n        this.setAllValue(true,nextProps);\n        return true;\n      }\n\n      this.setState({ checklist: {},all:false })\n      let publishVariable = this.props.publishVariable\n      if (publishVariable != null) {\n\n       // publish empty but use the right format\n       let r=PublishUtils.getEmptyMultiplePropValueAsSingleValue(this.props.multipleselectparametertype)\n        this.props.publish(publishVariable, r)\n\n        PublishUtils.resetParameter(this)\n      }\n\n      this.setState({ checklist: {} })\n\n      return true\n    }\n\n    return true\n  }\n\n  renderMultiple() {\n\n    let allMultipleSelect = this.props.allMultipleSelect;\n    let all=this.state.all;\n    let key = this.props.data.head.vars[0]\n    let label = this.props.data.head.vars[0]\n    if (this.props.data.head.vars.length > 1) {\n      key = this.props.data.head.vars[1]\n    }\n\n    // let publishVariable = this.props.publishVariable\n\n    let items = restructureResponse(this.props.data)\n    //console.log(key,items);\n    let checklist = this.state.checklist\n    return (\n      <div className={styles.main}>\n        {this.props.title && (\n          <div className={styles.title}>{this.props.title}</div>\n        )}\n        <ul className={mergeClasses(styles.main, \"pl-10\")}>\n          {allMultipleSelect && (\n            <div>\n              <input\n                value=\"all\"\n                type=\"checkbox\"\n                checked={all}\n                onChange={this.handleAllOnChange}\n                disabled={this.props.userActionsDisabled}\n              ></input>\n              <span> All</span>\n            </div>\n          )}\n\n          {items.map((item, index) => {\n            let checkboxvalue = item[key]\n            let check = checklist[checkboxvalue] ?? false\n\n            return (\n              <div key={index}>\n                <input\n                  value={item[key]}\n                  type=\"checkbox\"\n                  checked={check}\n                  onChange={this.handleOnChange}\n                  disabled={this.props.userActionsDisabled}\n                ></input>\n                <span> {item[label]}</span>\n              </div>\n            )\n          })}\n        </ul>\n      </div>\n    )\n  }\n\n  render() {\n    if (!this.props.data) return null\n    if (this.props.multipleselect) return this.renderMultiple()\n\n    let key = this.props.data.head.vars[0]\n    let label = this.props.data.head.vars[0]\n    if (this.props.data.head.vars.length > 1) {\n      key = this.props.data.head.vars[1]\n    }\n\n    let publishVariable = this.props.publishVariable\n\n    let items = restructureResponse(this.props.data)\n    //console.log(key,items);\n    let selectedItem = this.props.pubsub[publishVariable]\n\n    return (\n      <div\n        className={`${styles.main} inheritFromArea`}\n        data-custom-styling={Boolean(this.props.customStyling)}\n        style={{\n          '--text-color': this.props.textColor,\n          '--selected-text-color': this.props.selectedTextColor,\n          '--bg-color': this.props.bgColor,\n          '--selected-bg-color': this.props.selectedBgColor,\n          '--item-border-style': this.props.itemBorderStyle,\n          '--item-padding-vertical': this.props.itemPaddingVertical,\n          '--item-padding-horizontal': this.props.itemPaddingHorizontal,\n        }}\n      >\n        {this.props.title && <div className={styles.title}>{this.props.title}</div>}\n        <ul className=\"pl-10\">\n          {items.map((item, index) => {\n            if (publishVariable) {\n              return (\n                <li key={index} data-selected={selectedItem === item[key]}>\n                  <Button\n                    color=\"link\"\n                    className={''}\n                    style={{ 'text-align': 'left', padding: '0px' }}\n                    onClick={() => {\n                      this.props.publish(publishVariable, item[key])\n                      PublishUtils.resetParameter(this)\n                    }}\n                  >\n                    {item[label]}\n                  </Button>\n                </li>\n              )\n            } else {\n              return (\n                <li key={index}>\n                  <div style={{ padding: '2px 1px 1px' }}>{item[label]}</div>\n                </li>\n              )\n            }\n          })}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default List\n"],"sourceRoot":""}