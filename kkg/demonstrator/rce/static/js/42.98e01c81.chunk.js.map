{"version":3,"sources":["components/widgets/VideoPlayer/Widget.tsx"],"names":["VideoPlayer","props","React","useState","srcURLs","setSrcURLs","videoRef","useRef","video","current","useEffect","load","data","results","bindings","length","console","error","sources","row","src_URL","type","JSON","stringify","push","value","filter","srcURL","startsWith","timeJumpValue","undefined","timeJumpTopic","pubsub","test","currentTime","Number","className","ref","controls","map","src"],"mappings":"iOASe,SAASA,EAAYC,GAAe,IAAD,EAChD,EAA8BC,IAAMC,SAAmB,IAAG,mBAAnDC,EAAO,KAAEC,EAAU,KACpBC,EAAWJ,IAAMK,OAAyB,MAC1CC,EAAQF,EAASG,QAEvBP,IAAMQ,WAAU,WAAYF,GAAOA,EAAMG,MAAO,GAAG,CAACP,EAASI,IAE7DN,IAAMQ,WAAU,WACd,IAAKT,EAAMW,KACT,OAAOP,EAAW,IAEpB,IAAKJ,EAAMW,KAAKC,QAAQC,SAASC,OAE/B,OADAC,QAAQC,MAAM,gCACPZ,EAAW,IAGpB,IAC6C,EADvCa,EAAoB,GAAE,cACVjB,EAAMW,KAAKC,QAAQC,UAAQ,IAA7C,2BAA+C,CAAC,IAArCK,EAAG,QACZ,GAAyB,YAArBA,EAAIC,QAAQC,KAEd,OADAL,QAAQC,MAAM,2CAAD,OAA8CK,KAAKC,UAAUJ,KACnEd,EAAW,IAEpBa,EAAQM,KAAKL,EAAIC,QAAQK,MAC3B,CAAC,+BAED,OAAOpB,EAAWa,EAAQQ,QAAO,SAAAC,GAAM,OAAIA,EAAOC,WAAW,0BAA0B,IACzF,GAAG,CAAC3B,EAAMW,OAEV,IAAIiB,OAAoCC,EAUxC,OATI7B,EAAM8B,gBAAeF,EAA4B,QAAf,EAAG5B,EAAM+B,cAAM,aAAZ,EAAe/B,EAAM8B,gBAE9D7B,IAAMQ,WAAU,WACd,GAAKF,GACgB,MAAjBqB,EACJ,MAiBK,QAAQI,KAjBQJ,QACrBrB,EAAM0B,YAAcC,OAAON,IADiBb,QAAQC,MAAM,mBAAD,OAAoBY,EAAa,iCAE5F,GAAG,CAACA,EAAerB,IAGjB,qBAAK4B,UAAU,iCAAgC,SAC7C,uBACEC,IAAK/B,EAAUgC,UAAQ,EACvBF,UAAU,gBAAe,SACzBhC,EAAQmC,KAAI,SAAAZ,GAAM,OAClB,wBAAqBa,IAAKb,GAAbA,EAAuB,OAI5C,C","file":"static/js/42.98e01c81.chunk.js","sourcesContent":["import React from 'react'\nimport {BaseWidgetProps, SparqlWidgetProps} from '../../../helpers/widget'\n\ntype Props = BaseWidgetProps\n           & SparqlWidgetProps\n           & {timeJumpTopic?: string}\n           & Record<'repoName' | 'repoURL' | 'localRepoURL', string>\n           & {timestampParameters: string | null | undefined}\n\nexport default function VideoPlayer(props: Props) {\n  const [srcURLs, setSrcURLs] = React.useState<string[]>([])\n  const videoRef = React.useRef<HTMLVideoElement>(null)\n  const video = videoRef.current\n\n  React.useEffect(() => { if (video) video.load() }, [srcURLs, video])\n\n  React.useEffect(() => {\n    if (!props.data) {\n      return setSrcURLs([])\n    }\n    if (!props.data.results.bindings.length) {\n      console.error('query did not yield any rows')\n      return setSrcURLs([])\n    }\n\n    const sources: string[] = []\n    for (const row of props.data.results.bindings) {\n      if (row.src_URL.type !== 'literal') {\n        console.error(`the following row is missing \\`src_URL\\`: ${JSON.stringify(row)}`)\n        return setSrcURLs([])\n      }\n      sources.push(row.src_URL.value)\n    }\n\n    return setSrcURLs(sources.filter(srcURL => srcURL.startsWith(\"/servlets/cgi/download/\")))\n  }, [props.data])\n\n  let timeJumpValue: string | undefined = undefined\n  if (props.timeJumpTopic) timeJumpValue = props.pubsub?.[props.timeJumpTopic] as string\n\n  React.useEffect(() => {\n    if (!video) return\n    if (timeJumpValue == null) return\n    if (!isIntegerString(timeJumpValue)) return console.error(`The jump-value \"${timeJumpValue}\" should only contain numbers`)\n    video.currentTime = Number(timeJumpValue)\n  }, [timeJumpValue, video])\n\n  return (\n    <div className=\"flex flex-column space-y-1 p-1\">\n      <video\n        ref={videoRef} controls\n        className=\"w-auto h-auto\"\n      >{srcURLs.map(srcURL => (\n        <source key={srcURL} src={srcURL} />\n      ))}</video>\n    </div>\n  )\n}\n\nfunction isIntegerString(x: string) {\n  return /^\\d+$/.test(x);\n}\n"],"sourceRoot":""}