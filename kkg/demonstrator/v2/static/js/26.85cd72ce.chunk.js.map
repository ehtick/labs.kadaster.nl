{"version":3,"sources":["components/widgets/bb/rules/StartRuleButton.module.css","components/widgets/bb/rules/StartRuleButton.js","components/DynamicIcon.tsx"],"names":["module","exports","StartRuleButton","state","enabled","handleButtonClick","rule","props","startRule","alert","setState","setLoading","runStartRule","parameters","PublishUtils","setTimeStampParameter","msg","failureMessage","tooltip","this","title","disable","disableParameter","dvalue","pubsub","beginIcon","endIcon","className","styles","openButton","button1","buttonStyles","button","color","size","icon","prefixFallback","startIcon","onClick","variant","disabled","Boolean","customStyling","hasButtonShadow","style","buttonBorderRadius","textColor","bgColor","buttonFontSize","buttonFontFamily","Component","DynamicIcon","loadedIcon","useQuery","queryKey","queryFn","fontSize","startsWith","importName","kebabToCamelCase","replace","allRadixIcons","RadixIcon","console","error","clsx","height","undefined","width","allMuiIcons","MuiIcon","isSuccess","data","kebabText","split","map","word","charAt","toUpperCase","slice","toLowerCase","join"],"mappings":"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","file":"static/js/26.85cd72ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"StartRuleButton_main__Y05k9\",\"button1\":\"StartRuleButton_button1__Ze1L8\",\"openButton\":\"StartRuleButton_openButton__18k2h\",\"closeButton\":\"StartRuleButton_closeButton__38wAs\",\"divtext\":\"StartRuleButton_divtext__3Iir3\",\"textfield2\":\"StartRuleButton_textfield2__3Lykh\",\"weirdlabel\":\"StartRuleButton_weirdlabel__2F3m0\",\"MuiInputLabel-outlined\":\"StartRuleButton_MuiInputLabel-outlined__1WEr0\",\"MuiInputLabel-shrink\":\"StartRuleButton_MuiInputLabel-shrink__3G5D1\",\"defaultValueButton\":\"StartRuleButton_defaultValueButton__MuBgT\",\"outer\":\"StartRuleButton_outer__3F06_\",\"productTitle\":\"StartRuleButton_productTitle__3JUE-\",\"inner\":\"StartRuleButton_inner__KQqUf\",\"buttonDiv\":\"StartRuleButton_buttonDiv__3_bnj\",\"linkbutton\":\"StartRuleButton_linkbutton__1TvzD\",\"verstrekken\":\"StartRuleButton_verstrekken__1MdS3\",\"appBar\":\"StartRuleButton_appBar__whduk\",\"title\":\"StartRuleButton_title__3Hd2f\",\"vpane\":\"StartRuleButton_vpane__NMg8C\"};","import {Component} from 'react'\r\nimport styles from './StartRuleButton.module.css'\r\nimport buttonStyles from '../Button.module.css'\r\n\r\nimport {Button, Tooltip} from '@mui/material'\r\n\r\nimport { DynamicIcon } from '../../../DynamicIcon'\r\n\r\nimport PublishUtils from '../../../../helpers/PublishUtils'\r\nimport { runStartRule } from \"../../../../helpers/run-start-rule\"\r\n\r\nexport default class StartRuleButton extends Component {\r\n  state = {enabled:true }\r\n\r\n  handleButtonClick = async () => {\r\n    const rule =this.props.startRule\r\n    if (!rule) {\r\n      alert(\"no rule configured\");\r\n      return\r\n    }\r\n\r\n    try {\r\n      this.setState({ enabled:false })\r\n      this.props.setLoading(true)\r\n      if (rule===\"EMPTY\")\r\n      {}\r\n      else\r\n      {\r\n          await runStartRule(rule, this.props.parameters)\r\n      }\r\n     // console.log(\"set Timestamp\");\r\n      PublishUtils.setTimeStampParameter(this,true)\r\n     // console.log(\"rules executed successfully\")\r\n    } catch (e) {\r\n      const msg = this.props.failureMessage || `error in executing rule ${rule}`\r\n      alert(msg)\r\n    } finally {\r\n      this.props.setLoading(false)\r\n      this.setState({ enabled:true })\r\n    }\r\n  }\r\n\r\n  render() {\r\n \r\n    let tooltip = this.props.tooltip\r\n    if (tooltip == null) {\r\n      tooltip = ''\r\n    }\r\n    let title = this.props.title\r\n    if (title == null) {\r\n      title = ''\r\n    }\r\n   \r\n    let disable=false;\r\n    if (this.props.disable!=null)\r\n    {\r\n      var disableParameter = this.props.disable;\r\n      var dvalue=this.props.pubsub[disableParameter];\r\n      //console.log(disableParameter,dvalue)\r\n      if (dvalue==null) \r\n      {\r\n        disable=true;\r\n      }\r\n      if (dvalue==\"http://www.buildingbits.nl/reset\")\r\n      {\r\n        disable=true;\r\n      }\r\n     \r\n    }\r\n\r\n    if (this.state.enabled==false)\r\n    {\r\n      disable=true;\r\n    }\r\n  \r\n    const beginIcon = this.props.beginIcon\r\n    const endIcon = this.props.endIcon\r\n\r\n   \r\n    return (\r\n     \r\n        <Tooltip title={tooltip}>\r\n          <Button\r\n            className={`${styles.openButton} ${styles.button1} ${buttonStyles.button}`}\r\n            color=\"grey\"\r\n            size=\"small\"\r\n            endIcon={endIcon && <DynamicIcon icon={endIcon} prefixFallback=\"mui-\"/>}\r\n            startIcon={beginIcon && <DynamicIcon icon={beginIcon} prefixFallback=\"mui-\"/>}\r\n            onClick={() => this.handleButtonClick()}\r\n            variant=\"contained\"\r\n            disabled={disable}\r\n            data-custom-styling={Boolean(this.props.customStyling)}\r\n            data-has-button-shadow={Boolean(this.props.hasButtonShadow)}\r\n            style={{\r\n              '--button-border-radius': this.props.buttonBorderRadius,\r\n              '--text-color': this.props.textColor,\r\n              '--background-color': this.props.bgColor,\r\n              '--button-font-size': this.props.buttonFontSize || 'inherit',\r\n              '--button-font-family': this.props.buttonFontFamily || 'inherit',\r\n            }}\r\n          >\r\n            {title}\r\n          </Button>\r\n        </Tooltip>\r\n\r\n       \r\n    )\r\n  }\r\n}\r\n","import { Icon } from \"./widgets/Icon\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { IconProp } from \"@fortawesome/fontawesome-svg-core\"\nimport clsx from \"clsx\"\n\nexport function DynamicIcon(props: {\n  icon: string,\n  color?: string,\n  size?: string,\n  className?: string\n  prefixFallback?: \"fa-\" | \"radix-\" | \"mui-\"\n}) {\n  const loadedIcon = useQuery<React.ReactNode>({\n    queryKey: [ \"icon\", props.icon, props.size, props.color ],\n    queryFn: async () => {\n      const style = { fontSize: props.size, color: props.color }\n      if (props.icon.startsWith(\"fa-\")) {\n        return <Icon className={props.className} icon={props.icon as IconProp} style={style}\n                     data-testid={props.icon} />\n      }\n\n      if (props.icon.startsWith(\"radix-\")) {\n        const importName = kebabToCamelCase(props.icon.replace(/^radix-/, \"\")) + \"Icon\"\n        const allRadixIcons = await import(\"@radix-ui/react-icons\") as any\n        const RadixIcon = allRadixIcons[importName]\n        if (!RadixIcon) {\n          console.error(`could not find Radix icon ${importName}, try one of the following or visit https://www.radix-ui.com/icons`, allRadixIcons)\n          return null\n        }\n        return <RadixIcon className={clsx(\"svg-inline--fa\", props.className)} style={style}\n                          height={undefined} width={undefined} data-testid={props.icon} /> // remove hardcoded 15px from radix\n      }\n\n      if (props.icon.startsWith(\"mui-\")) {\n        const importName = kebabToCamelCase(props.icon.replace(/^mui-/, \"\"))\n        const allMuiIcons = await import(`@mui/icons-material`) as any\n        const MuiIcon = allMuiIcons[importName]\n        if (!MuiIcon) {\n          console.error(`could not find MUI icon ${importName}, try one of the following or visit https://mui.com/material-ui/material-icons/`, allMuiIcons)\n          return null\n        }\n\n        return <MuiIcon className={clsx(\"svg-inline--fa\", props.className)} style={style}\n                        data-testid={props.icon} />\n      }\n\n      if (props.prefixFallback) {\n        return <DynamicIcon {...props} icon={props.prefixFallback + props.icon} />\n      }\n\n      return null\n    }\n  })\n\n  return loadedIcon.isSuccess ? loadedIcon.data : null\n}\n\n\nfunction kebabToCamelCase(kebabText: string): string {\n  return kebabText\n    .split('-')\n    .map(word => {\n      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n    })\n    .join('')\n}\n"],"sourceRoot":""}