{"version":3,"sources":["components/widgets/ifcjs/IFCJSViewerV3.js"],"names":["IFCJSViewerV3","getUrl","window","bbFolderName","scrolling","noEvents","usesParameters","PublishUtils","setTimeStampParameter","this","json","succesF","failureF","rule","props","ruleTagAfterSubmit","isValidUri","Command","ruleRule","runRulesWithTag","guids","publishTopic","publishVariable","multipleselect","multiSelectionParameterType","multipleselectparametertype","publish","getListAsSingleValue","length","callback","previousGuidsString","store","getState","pubsub","subscribeVariable","subscribe","latestSubscribeTopic","currentGuidsString","isMultipleSelect","parseMultiplePropValue","BBIFrame"],"mappings":"iOAQMA,EAAa,kDAGjB,aAAe,IAAD,EAKc,OALd,qBACZ,gBAHFC,OAAS,4BAAUC,OAAOC,aAAY,mDAKpC,EAAKC,UAAY,MACjB,EAAKC,UAAW,EAChB,EAAKC,gBAAe,EAAM,CAC5B,CA4DC,OA5DA,4CACD,WAEEC,IAAaC,sBAAsBC,MAAM,EAE3C,GAAC,qBACD,SAAQC,EAAKC,EAAQC,GAGnB,IAAMC,EAAMJ,KAAKK,MAAMC,mBAClBF,IAGDG,YAAWH,GACbI,IAAQC,SAASL,EAAMH,EAAKC,EAAQC,GAEpCK,IAAQE,gBAAgBN,EAAMH,EAAKC,EAAQC,GAI/C,GAAC,kCAED,WAAkC,IAAbQ,EAAK,uDAAG,GACrBC,EAAeZ,KAAKK,MAAMQ,gBAChC,GAAKD,EAGL,KAD2BZ,KAAKK,MAAMS,eAChB,CACpB,IAAMC,EAA8Bf,KAAKK,MAAMW,4BAC/ChB,KAAKK,MAAMY,QACTL,EACAd,IAAaoB,qBAAqBH,EAA6BJ,GAEnE,MACEX,KAAKK,MAAMY,QACTL,EACAD,EAAMQ,OAAS,EAAIR,EAAM,GAAK,GAGpC,GAAC,oCAED,SAAuBS,GAAW,IAAD,WAC3BC,EAAsC,QAAnB,EAAGC,IAAMC,kBAAU,OAAQ,QAAR,EAAhB,EAAkBC,cAAM,WAAR,EAAhB,EAA2BxB,KAAKK,MAAMoB,mBAChE,OAAOH,IAAMI,WAAU,WAAO,IAAD,IACrBC,EAAuB,EAAKtB,MAAMoB,kBAElCG,EAAqC,QAAnB,EAAGN,IAAMC,kBAAU,OAAQ,QAAR,EAAhB,EAAkBC,cAAM,WAAR,EAAhB,EAA2BG,GACtD,GAAIN,IAAwBO,EAA5B,CAEA,IAAMC,IAAqB,EAAKxB,MAAMS,eAChCC,EAA8B,EAAKV,MAAMW,4BAC/C,GAAIa,EAAkB,CACpB,IAAMlB,EAAQb,IAAagC,uBAAuBf,EAA6Ba,GAC/ER,EAAST,EACX,MACES,EAASQ,EAAqB,CAAEA,GAAuB,IAGzDP,EAAsBO,CAXgC,CAYxD,GACF,KAAC,EArEgB,CAASG,KAyEbxC,W","file":"static/js/54.ca212540.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n import BBIFrame from '../bb/BBIFrame';\r\n import PublishUtils from \"../../../helpers/PublishUtils\";\r\nimport { isValidUri } from '../../../utils/uri';\r\nimport Command from '../../../helpers/Command';\r\nimport { store } from '../../../store'\r\n\r\n\r\nclass IFCJSViewerV3 extends BBIFrame {\r\n  getUrl = () => `/${window.bbFolderName}/static/iframes/ifc-viewer-template/index.html`\r\n\r\n  constructor() {\r\n    super()\r\n\r\n    this.scrolling = 'yes'\r\n    this.noEvents = false\r\n    this.usesParameters=false;\r\n  }\r\n  updateParameter()\r\n  {\r\n    PublishUtils.setTimeStampParameter(this, true);\r\n    \r\n  }\r\n  runRule(json,succesF,failureF)\r\n  {\r\n   // console.log(\"run rule with json:\",json);\r\n    const rule =this.props.ruleTagAfterSubmit\r\n    if (!rule) return;\r\n        \r\n\r\n    if (isValidUri(rule)) {\r\n      Command.ruleRule(rule, json,succesF,failureF)\r\n    } else {\r\n      Command.runRulesWithTag(rule, json,succesF,failureF)\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  publishSelectedGuids(guids = []) {\r\n    const publishTopic = this.props.publishVariable\r\n    if (!publishTopic) return\r\n\r\n    const isMultipleSelect = !!this.props.multipleselect\r\n    if (isMultipleSelect) {\r\n      const multiSelectionParameterType = this.props.multipleselectparametertype\r\n      this.props.publish(\r\n        publishTopic,\r\n        PublishUtils.getListAsSingleValue(multiSelectionParameterType, guids)\r\n      )\r\n    } else {\r\n      this.props.publish(\r\n        publishTopic,\r\n        guids.length > 0 ? guids[0] : \"\"\r\n      )\r\n    }\r\n  }\r\n\r\n  subscribeSelectedGuids(callback) {\r\n    let previousGuidsString = store.getState()?.pubsub?.[this.props.subscribeVariable]\r\n    return store.subscribe(() => {\r\n      const latestSubscribeTopic = this.props.subscribeVariable\r\n\r\n      const currentGuidsString = store.getState()?.pubsub?.[latestSubscribeTopic]\r\n      if (previousGuidsString === currentGuidsString) return\r\n\r\n      const isMultipleSelect = !!this.props.multipleselect\r\n      const multiSelectionParameterType = this.props.multipleselectparametertype\r\n      if (isMultipleSelect) {\r\n        const guids = PublishUtils.parseMultiplePropValue(multiSelectionParameterType, currentGuidsString)\r\n        callback(guids)\r\n      } else {\r\n        callback(currentGuidsString ? [ currentGuidsString ] : [])\r\n      }\r\n\r\n      previousGuidsString = currentGuidsString\r\n    })\r\n  }\r\n}\r\n\r\n\r\nexport default IFCJSViewerV3;\r\n"],"sourceRoot":""}