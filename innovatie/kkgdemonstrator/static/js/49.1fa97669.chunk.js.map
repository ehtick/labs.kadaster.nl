{"version":3,"sources":["components/widgets/bb/BBTable.js"],"names":["Excel","require","BBTable","getUrl","window","bbFolderName","resolveParameterValue","value","PublishUtils","processStringForParameters","exportToSpreadsheet","data2","fileName","downloadNoHeader","props","exception","downloadURL","workbook","Workbook","exportToSpreadSheetInternal","e","console","log","showToast","exportToExistingSpreadSheet","url","me","fetch","then","response","arrayBuffer","data","xlsx","load","ignoreNodes","iets","iface","endDownloadEvent","catch","error","skipFirstRow","worksheetID","eachSheet","worksheet2","sheetId","worksheet","getWorksheet","addWorksheet","properties","tabColor","argb","n","parseInt","downloadStartRow","isNaN","rowN","row","nb","getRow","font","bold","cols","push","width","columns","row2","JSON","parse","stringify","rowE","values","rowCount","addRow","filename","writeBuffer","arg","blob","Blob","type","FileSaver","scrolling","noEvents","usesParameters","this","wraptext","array","headerKeys","BBIFrame"],"mappings":"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","file":"static/js/49.1fa97669.chunk.js","sourcesContent":["import './bbutil'\nimport BBIFrame from './BBIFrame'\nimport * as FileSaver from 'file-saver'\n//import Excel from 'exceljs'\n\n\n\n\nimport PublishUtils from '../../../helpers/PublishUtils'\n\nconst Excel = require('exceljs');\n\nclass BBTable extends BBIFrame {\n  getUrl = () => `/${window.bbFolderName}/w2ui/table.html`\n\n  constructor() {\n    super()\n\n    this.scrolling = 'true'\n    this.noEvents = false\n    this.usesParameters = false\n  }\n\n  getParameters() {\n    return this.props.wraptext ? \"?wraptext=true\" : \"\"\n  }\n\n  \n  setExcelColsWidth(array, headerKeys) {}\n\n  resolveParameterValue = (value) => {\n    return PublishUtils.processStringForParameters(this, value)\n  }\n  \n\n  // exportToSpreadsheet_good = (data, fileName) => {\n  //   const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\n  //   // Desired file extesion\n  //   const fileExtension = '.xlsx'\n  //   //Create a new Work Sheet using the data stored in an Array of Arrays.\n\n  //   const workSheet = XLSX.utils.aoa_to_sheet(data)\n  //   var header = data[0]\n  //   var wscols = []\n  //   var aantal = 0\n  //   for (var n in header) {\n  //     var ascii = String.fromCharCode(65 + aantal) + '1'\n  //     aantal++\n  //     try{\n  //     workSheet[ascii].s = {\n  //       font: {\n  //         // name: \"Calibri\",\n  //         sz: 12,\n  //         bold: true,\n  //         //  color: { rgb: \"FFFFFFFF\" },\n  //       },\n  //     }\n  //   }\n  //   catch(e){}\n  //     wscols.push({ wpx: 150 })\n  //   }\n\n  //   //console.log(this.setExcelColsWidth(data[0]));\n  //   workSheet['!cols'] = wscols\n\n  //   var filename = this.props.filename\n  //   if (filename == null) filename = 'download'\n  //   filename = PublishUtils.processStringForParameters(this, filename)\n\n  //   // Generate a Work Book containing the above sheet.\n  //   const workBook = {\n  //     Sheets: { data: workSheet, cols: [] },\n  //     SheetNames: ['data'],\n  //   }\n  //   // Exporting the file with the desired name and extension.\n  //   // const excelBuffer = XLSX.write(workBook, { bookType: \"xlsx\", type: \"array\" });\n  //   const excelBuffer = XLSX.write(workBook, { bookType: 'xlsx', type: 'array' })\n  //   const fileData = new Blob([excelBuffer], { type: fileType })\n  //   FileSaver.saveAs(fileData, filename + fileExtension)\n  // }\n\n   exportToSpreadsheet = async (data2, fileName) => {\n\n    var downloadNoHeader=false;\n    try {downloadNoHeader =this.props.downloadNoHeader} catch(exception){}\n    var downloadURL=null;\n    try {downloadURL =this.props.downloadURL} catch(exception){}\n\n\n    //var url = 'http://localhost:3000/bb/temp/templateGaranties.xlsx'; \n    //downloadURL=null;\n    if ((downloadURL==null)||(downloadURL==\"\"))\n    {\n      try{\n      var workbook = new Excel.Workbook();\n      this.exportToSpreadSheetInternal(data2,workbook,downloadNoHeader)\n      }\n      catch(e)\n      {\n        console.log(e);\n        this.showToast(\"could not create excelfile\")\n      }\n\n    }\n    else\n    {\n      try {\n         this.exportToExistingSpreadSheet(data2,downloadURL,downloadNoHeader)\n      }\n      catch(e)\n      {\n        console.log(e);\n        this.showToast(\"could not create excelfile\")\n      }\n    }\n\n   }\n\n   exportToExistingSpreadSheet= async (data2, url,downloadNoHeader) => {\n\n        var me=this;\n   // Fetch the Excel file from the URL\n   try {\n   fetch(url)\n     .then(response => response.arrayBuffer())  // Convert to ArrayBuffer\n     .then(data => {\n       // Read the Excel data\n       const workbook = new Excel.Workbook();\n        try {\n         var x=workbook.xlsx.load(data, {\n          ignoreNodes: [\n            'dataValidations' // ignores the workbook's Data Validations\n          ],\n        }).then(iets => {\n          me.exportToSpreadSheetInternal(data2,workbook,downloadNoHeader)\n          \n          try {me.iface.endDownloadEvent()}catch(e){console.log(e)}\n\n        })\n        .catch(error => {\n          console.error('Error fetching data:', error);\n          this.showToast(\"could not create excelfile. Template excel file is not available \")\n          try {me.iface.endDownloadEvent()}catch(e){console.log(e)}\n        });\n      }\n      catch(e)\n      {\n        console.log(e);\n        this.showToast(\"could not create excelfile\")\n        try {me.iface.endDownloadEvent()}catch(e){console.log(e)}\n      }\n      \n\n      });\n\n    }\n    catch(e)\n    {\n      console.log(e);\n      this.showToast(\"could not use template \")\n      try {me.iface.endDownloadEvent()}catch(e){console.log(e)}\n    }\n\n\n\n    }\n\n\n    exportToSpreadSheetInternal= async (data2,workbook,skipFirstRow) => {\n    \n    \n         \n       var worksheetID=null\n         workbook.eachSheet(function(worksheet2, sheetId) {\n       //   console.log(worksheet2,sheetId)\n          if (worksheetID==null)worksheetID=sheetId\n                });\n\n           var worksheet = workbook.getWorksheet(worksheetID);\n\n  \n        // Get the first sheet\n     \n        //console.log(worksheet)\n        //worksheet=null;\n                if (worksheet==null)\n              \n                {\n                 // console.log(\"adding a new empty worksheet\")\n                   worksheet = workbook.addWorksheet('export', {properties:{tabColor:{argb:'FF00FF00'}}});\n                }\n                // var export2=workbook.addWorksheet('export', {properties:{tabColor:{argb:'FF00FF00'}}});\n                // export2.addRow([\"exported from bim-provesy\"]);\n               \n             // console.log(data2)\n             var n=1;\n             try {n=parseInt(this.props.downloadStartRow) }catch(e){}\n             if (n==null)n=1;\n             if (isNaN(n) )n=1;\n         \n              for (var rowN in data2)\n              {\n                var row = data2[rowN]\n                if ((skipFirstRow) && (rowN==0))continue \n                if(rowN==0)\n                {\n                  var firstRow=worksheet.getRow(n);\n                  firstRow.font = { bold: true };\n                  var cols=[];\n                  for (var nb in row) cols.push({width:15});\n                  worksheet.columns = cols\n                }\n             \n                \n                   var row2=JSON.parse(JSON.stringify(row)) // this is necessary do not know why\n                 //  console.log(row2)\n                 var rowE=worksheet.getRow(n);\n                 n++;\n                 rowE.values=row2\n                  // worksheet.addRow(row2)\n               \n                //worksheet.insertRow(rowN+8,row2)\n\n              \n              }\n              if (worksheet.rowCount === 0) {\n                console.log(\"add empty row\")\n                worksheet.addRow([\"No data found\"]);\n            }\n\n\n                var fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\n                // Desired file extesion\n               // fileType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                const fileExtension = '.xlsx'\n               \n                var filename = this.props.filename\n                if (filename == null) filename = 'download'\n                filename = PublishUtils.processStringForParameters(this, filename)\n\n                 workbook.xlsx.writeBuffer().then(function(arg){\n              \n                const blob = new Blob([arg], { type: fileType })\n                FileSaver.saveAs(blob, filename + fileExtension)\n\n              });\n\n\n  }\n\n\n\n}\n\nexport default BBTable\n"],"sourceRoot":""}