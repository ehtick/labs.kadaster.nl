{"version":3,"sources":["hooks/use-dependent-state.ts","components/widgets/DynamicFilter/filters/RangeFilter.module.css","components/widgets/DynamicFilter/filters/ListFilter.module.css","components/widgets/DynamicFilter/DynamicFilter.module.css","components/widgets/DynamicFilter/AddFilterDialog.module.css","components/widgets/DynamicFilter/filters/ListFilter.tsx","components/CustomRangeSlider.tsx","components/widgets/DynamicFilter/filters/RangeFilter.tsx","helpers/sparqlResultHelpers.ts","components/widgets/DynamicFilter/util/convertSparQLResultToFilterProperties.ts","components/widgets/DynamicFilter/model/FilterValues.ts","components/widgets/DynamicFilter/util/syncUrlFilterState.ts","components/widgets/DynamicFilter/util/useFilterContext.ts","components/widgets/DynamicFilter/filters/SearchSelectFilter.tsx","components/widgets/DynamicFilter/filters/DateRangeFilter.tsx","components/widgets/DynamicFilter/AddFilterDialog.tsx","components/widgets/DynamicFilter/DynamicFilter.tsx","components/widgets/DynamicFilter/util/sparqlSnippetPublishedFilters.ts","hooks/use-force-update.ts"],"names":["useDependentState","stateCreator","deps","forceUpdate","useForceUpdate","initialState","useMemo","stateRef","useRef","prevDeps","length","every","dep","index","Object","is","depsAreEqual","current","updateState","useCallback","action","nextState","module","exports","MAX_ITEMS_COLLAPSED","ListFilter","props","idRef","uniqueId","checkboxesFilterValues","filterValue","type","values","radiobuttonsFilterValue","value","slicedFilterOptions","filterProperty","options","slice","useState","some","opt","isExpanded","setExpanded","displayedFilterOptions","remainingOptions","shouldDisplayExpanderToggle","className","styles","name","checked","onChange","map","includes","e","enabled","newValues","filter","v","valueType","toggleCheckboxFilterOption","currentTarget","label","toggleRadioFilterOption","href","onClick","preventDefault","prevExpanded","CustomRangeSlider","localValue","setLocalValue","useEffect","sendUpdate","min","max","onInput","onSlide","onThumbDragEnd","onRangeDragEnd","RangeFilter","Infinity","SafeImmediateNumberInput","Math","isFinite","minmax","otherProps","sanitizeNumberToString","setLocalValueAndPublishIfValid","inputValue","inputValueAsNumber","valueAsNumber","isNaN","onKeyUp","number","toString","XML_SCHEMA_BOOLEAN","getValueAsUri","data","Error","getValueAsLiteralString","getValueAsLiteralOrUri","isTypeAnyOf","getValueAsLiteralBoolean","datatype","getValueAsLiteralNumberFuzzy","parseFloat","types","FilterPropertiesBuilder","filterPropertiesByUri","partialFilterProperty","propertyUri","this","filterProperties","getOrCreate","push","asFilterValueTypeOrNull","readUrlFilterState","visibility","Set","urlParams","URLSearchParams","window","location","search","parameterName","propertyLabel","has","get","readSingleFilterValue","urlValues","getAll","readMultiFilterValues","rangeParameterNames","createRangeParameterNames","rangeValue","getUrlParamAsValidNumberOrNull","readRangeFilterValues","getUrlParamAsValidDateOrNull","readDateRangeFilterValues","JSON","stringify","defaultVisible","add","valueString","date","Date","getTime","getParameterName","MAX_PARAMETER_SUFFIX","MIN_PARAMETER_SUFFIX","useFilterContext","sparqlData","sparQLResult","filterPropertiesBuilder","results","bindings","binding","sparqlParameter","property","propertyURI","valueLabel","defaultExpanded","numberValue","valueURI","addMin","addMax","dateValueStr","dateValue","addMinDate","addMaxDate","addListValue","console","error","build","convertSparQLResultToFilterProperties","info","filterState","setFilterState","filtersTouched","markFiltersTouchedBefore","func","writeSingleFilterValue","delete","set","writeMultiFilterValues","append","writeRangeFilterValues","forEach","writeDateRangeFilterValues","toISOString","isVisible","history","replaceState","pathname","writeUrlFilterState","setFilterValue","uri","produce","draftFilterState","setFiltersVisibility","uris","visible","setFilterVisibility","reset","fp","properties","state","isStateModified","isFilterStateModified","hasAddableFilters","p","hasFilterValues","keys","hasAdditionalProperties","Array","from","SearchSelectFilter","filterValueOption","find","isClearable","isSearchable","placeholder","getOptionLabel","option","getOptionValue","menuPortalTarget","document","querySelector","DateRangeFilter","minPossibleValueIsoString","formatAsISODateOrEmpty","maxPossibleValueIsoString","SafeDateInput","stringValue","setStringValue","minIsoString","maxIsoString","inputValueAsDate","valueAsDate","year","String","getFullYear","padStart","month","getMonth","day","getDate","Dialog","Dialog_","Button","Button_","Input","Input_","Label","Label_","AddFilterDialog","setFilter","selectedUris","setSelectedUris","filtersFilteredAndSorted","availableProperties","toLowerCase","sort","a","b","localeCompare","addFiltersAndClose","onClose","autoFocus","onKeyDown","key","firstUri","addSingleFilterAndClose","multiple","selectedOptions","o","onDoubleClick","style","textAlign","color","minWidth","marginTop","marginLeft","DynamicFilter","filterContext","filtersPublishVariable","publishedFilters","publishOptions","filtersSparql","entries","propertyUriAsUri","variableName","replace","singleValue","multiValue","PublishUtils","getListAsSingleValue","filterLogicalOperation","join","sparqlSnippetPublishedFilters","publishWorkaround","urlPublishVariable","topic","setTimeout","publish","loading","FilterHolder","show","useDialog","openAddDialog","hiddenProperties","onSubmit","variant","size","startIcon","flexGrow","disabled","commonParams","filterComponent","FilterExpandableAndClearable","showClearButton","onClear","clearFilterProperty","isOpen","open","title","Icon","icon","children","useReducer"],"mappings":"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","file":"static/js/12.9836bb2b.chunk.js","sourcesContent":["import { DependencyList, Dispatch, SetStateAction, useCallback, useMemo, useRef } from \"react\"\nimport { useForceUpdate } from \"./use-force-update\"\n\nexport function useDependentState<S>(\n  stateCreator: (prevState?: S) => S,\n  deps: DependencyList,\n): [S, Dispatch<SetStateAction<S>>] {\n  const forceUpdate = useForceUpdate()\n\n  const initialState = useMemo(() => stateCreator(), [])\n  const stateRef = useRef<S>(initialState)\n\n  const prevDeps = useRef(deps)\n\n  if (!depsAreEqual(prevDeps.current, deps)) {\n    stateRef.current = stateCreator(stateRef.current)\n    prevDeps.current = deps\n  }\n\n  const updateState = useCallback(function (action: SetStateAction<S>) {\n    const nextState = isFunction(action) ? action(stateRef.current) : action\n    stateRef.current = nextState\n    forceUpdate()\n  }, [])\n\n  return [ stateRef.current, updateState ]\n}\n\nfunction depsAreEqual<D extends DependencyList>(prevDeps: D, deps: D): boolean {\n  return (\n    prevDeps.length === deps.length &&\n    deps.every((dep, index) => Object.is(dep, prevDeps[index]))\n  );\n}\n\nfunction isFunction<S>(setStateAction: SetStateAction<S>): setStateAction is (prevState: S) => S {\n  return typeof setStateAction === \"function\"\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range-filter\":\"RangeFilter_range-filter__1GL8a\",\"range-filter-inputs\":\"RangeFilter_range-filter-inputs__1G6ih\",\"separator\":\"RangeFilter_separator__E-2Zm\",\"range-filter-slider\":\"RangeFilter_range-filter-slider__XpIic\",\"range-filter-legend\":\"RangeFilter_range-filter-legend__39U4g\",\"grow\":\"RangeFilter_grow__5GjX4\",\"range-slider\":\"RangeFilter_range-slider__nQQAu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list-filter\":\"ListFilter_list-filter__1EKzq\",\"item\":\"ListFilter_item__1NPbG\",\"expander\":\"ListFilter_expander__1L7uw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dynamic-filter\":\"DynamicFilter_dynamic-filter__rHkcm\",\"dynamic-filter-expandable\":\"DynamicFilter_dynamic-filter-expandable__1kziO\",\"clear\":\"DynamicFilter_clear__2lyZ6\",\"dynamic-filter-body\":\"DynamicFilter_dynamic-filter-body__3Ndx4\",\"button-bar\":\"DynamicFilter_button-bar__2A0Al\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputs\":\"AddFilterDialog_inputs__1ZRDd\"};","import { useRef, useState } from \"react\"\nimport { FilterValue } from \"../model/FilterValues\"\nimport { FilterOption, MultiFilterProperty } from \"../model/FilterProperties\"\nimport styles from \"./ListFilter.module.css\"\n// @ts-ignore does not have typings\nimport uniqueId from \"lodash.uniqueid\"\n\nconst MAX_ITEMS_COLLAPSED = 4\n\nexport function ListFilter(props: {\n  type: \"checkboxes\" | \"radiobuttons\"\n  filterProperty: MultiFilterProperty\n  filterValue: FilterValue | null\n  onChange: (value: FilterValue | null) => void\n}) {\n  const idRef = useRef<string>(uniqueId())\n\n  const checkboxesFilterValues = props.filterValue?.type === \"multi\"\n    ? props.filterValue.values\n    : []\n  const radiobuttonsFilterValue = props.filterValue?.type === \"single\"\n    ? props.filterValue.value\n    : null\n\n  const slicedFilterOptions = props.filterProperty.options.slice(0, MAX_ITEMS_COLLAPSED)\n\n  const [ isExpanded, setExpanded ] = useState(areTheChosenOptionsOutsideSlicedOptions)\n\n  const displayedFilterOptions = isExpanded\n    ? props.filterProperty.options\n    : slicedFilterOptions\n\n  const remainingOptions = props.filterProperty.options.length - displayedFilterOptions.length\n  const shouldDisplayExpanderToggle = isExpanded || remainingOptions > 0\n\n  const toggleCheckboxFilterOption = (value: FilterOption, enabled: boolean) => {\n    const newValues = enabled\n      ? [ ...checkboxesFilterValues, value.value ]\n      : checkboxesFilterValues.filter(v => v !== value.value)\n    props.onChange(newValues.length ? {\n      type: \"multi\",\n      valueType: props.filterProperty.valueType,\n      values: newValues\n    } : null)\n  }\n\n  const clearRadioFilterOption = () => {\n    props.onChange(null)\n  }\n\n  const toggleRadioFilterOption = (value: FilterOption, enabled: boolean) => {\n    props.onChange(enabled ? {\n      type: \"single\",\n      valueType: props.filterProperty.valueType,\n      value: value.value\n    } : null)\n  }\n\n  return (\n    <div className={styles[\"list-filter\"]}>\n      {props.type === \"radiobuttons\" && (\n        <div className={styles[\"item\"]}>\n          <label>\n            <input name={`listfilter_${idRef.current}`}\n                   type=\"radio\" checked={radiobuttonsFilterValue == null}\n                   onChange={clearRadioFilterOption} />\n            All\n          </label>\n        </div>\n      )}\n\n      {displayedFilterOptions.map(value => {\n        if (props.type === \"checkboxes\") {\n          const checked = checkboxesFilterValues.includes(value.value)\n          return (\n            <div key={value.value} className={styles[\"item\"]}>\n              <label>\n                <input type=\"checkbox\" checked={checked} onChange={e => {\n                  toggleCheckboxFilterOption(value, e.currentTarget.checked)\n                }} />\n                {value.label}\n              </label>\n            </div>\n          )\n        } else {\n          const checked = radiobuttonsFilterValue === value.value\n          return (\n            <div key={value.value} className={styles[\"item\"]}>\n              <label>\n                <input name={`listfilter_${idRef.current}`} type=\"radio\" checked={checked} onChange={e => {\n                  toggleRadioFilterOption(value, e.currentTarget.checked)\n                }} />\n                {value.label}\n              </label>\n            </div>\n          )\n        }\n      })}\n\n      {shouldDisplayExpanderToggle && (\n        <a href=\"#\" className={styles[\"expander\"]} onClick={e => {\n          e.preventDefault()\n          setExpanded(prevExpanded => !prevExpanded)\n        }}>\n          {isExpanded\n            ? '⇑⇑ less'\n            : `⇓⇓ ${remainingOptions} more`}\n        </a>\n      )}\n    </div>\n  )\n\n  function areTheChosenOptionsOutsideSlicedOptions() {\n    return !checkboxesFilterValues.every(filterValue =>\n      slicedFilterOptions.some(opt => opt.value === filterValue)\n    )\n  }\n}\n","import React, { useEffect, useState } from \"react\"\n// @ts-ignore no typings available for this\nimport RangeSlider from \"react-range-slider-input\"\nimport \"react-range-slider-input/dist/style.css\"\n\n/**\n * Wrap react-range-slider-input RangeSlider so that:\n * a) we have typings\n * b) the range is only published when the user has finished dragging, while\n *    keeping the component controlled\n */\nexport function CustomRangeSlider(props: {\n  className?: string\n  min: number\n  max: number\n  value: [ number, number ]\n  onChange: (minmax: [ number, number ]) => void\n  onSlide?: (minmax: [ number, number ]) => void\n}) {\n  const [ localValue, setLocalValue ] = useState(props.value)\n\n  useEffect(() => {\n    setLocalValue(props.value)\n  }, [ props.value ])\n\n  const setLocalValueAndSendUpdateIfNeeded = (value: [ number, number ]) => {\n    setLocalValue(value)\n    props.onSlide?.(value)\n  }\n\n  const sendUpdate = () => {\n    props.onChange(localValue)\n  }\n\n  return (\n    <RangeSlider\n      className={props.className}\n      min={props.min}\n      max={props.max}\n      value={localValue}\n      onInput={setLocalValueAndSendUpdateIfNeeded}\n      onThumbDragEnd={sendUpdate}\n      onRangeDragEnd={sendUpdate} />\n  )\n}\n","import React, { useEffect, useState } from \"react\"\nimport { FilterValue } from \"../model/FilterValues\"\nimport { RangeFilterProperty } from \"../model/FilterProperties\"\nimport { CustomRangeSlider } from \"../../../CustomRangeSlider\"\nimport styles from \"./RangeFilter.module.css\"\n\nexport function RangeFilter(props: {\n  filterProperty: RangeFilterProperty\n  filterValue: FilterValue | null\n  onChange: (value: FilterValue) => void\n}) {\n\n  const filterValue = props.filterValue?.type === \"range\"\n    ? props.filterValue\n    : {\n      type: \"range\",\n      min: -Infinity,\n      max: +Infinity\n    }\n\n  const setMinMax = (minmax: [ number, number ]) => {\n    props.onChange({\n      type: \"range\",\n      min: minmax[0],\n      max: minmax[1]\n    })\n  }\n\n  const setMin = (value: number | null) => {\n    props.onChange({\n      type: \"range\",\n      min: value != null ? value : -Infinity,\n      max: filterValue.max\n    })\n  }\n\n  const setMax = (value: number | null) => {\n    props.onChange({\n      type: \"range\",\n      min: filterValue.min,\n      max: value != null ? value : +Infinity,\n    })\n  }\n\n  return (\n    <div className={styles[\"range-filter\"]}>\n      <div className={styles[\"range-filter-inputs\"]}>\n        <SafeImmediateNumberInput\n          value={filterValue.min}\n          min={props.filterProperty.min}\n          max={Math.min(filterValue.max, props.filterProperty.max)}\n          onChange={setMin} />\n        <div className={styles[\"separator\"]}>—</div>\n        <SafeImmediateNumberInput\n          value={filterValue.max}\n          min={Math.max(filterValue.min, props.filterProperty.min)}\n          max={props.filterProperty.max}\n          onChange={setMax} />\n      </div>\n      <div className={styles[\"range-filter-slider\"]}>\n        <CustomRangeSlider\n          className={styles[\"range-slider\"]}\n          min={props.filterProperty.min}\n          max={props.filterProperty.max}\n          value={[\n            isFinite(filterValue.min) ? filterValue.min : props.filterProperty.min,\n            isFinite(filterValue.max) ? filterValue.max : props.filterProperty.max,\n          ]}\n          onChange={setMinMax} />\n      </div>\n      <div className={styles[\"range-filter-legend\"]}>\n        <label>{props.filterProperty.min}</label>\n        <div className={styles[\"grow\"]} />\n        <label>{props.filterProperty.max}</label>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Controlled input for numbers, with the modified behaviour that\n * the onChange handler will be triggered on both the \"keyup\" and \"change\" events,\n * but only if the number is not NaN, or if it is empty\n */\nexport function SafeImmediateNumberInput(props: {\n  value: number | null\n  onChange: (value: number | null) => void\n} & Omit<React.InputHTMLAttributes<HTMLInputElement>, \"type\" | \"value\" | \"onChange\" | \"onKeyUp\">) {\n  const { value, onChange, ...otherProps } = props\n\n  const [ localValue, setLocalValue ] = useState(sanitizeNumberToString(props.value))\n\n  useEffect(() => {\n    setLocalValue(sanitizeNumberToString(props.value))\n  }, [ props.value ])\n\n  const setLocalValueAndPublishIfValid = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const inputValue = e.currentTarget.value\n    const inputValueAsNumber = e.currentTarget.valueAsNumber\n\n    setLocalValue(inputValue)\n\n    if (inputValue === \"\") {\n      props.onChange(null)\n    } else if (!isNaN(inputValueAsNumber)) {\n      props.onChange(inputValueAsNumber)\n    }\n  }\n\n  return (\n      <input type=\"number\"\n             value={localValue}\n             onChange={setLocalValueAndPublishIfValid}\n             onKeyUp={setLocalValueAndPublishIfValid}\n             {...otherProps}\n      />\n  )\n}\n\nfunction sanitizeNumberToString(number: number | null) {\n  return (number != null && isFinite(number) && !isNaN(number))\n    ? number.toString()\n    : \"\"\n}\n","export type SparqlResults<Keys extends string, OptionalKeys extends string = never> = {\n  head: {\n    vars: (Keys & OptionalKeys)[]\n  },\n  results: {\n    bindings: Array<{\n      [key in Keys]: Data\n    }> & Array<{\n      [key in OptionalKeys]?: Data\n    }>\n  }\n}\n\nexport type OpaqueSparqlResults = SparqlResults<string, string>\n\nconst XML_SCHEMA_INTEGER = \"http://www.w3.org/2001/XMLSchema#integer\"\nconst XML_SCHEMA_FLOAT = \"http://www.w3.org/2001/XMLSchema#float\"\nconst XML_SCHEMA_DOUBLE = \"http://www.w3.org/2001/XMLSchema#double\"\nconst XML_SCHEMA_BOOLEAN = \"http://www.w3.org/2001/XMLSchema#boolean\"\n\ntype Data = Uri | LiteralString | LiteralInteger | LiteralFloat | LiteralDouble | LiteralBoolean\ntype LiteralBoolean = { type: \"literal\", value: string, datatype: typeof XML_SCHEMA_BOOLEAN }\ntype LiteralInteger = { type: \"literal\", value: string, datatype: typeof XML_SCHEMA_INTEGER }\ntype LiteralFloat = { type: \"literal\", value: string, datatype: typeof XML_SCHEMA_FLOAT }\ntype LiteralDouble = { type: \"literal\", value: string, datatype: typeof XML_SCHEMA_DOUBLE }\ntype LiteralString = { type: \"literal\", value: string }\ntype Uri = { type: \"uri\", value: \"string\" }\n\nexport function getValueAsUri(data: Data): string {\n  if (data.type !== \"uri\")\n    throw new Error(`Expected type uri, got ${data.type} for ${data.value}`)\n\n  return data.value\n}\n\nexport function getValueAsLiteralString(data: Data): string {\n  if (data.type !== \"literal\")\n    throw new Error(`Expected type literal, got ${data.type} for ${data.value}`)\n\n  return data.value\n}\n\nexport function getValueAsLiteralOrUri(data: Data): string {\n  if (!isTypeAnyOf(data.type, [\"literal\", \"uri\"]))\n    throw new Error(`Expected type literal or uri, got ${data.type} for ${data.value}`)\n\n  return data.value\n}\n\nexport function getValueAsLiteralBoolean(data: Data): boolean {\n  if (data.type !== \"literal\")\n    throw new Error(`Expected type literal, got ${data.type} for ${data.value}`)\n\n  if (!(\"datatype\" in data))\n    throw Error(`No datatype for ${data.value}, was expecting boolean`)\n\n  if (data.datatype !== XML_SCHEMA_BOOLEAN)\n    throw new Error(`Wrong datatype for ${data.value}, was expecting boolean`)\n\n  return data.value === \"true\"\n}\n\nexport function getValueAsLiteralNumber(data: Data): number {\n  if (data.type !== \"literal\")\n    throw new Error(`Expected type literal, got ${data.type} for ${data.value}`)\n\n  if (!(\"datatype\" in data))\n    throw Error(`No datatype for ${data.value}, was expecting float or integer`)\n\n  if (!isTypeAnyOf(data.datatype, [XML_SCHEMA_FLOAT, XML_SCHEMA_DOUBLE, XML_SCHEMA_INTEGER]))\n    throw new Error(`Expected double, float or integer datatype, got ${data.datatype} for ${data.value}`)\n\n  return parseFloat(data.value)\n}\n\n/**\n * Unlike {@see getValueAsLiteralNumber}, this also allows strings containing numbers\n */\nexport function getValueAsLiteralNumberFuzzy(data: Data): number {\n  if (data.type !== \"literal\")\n    throw new Error(`Expected type literal, got ${data.type} for ${data.value}`)\n\n  return parseFloat(data.value)\n}\n\nfunction isTypeAnyOf<T, U extends T>(type: T, types: U[]): type is U {\n  return types.includes(type as U);\n}\n","import {\n  getValueAsLiteralBoolean,\n  getValueAsLiteralNumberFuzzy,\n  getValueAsLiteralOrUri,\n  getValueAsLiteralString,\n  getValueAsUri,\n  SparqlResults\n} from \"../../../../helpers/sparqlResultHelpers\"\nimport {\n  FilterProperty, FilterType,\n  FilterOption,\n  MultiFilterProperty,\n  RangeFilterProperty, DateRangeFilterProperty\n} from \"../model/FilterProperties\"\n\nexport type DynamicFilterSparQLResults\n  = SparqlResults<\"sparqlParameter\"\n  | \"property\"\n  | \"propertyURI\"\n  | \"value\"\n  | \"valueURI\"\n  | \"type\"\n  , \"defaultExpanded\"\n  | \"defaultVisible\">\n\ntype PartialFilterProperty\n  = Pick<FilterProperty, \"sparqlParameter\"\n  | \"propertyUri\"\n  | \"propertyLabel\"\n  | \"defaultExpanded\"\n  | \"defaultVisible\">\n\nexport function convertSparQLResultToFilterProperties(sparQLResult: DynamicFilterSparQLResults) {\n  const filterPropertiesBuilder = new FilterPropertiesBuilder()\n\n  for (const binding of sparQLResult.results.bindings) {\n    const sparqlParameter = getValueAsLiteralString(binding.sparqlParameter)\n    const propertyLabel = getValueAsLiteralString(binding.property)\n    const propertyUri = getValueAsUri(binding.propertyURI)\n    const type = getValueAsLiteralString(binding.type)\n    const valueLabel = getValueAsLiteralString(binding.value)\n    const defaultExpanded = binding.defaultExpanded\n      ? getValueAsLiteralBoolean(binding.defaultExpanded)\n      : false\n    const defaultVisible = binding.defaultVisible\n      ? getValueAsLiteralBoolean(binding.defaultVisible)\n      : true\n\n    const partialFilterProperty: PartialFilterProperty = {\n      sparqlParameter, propertyUri, propertyLabel, defaultExpanded, defaultVisible\n    }\n\n    switch (type) {\n      case \"range\":\n        const numberValue = getValueAsLiteralNumberFuzzy(binding.valueURI)\n        if (valueLabel === \"min\") {\n          filterPropertiesBuilder.addMin(partialFilterProperty, numberValue)\n        } else if (valueLabel === \"max\") {\n          filterPropertiesBuilder.addMax(partialFilterProperty, numberValue)\n        } else {\n          throw new Error(`Filter ?value for 'range' should be 'min' or 'max', received ${valueLabel}`)\n        }\n        break\n      case \"daterange\":\n        const dateValueStr = getValueAsLiteralString(binding.valueURI)\n        const dateValue = new Date(dateValueStr)\n        if (!isDateValid(dateValue)) {\n          throw new Error(`Invalid date literal ${dateValueStr}, should be ISO format`)\n        }\n\n        if (valueLabel === \"min\") {\n          filterPropertiesBuilder.addMinDate(partialFilterProperty, dateValue)\n        } else if (valueLabel === \"max\") {\n          filterPropertiesBuilder.addMaxDate(partialFilterProperty, dateValue)\n        } else {\n          throw new Error(`Filter ?value for 'daterange' should be 'min' or 'max', received ${valueLabel}`)\n        }\n        break\n      case \"search\":\n      case \"radiobuttons\":\n      case \"checkboxes\":\n        filterPropertiesBuilder.addListValue(partialFilterProperty, binding.valueURI.type, type, {\n          label: valueLabel,\n          value: getValueAsLiteralOrUri(binding.valueURI)\n        })\n        break\n      default:\n        console.error(`Unrecognized filter type ${type}`)\n    }\n  }\n\n  return filterPropertiesBuilder.build()\n}\n\nclass FilterPropertiesBuilder {\n  filterPropertiesByUri: Record<string, FilterProperty> = {}\n\n  getOrCreate(partialFilterProperty: PartialFilterProperty, type: \"range\"): RangeFilterProperty\n  getOrCreate(partialFilterProperty: PartialFilterProperty, type: \"daterange\"): DateRangeFilterProperty\n  getOrCreate(partialFilterProperty: PartialFilterProperty, type: \"checkboxes\" | \"radiobuttons\" | \"search\", valueType: \"uri\" | \"literal\"): MultiFilterProperty\n  getOrCreate(partialFilterProperty: PartialFilterProperty, type: FilterType, valueType: \"uri\" | \"literal\" = \"literal\") {\n    const propertyUri = partialFilterProperty.propertyUri\n    if (propertyUri in this.filterPropertiesByUri) {\n      const filterProperties = this.filterPropertiesByUri[propertyUri]\n      if (filterProperties.valueType !== valueType) {\n        throw new Error(`value types for ${propertyUri} are not consistent, must be all uris or all literals.`)\n      }\n      if (filterProperties.type !== type) {\n        throw new Error(`filter types for ${propertyUri} are not consistent (found ${filterProperties.type} but expected ${type})`)\n      }\n      return filterProperties\n    }\n\n    const filterProperty: FilterProperty = (() => {\n      switch (type) {\n        case \"range\":\n          return {\n            ...partialFilterProperty,\n            type,\n            valueType: \"literal\",\n            min: -Infinity,\n            max: +Infinity\n          }\n        case \"daterange\":\n          return {\n            ...partialFilterProperty,\n            type,\n            valueType: \"literal\",\n            min: null,\n            max: null\n          }\n        case \"search\":\n        case \"radiobuttons\":\n        case \"checkboxes\":\n          return {\n            ...partialFilterProperty,\n            type,\n            valueType,\n            options: []\n          }\n        default:\n          throw new Error(`Unknown FilterType ${type}`)\n      }\n    })()\n    this.filterPropertiesByUri[propertyUri] = filterProperty\n    return filterProperty\n  }\n\n  addMin(partialFilterProperty: PartialFilterProperty, min: number) {\n    this.getOrCreate(partialFilterProperty, \"range\").min = min\n  }\n\n  addMax(partialFilterProperty: PartialFilterProperty, max: number) {\n    this.getOrCreate(partialFilterProperty, \"range\").max = max\n  }\n\n  addMinDate(partialFilterProperty: PartialFilterProperty, min: Date) {\n    this.getOrCreate(partialFilterProperty, \"daterange\").min = min\n  }\n\n  addMaxDate(partialFilterProperty: PartialFilterProperty, max: Date) {\n    this.getOrCreate(partialFilterProperty, \"daterange\").max = max\n  }\n\n  addListValue(\n    partialFilterProperty: PartialFilterProperty,\n    valueType: \"literal\" | \"uri\",\n    type: \"checkboxes\" | \"radiobuttons\" | \"search\",\n    value: FilterOption\n  ) {\n    this.getOrCreate(partialFilterProperty, type, valueType).options.push(value)\n  }\n\n  build(): FilterProperty[] {\n    return Object.values(this.filterPropertiesByUri)\n  }\n}\n\nfunction isDateValid(date: Date) {\n  return !isNaN(date.getTime())\n}\n","export type FilterValue = SingleFilterValue | MultiFilterValue | RangeFilterValue | DateRangeFilterValue\n\nexport type FilterValueType = \"single\" | \"multi\" | \"range\" | \"daterange\"\nexport interface BaseFilterValue {\n  type: FilterValueType\n}\n\nexport interface SingleFilterValue extends BaseFilterValue {\n  type: \"single\"\n  value: string\n  valueType: \"literal\" | \"uri\"\n}\n\nexport interface MultiFilterValue extends BaseFilterValue {\n  type: \"multi\"\n  values: string[]\n  valueType: \"literal\" | \"uri\"\n}\n\nexport interface RangeFilterValue extends BaseFilterValue {\n  type: \"range\"\n  min: number\n  max: number\n}\n\nexport interface DateRangeFilterValue extends BaseFilterValue {\n  type: \"daterange\"\n  min: Date | null\n  max: Date | null\n}\n\nexport function asFilterValueTypeOrNull<T extends FilterValue>(filterValue: FilterValue | null | undefined, type: T[\"type\"]): T | null {\n  if (!filterValue) return null\n  if (filterValue.type !== type) return null\n  if (!(filterValue as T)) return null\n  return filterValue as T\n}\n","import {\n  asFilterValueTypeOrNull,\n  DateRangeFilterValue,\n  FilterValue,\n  MultiFilterValue,\n  RangeFilterValue,\n  SingleFilterValue\n} from \"../model/FilterValues\"\nimport { FilterProperty } from \"../model/FilterProperties\"\nimport { FilterState } from \"../util/useFilterContext\"\n\nexport function writeUrlFilterState(filterProperties: FilterProperty[], filterState: FilterState) {\n  const urlParams = new URLSearchParams(window.location.search)\n\n  function writeSingleFilterValue(parameterName: string, filterValue: SingleFilterValue | null) {\n    urlParams.delete(parameterName)\n    if (!filterValue) return\n\n    urlParams.set(parameterName, filterValue.value)\n  }\n\n  function writeMultiFilterValues(parameterName: string, filterValue: MultiFilterValue | null) {\n    urlParams.delete(parameterName)\n    if (!filterValue) return\n\n    for (const value of filterValue.values) {\n      urlParams.append(parameterName, value)\n    }\n  }\n\n  function writeRangeFilterValues(parameterName: string, filterValue: RangeFilterValue | null) {\n    const rangeParameterNames = createRangeParameterNames(parameterName)\n    urlParams.delete(parameterName)\n    Object.values(rangeParameterNames).forEach(name => urlParams.delete(name))\n\n    if (!filterValue) return\n\n    if (isFinite(filterValue.min)) urlParams.set(rangeParameterNames.min, filterValue.min.toString())\n    if (isFinite(filterValue.max)) urlParams.set(rangeParameterNames.max, filterValue.max.toString())\n  }\n\n  function writeDateRangeFilterValues(parameterName: string, filterValue: DateRangeFilterValue | null) {\n    const rangeParameterNames = createRangeParameterNames(parameterName)\n    urlParams.delete(parameterName)\n    Object.values(rangeParameterNames).forEach(name => urlParams.delete(name))\n\n    if (!filterValue) return\n\n    if (filterValue.min) urlParams.set(rangeParameterNames.min, filterValue.min.toISOString())\n    if (filterValue.max) urlParams.set(rangeParameterNames.max, filterValue.max.toISOString())\n  }\n\n  for (const filterProperty of filterProperties) {\n    const parameterName = getParameterName(filterProperty)\n\n    const filterValue = filterState.values[filterProperty.propertyUri]\n\n    switch (filterProperty.type) {\n      case \"search\":\n      case \"radiobuttons\":\n        writeSingleFilterValue(parameterName, asFilterValueTypeOrNull(filterValue, \"single\"))\n        break\n      case \"checkboxes\":\n        writeMultiFilterValues(parameterName, asFilterValueTypeOrNull(filterValue, \"multi\"))\n        break\n      case \"range\":\n        writeRangeFilterValues(parameterName, asFilterValueTypeOrNull(filterValue, \"range\"))\n        break\n      case \"daterange\":\n        writeDateRangeFilterValues(parameterName, asFilterValueTypeOrNull(filterValue, \"daterange\"))\n        break\n      default:\n        throw new Error(`Unknown filter value type ${JSON.stringify(filterValue)}`)\n    }\n\n    if (!filterValue) {\n      const isVisible = filterState.visibility.has(filterProperty.propertyUri)\n      const shouldWriteVisibility = !filterProperty.defaultVisible && isVisible\n      if (shouldWriteVisibility) {\n        urlParams.set(parameterName, \"\")\n      }\n    }\n  }\n\n  window.history.replaceState({}, '', `${window.location.pathname}?${urlParams}`)\n}\n\nexport function readUrlFilterState(filterProperties: FilterProperty[]): FilterState {\n  const values: Record<string, FilterValue> = {}\n  const visibility: Set<string> = new Set()\n  const urlParams = new URLSearchParams(window.location.search)\n\n  function readSingleFilterValue(parameterName: string,  valueType: FilterProperty['valueType']): SingleFilterValue | null {\n    if (!urlParams.has(parameterName)) return null\n    const value = urlParams.get(parameterName)\n    if (!value) return null\n\n    return {\n      type: \"single\",\n      value,\n      valueType\n    }\n  }\n\n  function readMultiFilterValues(parameterName: string, valueType: FilterProperty['valueType']): MultiFilterValue | null {\n    if (!urlParams.has(parameterName)) return null\n\n    const urlValues = urlParams.getAll(parameterName)\n    if (!urlValues.length) return null\n\n    return {\n      type: \"multi\",\n      values: urlValues,\n      valueType\n    }\n  }\n\n  function readRangeFilterValues(parameterName: string): RangeFilterValue | null {\n    const rangeParameterNames = createRangeParameterNames(parameterName)\n\n    const rangeValue: RangeFilterValue = {\n      type: \"range\",\n      min: getUrlParamAsValidNumberOrNull(urlParams, rangeParameterNames.min) ?? -Infinity,\n      max: getUrlParamAsValidNumberOrNull(urlParams, rangeParameterNames.max) ?? +Infinity\n    }\n\n    if (!isFinite(rangeValue.min) && !isFinite(rangeValue.max)) {\n      return null\n    }\n\n    return rangeValue\n  }\n\n  function readDateRangeFilterValues(parameterName: string): DateRangeFilterValue | null {\n    const rangeParameterNames = createRangeParameterNames(parameterName)\n\n    const rangeValue: DateRangeFilterValue = {\n      type: \"daterange\",\n      min: getUrlParamAsValidDateOrNull(urlParams, rangeParameterNames.min),\n      max: getUrlParamAsValidDateOrNull(urlParams, rangeParameterNames.max)\n    }\n\n    if (!rangeValue.min && !rangeValue.max) {\n      return null\n    }\n\n    return rangeValue\n  }\n\n  for (const filterProperty of filterProperties) {\n    const parameterName = filterProperty.propertyLabel\n    const value = (() => {\n      switch (filterProperty.type) {\n        case \"search\":\n        case \"radiobuttons\":\n          return readSingleFilterValue(parameterName, filterProperty.valueType)\n        case \"checkboxes\":\n          return readMultiFilterValues(parameterName, filterProperty.valueType)\n        case \"range\":\n          return readRangeFilterValues(parameterName)\n        case \"daterange\":\n          return readDateRangeFilterValues(parameterName)\n        default:\n          throw new Error(`Unknown filter property type ${JSON.stringify(filterProperty)}`)\n      }\n    })()\n\n    if (value) {\n      values[filterProperty.propertyUri] = value\n    }\n\n    const isVisible = urlParams.has(parameterName) || value || filterProperty.defaultVisible\n    if (isVisible) {\n      visibility.add(filterProperty.propertyUri)\n    }\n  }\n\n  return { values, visibility }\n}\n\nfunction getUrlParamAsValidNumberOrNull(urlParams: URLSearchParams, name: string): number | null {\n  if (!urlParams.has(name)) return null\n\n  const valueString = urlParams.get(name)\n  if (valueString == null) return null\n\n  const number = parseFloat(valueString)\n  if (isNaN(number)) return null\n\n  return number\n}\n\nfunction getUrlParamAsValidDateOrNull(urlParams: URLSearchParams, name: string): Date | null {\n  if (!urlParams.has(name)) return null\n\n  const valueString = urlParams.get(name)\n  if (!valueString) return null\n\n  const date = new Date(valueString)\n  if (isNaN(date.getTime())) return null\n\n  return date\n}\n\n/**\n * The URL parameter name to use.\n * Rationale for using the label rather than URI: prettier/more human-readable\n *\n * @return the url parameter name to use\n */\nfunction getParameterName(filterProperty: FilterProperty) {\n  return filterProperty.propertyLabel\n}\n\nconst MAX_PARAMETER_SUFFIX = \".max\"\nconst MIN_PARAMETER_SUFFIX = \".min\"\n\ntype RangeParameterNames<T extends string> = {\n  min: `${T}${typeof MIN_PARAMETER_SUFFIX}`\n  max: `${T}${typeof MAX_PARAMETER_SUFFIX}`\n}\n\nfunction createRangeParameterNames<T extends string>(parameterName: T): RangeParameterNames<T> {\n  return {\n    min: `${parameterName}${MIN_PARAMETER_SUFFIX}`,\n    max: `${parameterName}${MAX_PARAMETER_SUFFIX}`\n  }\n}\n","import {\n  convertSparQLResultToFilterProperties,\n  DynamicFilterSparQLResults\n} from \"./convertSparQLResultToFilterProperties\"\nimport { useEffect, useMemo, useRef } from \"react\"\nimport { produce } from \"immer\"\nimport { FilterValue } from \"../model/FilterValues\"\nimport { readUrlFilterState, writeUrlFilterState } from \"./syncUrlFilterState\"\nimport { useDependentState } from \"../../../../hooks/use-dependent-state\"\nimport { FilterProperty } from \"../model/FilterProperties\"\n\nexport type FilterContext = {\n  properties: FilterProperty[]\n  state: FilterState\n  isStateModified: boolean\n  hasAddableFilters: boolean\n\n  setFilterValue: (uri: string, value: FilterValue | null) => void\n  setFilterVisibility: (uri: string, visible: boolean) => void\n  setFiltersVisibility: (uris: string[], visible: boolean) => void\n  reset: () => void\n}\n\nexport type FilterState = {\n  values: Record<string, FilterValue>\n  visibility: Set<string>\n}\n\nexport function useFilterContext(\n  sparqlData: DynamicFilterSparQLResults | null | undefined\n): FilterContext | null {\n  const filterProperties = useMemo(() => {\n    if (!sparqlData) return null\n    try {\n      return convertSparQLResultToFilterProperties(sparqlData)\n    } catch (e) {\n      console.error(\"Error parsing filter config from SparQL\", e)\n      console.info(\"The bindings received are: \", sparqlData?.results?.bindings)\n      return null\n    }\n  }, [ sparqlData ])\n\n  const [ filterState, setFilterState ] = useDependentState<FilterState>(() => {\n    if (!filterProperties) {\n      return {\n        values: {},\n        visibility: new Set()\n      }\n    }\n\n    return readUrlFilterState(filterProperties)\n  }, [ filterProperties ])\n\n  const filtersTouched = useRef(false)\n\n  useEffect(() => {\n    if (!filterProperties) return\n    if (!filtersTouched.current) return\n    writeUrlFilterState(filterProperties, filterState)\n  }, [ filterProperties, filterState, filtersTouched.current ])\n\n  function markFiltersTouchedBefore<F extends (...args: any[]) => any>(func: F) {\n    return (...args: Parameters<F>) => {\n      filtersTouched.current = true\n      return func(...args)\n    }\n  }\n\n  const setFilterValue = (uri: string, value: FilterValue | null) => {\n    setFilterState(filterState => produce(filterState, draftFilterState => {\n      if (value == null) {\n        delete draftFilterState.values[uri]\n      } else {\n        draftFilterState.values[uri] = value\n      }\n    }))\n  }\n\n  const setFiltersVisibility = (uris: string[], visible: boolean) => {\n    setFilterState(filterState => produce(filterState, draftFilterState => {\n      for (const uri of uris) {\n        visible\n          ? draftFilterState.visibility.add(uri)\n          : draftFilterState.visibility.delete(uri)\n      }\n    }))\n  }\n\n  const setFilterVisibility = (uri: string, visible: boolean) => {\n    setFiltersVisibility([ uri ], visible)\n  }\n\n  const reset = () => {\n    if (!filterProperties) {\n      console.error(\"Error: filterProperties is null\")\n      return\n    }\n\n    setFilterState(filterState => produce(filterState, draftFilterState => {\n      draftFilterState.values = {}\n      draftFilterState.visibility = new Set(\n        filterProperties\n          .filter(fp => fp.defaultVisible)\n          .map(fp => fp.propertyUri)\n      )\n    }))\n  }\n\n  return useMemo(() => {\n    if (!filterProperties) return null\n\n    return {\n      properties: filterProperties,\n      state: filterState,\n      isStateModified: isFilterStateModified(filterProperties, filterState),\n      hasAddableFilters: hasAddableFilters(filterProperties),\n      setFilterValue: markFiltersTouchedBefore(setFilterValue),\n      setFilterVisibility: markFiltersTouchedBefore(setFilterVisibility),\n      setFiltersVisibility: markFiltersTouchedBefore(setFiltersVisibility),\n      reset: markFiltersTouchedBefore(reset)\n    }\n  }, [ filterProperties, filterState ])\n\n  function hasAddableFilters(filterProperties: FilterProperty[]) {\n    return filterProperties.some(p => !p.defaultVisible)\n  }\n\n  function isFilterStateModified(filterProperties: FilterProperty[], filterState: FilterState) {\n    const hasFilterValues = Object.keys(filterState.values).length > 0\n    const hasAdditionalProperties = Array.from(filterState.visibility).some(uri => {\n      return filterProperties.some(property => {\n        return property.propertyUri === uri && !property.defaultVisible\n      })\n    })\n    return hasFilterValues || hasAdditionalProperties\n  }\n\n}\n","import { MultiFilterProperty } from \"../model/FilterProperties\"\nimport { FilterValue } from \"../model/FilterValues\"\nimport Select from \"react-select\"\n\nexport function SearchSelectFilter(props: {\n  filterProperty: MultiFilterProperty\n  filterValue: FilterValue | null\n  onChange: (value: FilterValue | null) => void\n}) {\n  const filterValue = props.filterValue?.type === \"single\"\n    ? props.filterValue.value\n    : null\n\n  const filterValueOption = filterValue\n    ? props.filterProperty.options.find(opt => opt.value === filterValue)\n    : null\n\n  return (\n    <div>\n      <Select\n        isClearable\n        isSearchable\n        placeholder=\"Search...\"\n        options={props.filterProperty.options}\n        getOptionLabel={option => option.label}\n        getOptionValue={option => option.value ?? \"\"}\n        value={filterValueOption}\n        menuPortalTarget={document.querySelector('body')}\n        onChange={(value) => {\n          props.onChange(value ? {\n            type: \"single\",\n            valueType: props.filterProperty.valueType,\n            value: value.value\n          } : null)\n        }}\n      />\n    </div>\n  )\n}\n","import React, { useEffect, useState } from \"react\"\nimport { FilterValue } from \"../model/FilterValues\"\nimport { DateRangeFilterProperty } from \"../model/FilterProperties\"\nimport styles from \"./RangeFilter.module.css\"\n\nexport function DateRangeFilter(props: {\n  filterProperty: DateRangeFilterProperty\n  filterValue: FilterValue | null\n  onChange: (value: FilterValue) => void\n}) {\n\n  const filterValue = props.filterValue?.type === \"daterange\"\n    ? props.filterValue\n    : {\n      type: \"daterange\",\n      min: null,\n      max: null\n    }\n\n  const setMin = (value: Date | null) => {\n    props.onChange({\n      type: \"daterange\",\n      min: value,\n      max: filterValue.max\n    })\n  }\n\n  const setMax = (value: Date | null) => {\n    props.onChange({\n      type: \"daterange\",\n      min: filterValue.min,\n      max: value\n    })\n  }\n\n  const minPossibleValueIsoString = formatAsISODateOrEmpty(props.filterProperty.min)\n  const maxPossibleValueIsoString = formatAsISODateOrEmpty(props.filterProperty.max)\n\n  return (\n    <div className={styles[\"range-filter\"]}>\n      <div className={styles[\"range-filter-inputs\"]}>\n        <SafeDateInput\n          value={filterValue.min}\n          min={props.filterProperty.min}\n          max={filterValue.max ? filterValue.max : props.filterProperty.max}\n          onChange={setMin} />\n        <div className={styles[\"separator\"]}>—</div>\n        <SafeDateInput\n          value={filterValue.max}\n          min={filterValue.min ? filterValue.min : props.filterProperty.min}\n          max={props.filterProperty.max}\n          onChange={setMax} />\n      </div>\n      <div className={styles[\"range-filter-legend\"]}>\n        <label>{minPossibleValueIsoString}</label>\n        <div className={styles[\"grow\"]} />\n        <label>{maxPossibleValueIsoString}</label>\n      </div>\n    </div>\n  )\n}\n\nfunction SafeDateInput(props: {\n  value: Date | null\n  min?: Date | null\n  max?: Date | null\n  onChange: (value: Date | null) => void\n}) {\n  const [ stringValue, setStringValue ] = useState(formatAsISODateOrEmpty(props.value))\n\n  useEffect(() => {\n    setStringValue(formatAsISODateOrEmpty(props.value))\n  }, [ props.value ])\n\n  const setLocalValueAndPublishIfValid = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const inputValue = e.currentTarget.value\n    const inputValueAsDate = e.currentTarget.valueAsDate\n\n    setStringValue(inputValue)\n\n    if (inputValueAsDate == null) {\n      props.onChange(null)\n    } else if (!isNaN(inputValueAsDate.getTime())) {\n      props.onChange(inputValueAsDate)\n    }\n  }\n\n  const minIsoString = formatAsISODateOrEmpty(props?.min)\n  const maxIsoString = formatAsISODateOrEmpty(props?.max)\n\n  return (\n    <input\n      type=\"date\"\n      value={stringValue}\n      min={minIsoString}\n      max={maxIsoString}\n      onChange={setLocalValueAndPublishIfValid}\n    />\n  )\n}\n\nfunction formatAsISODateOrEmpty(date: Date | null | undefined): string {\n  if (!date) return \"\"\n  const year = String(date.getFullYear()).padStart(4, '0')\n  const month = String(date.getMonth() + 1).padStart(2, '0')\n  const day = String(date.getDate()).padStart(2, '0')\n  return `${year}-${month}-${day}`\n}\n","import React, { useMemo, useState } from \"react\"\nimport Dialog_ from \"../../Dialog\"\nimport { Button as Button_, Input as Input_, Label as Label_ } from \"reactstrap\"\nimport { FilterProperty } from \"./model/FilterProperties\"\nimport styles from \"./AddFilterDialog.module.css\"\n\n// Workaround due to incorrect or missing typings\nconst Dialog = Dialog_ as any\nconst Button = Button_ as any\nconst Input = Input_ as any\nconst Label = Label_ as any\n\nexport function AddFilterDialog(props: {\n  availableProperties: FilterProperty[]\n  onClose: (uris: string[] | null) => void\n}) {\n  const [ filter, setFilter ] = useState(\"\")\n  const [ selectedUris, setSelectedUris ] = useState<string[]>([])\n\n  const filtersFilteredAndSorted = useMemo(() => {\n    return props.availableProperties\n      .filter(filterProperty => filterProperty.propertyLabel.toLowerCase().includes(filter.toLowerCase()))\n      .sort((a, b) => a.propertyLabel.localeCompare(b.propertyLabel))\n  }, [ props.availableProperties, filter ])\n\n  const addFiltersAndClose = () => {\n    props.onClose(selectedUris)\n  }\n\n  const addSingleFilterAndClose = () => {\n    if (filtersFilteredAndSorted.length !== 1) return\n    const firstUri = filtersFilteredAndSorted[0].propertyUri\n    props.onClose([ firstUri ])\n  }\n\n  return (\n    <Dialog>\n      <Label><strong>Add properties to filter</strong></Label>\n      <div className={styles[\"inputs\"]}>\n        <Input\n          autoFocus\n          className=\"dark-form-control\"\n          placeholder=\"Search for properties...\"\n          value={filter}\n          type=\"search\"\n          onChange={(e: React.SyntheticEvent<HTMLInputElement>) => setFilter(e.currentTarget.value)}\n          onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => e.key === \"Enter\" && addSingleFilterAndClose()}\n        />\n        <select className=\"dark-form-control\"\n                multiple\n                value={selectedUris}\n                onChange={e => setSelectedUris(Array.from(e.currentTarget.selectedOptions).map(o => o.value))}>\n          {filtersFilteredAndSorted.map(filterProperty => (\n            <option key={filterProperty.propertyUri}\n                    value={filterProperty.propertyUri}\n                    onDoubleClick={addFiltersAndClose}>\n              {filterProperty.propertyLabel}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div style={{ textAlign: 'center' }}>\n        <Button color=\"secondary\"\n                style={{ minWidth: '120px', marginTop: '12px' }}\n                onClick={() => props.onClose(null)}>Cancel</Button>\n\n        <Button color=\"primary\"\n                style={{ minWidth: '120px', marginTop: '12px', marginLeft: '40px' }}\n                onClick={addFiltersAndClose}>Add</Button>\n      </div>\n    </Dialog>\n  )\n}","import React, { ReactNode, useEffect, useState } from \"react\"\nimport { DynamicFilterSparQLResults } from \"./util/convertSparQLResultToFilterProperties\"\nimport { FilterValue } from \"./model/FilterValues\"\nimport { ListFilter } from \"./filters/ListFilter\"\nimport { RangeFilter } from \"./filters/RangeFilter\"\nimport { FilterProperty } from \"./model/FilterProperties\"\nimport { useFilterContext } from \"./util/useFilterContext\"\nimport { FilterContext } from \"./util/useFilterContext\"\nimport styles from \"./DynamicFilter.module.css\"\nimport { FilterPublishOptions, sparqlSnippetPublishedFilters } from \"./util/sparqlSnippetPublishedFilters\"\nimport { SearchSelectFilter } from \"./filters/SearchSelectFilter\"\nimport { DateRangeFilter } from \"./filters/DateRangeFilter\"\nimport { AddFilterDialog } from \"./AddFilterDialog\"\nimport { Icon } from \"../Icon\"\nimport { Button } from \"@mui/material\"\nimport AddIcon from \"@mui/icons-material/Add\"\nimport CloseIcon from \"@mui/icons-material/Close\"\nimport { useDialog } from \"../../../hooks/use-dialog\"\n\nexport function DynamicFilter(props: {\n  query: string\n  filtersPublishVariable: string\n  urlPublishVariable: string\n  loading: boolean\n  data?: DynamicFilterSparQLResults\n  publish: (topic: string, value: unknown) => void\n} & Partial<FilterPublishOptions>) {\n  const filterContext = useFilterContext(props.data)\n\n  useEffect(() => {\n    if (!filterContext?.properties) return\n\n    // Workaround, publishing multiple times without setTimeout\n    // seems to cause some Widgets not to update\n    function publishWorkaround(topic: string, value: unknown) {\n      setTimeout(() => props.publish(topic, value))\n    }\n\n    if (props.filtersPublishVariable) {\n      const publishedFilters = sparqlSnippetPublishedFilters(filterContext, {\n        filterLogicalOperation: props.filterLogicalOperation ?? \"AND\"\n      })\n      publishWorkaround(props.filtersPublishVariable, publishedFilters)\n    }\n\n    if (props.urlPublishVariable) {\n      publishWorkaround(props.urlPublishVariable, window.location.href)\n    }\n  }, [ filterContext ])\n\n  if (props.loading || !props?.data?.results?.bindings?.length) {\n    return <div style={{ minWidth: \"100px\" }} />\n  }\n\n  if (!filterContext) {\n    return <div>Error in filter config</div>\n  }\n\n  return (\n    <FilterHolder filterContext={filterContext} />\n  )\n}\n\n\nexport function FilterHolder(props: {\n  filterContext: FilterContext\n}) {\n  const show = useDialog()\n\n  const openAddDialog = async () => {\n    const hiddenProperties = props.filterContext.properties\n      .filter(filterProperty => !props.filterContext.state.visibility.has(filterProperty.propertyUri))\n\n    const uris = await show(AddFilterDialog, {\n      availableProperties: hiddenProperties\n    })\n    if (!uris) return\n    props.filterContext.setFiltersVisibility(uris, true)\n  }\n\n  const clearFilterProperty = (filterProperty: FilterProperty) => {\n    props.filterContext.setFilterValue(filterProperty.propertyUri, null)\n    props.filterContext.setFilterVisibility(filterProperty.propertyUri, false)\n  }\n\n  return (\n    <form className={styles[\"dynamic-filter\"]} onSubmit={preventDefault}>\n      <div className={styles[\"button-bar\"]}>\n        {props.filterContext.hasAddableFilters && (\n          <Button variant=\"contained\"\n                  color=\"grey\"\n                  size=\"small\"\n                  startIcon={<AddIcon />}\n                  onClick={() => openAddDialog()}>\n            Add...\n          </Button>\n        )}\n        <div style={{ flexGrow: 1 }} />\n        <Button type=\"reset\"\n                variant=\"contained\"\n                color=\"grey\"\n                size=\"small\"\n                startIcon={<CloseIcon />}\n                disabled={!props.filterContext.isStateModified}\n                onClick={() => props.filterContext.reset()}>\n          Clear filters\n        </Button>\n      </div>\n\n      {props.filterContext.properties.map(filterProperty => {\n        const isVisible = props.filterContext.state.visibility.has(filterProperty.propertyUri)\n        if (!isVisible) return null\n\n        const filterValue = props.filterContext.state.values[filterProperty.propertyUri]\n\n        const setCurrentFilterValue = (value: FilterValue | null) => {\n          props.filterContext.setFilterValue(filterProperty.propertyUri, value)\n        }\n\n        const commonParams = { filterValue, onChange: setCurrentFilterValue }\n\n        const filterComponent = (() => {\n          switch (filterProperty.type) {\n            case \"search\":\n              return <SearchSelectFilter filterProperty={filterProperty} {...commonParams} />\n            case \"radiobuttons\":\n              return <ListFilter type=\"radiobuttons\" filterProperty={filterProperty} {...commonParams} />\n            case \"checkboxes\":\n              return <ListFilter type=\"checkboxes\" filterProperty={filterProperty} {...commonParams} />\n            case \"range\":\n              return <RangeFilter filterProperty={filterProperty} {...commonParams} />\n            case \"daterange\":\n              return <DateRangeFilter filterProperty={filterProperty} {...commonParams} />\n            default:\n              throw new Error(`Unknown filterProperty type ${JSON.stringify(filterProperty)}`)\n          }\n        })()\n\n        return (\n          <FilterExpandableAndClearable key={filterProperty.propertyUri}\n                                        defaultExpanded={!!filterValue || filterProperty.defaultExpanded}\n                                        label={filterProperty.propertyLabel}\n                                        showClearButton={!filterProperty.defaultVisible}\n                                        onClear={() => clearFilterProperty(filterProperty)}>\n            {filterComponent}\n          </FilterExpandableAndClearable>\n        )\n      })}\n    </form>\n  )\n}\n\nfunction FilterExpandableAndClearable(props: {\n  label: string\n  defaultExpanded: boolean\n  showClearButton: boolean\n  onClear: () => void\n  children: ReactNode\n}) {\n  // Prevent defaultExpanded prop change from true to false triggering a close\n  const [ isOpen, ] = useState(props.defaultExpanded)\n  return (\n    <details className={styles[\"dynamic-filter-expandable\"]} open={isOpen}>\n      <summary>\n        {props.label}\n        {props.showClearButton && (\n          <button type=\"button\"\n                  title=\"Remove filter\"\n                  className={styles[\"clear\"]}\n                  onClick={() => props.onClear()}>\n            <Icon icon=\"times\" />\n          </button>\n        )}\n      </summary>\n      <div className={styles[\"dynamic-filter-body\"]}>\n        {props.children}\n      </div>\n    </details>\n  )\n}\n\nfunction preventDefault(e: React.BaseSyntheticEvent) {\n  e.preventDefault()\n}\n\nexport default DynamicFilter\n","import { FilterContext } from \"./useFilterContext\"\nimport PublishUtils from \"../../../../helpers/PublishUtils\"\n\nexport type FilterPublishOptions = {\n  filterLogicalOperation: \"AND\" | \"OR\"\n}\n\nexport function sparqlSnippetPublishedFilters(filterContext: FilterContext, publishOptions: FilterPublishOptions) {\n  const filtersSparql = Object.entries(filterContext.state.values).map(([ propertyUri, filterValue ], index) => {\n    const filterProperty = filterContext.properties.find(p => p.propertyUri === propertyUri)\n    if (!filterProperty) {\n      throw new Error(`No filter property for ${propertyUri}. This should never happen.`)\n    }\n\n    const propertyUriAsUri = `<${filterProperty.propertyUri}>`\n\n    // It is useful for debugging to use descriptive variables instead of var_0, var_1, etc.\n    const variableName = `filtervar${index}_${formatIdentifier(filterProperty.propertyLabel)}`\n\n    switch (filterValue.type) {\n      case \"single\":\n        const singleValue = filterValue.valueType === \"uri\"\n          ? `<${filterValue.value}>`\n          : `\"${filterValue.value.replace('\"', '\\\"')}\"`\n        return `\n          {\n              ?${filterProperty.sparqlParameter} ${propertyUriAsUri} ${singleValue} .\n          }\n        `\n      case \"multi\":\n        const multiValue = filterValue.valueType === \"uri\"\n          ? PublishUtils.getListAsSingleValue(\"valueuri\", filterValue.values)\n          : PublishUtils.getListAsSingleValue(\"valuestring\", filterValue.values)\n        return `\n          {\n              VALUES (?${variableName}) { ${multiValue} }\n              ?${filterProperty.sparqlParameter} ${propertyUriAsUri} ?${variableName} .\n          }        \n        `\n      case \"range\":\n        return `\n          {\n            ?${filterProperty.sparqlParameter} ${propertyUriAsUri} ?${variableName} .\n              ${isFinite(filterValue.min) ? `FILTER ( xsd:integer(?${variableName}) >= ${filterValue.min} )` : ''}\n              ${isFinite(filterValue.max) ? `FILTER ( xsd:integer(?${variableName}) <= ${filterValue.max} )` : ''}\n          }\n        `\n      case \"daterange\":\n        return `\n          {\n              ?${filterProperty.sparqlParameter} ${propertyUriAsUri} ?${variableName} .\n                ${filterValue.min != null ? `FILTER ( ?${variableName} >= \"${filterValue.min.toISOString()}\"^^xsd:dateTime )` : ''}\n                ${filterValue.max != null ? `FILTER ( ?${variableName} <= \"${filterValue.max.toISOString()}\"^^xsd:dateTime )` : ''}\n          }\n        `\n    }\n  })\n\n  if (filtersSparql.length === 0) {\n    // Workaround, since publishing an empty string will not work.\n    return \" \"\n  }\n\n  if (publishOptions.filterLogicalOperation === \"AND\") {\n    return filtersSparql.join('')\n  } else {\n    return filtersSparql.join('UNION')\n  }\n}\n\n\nfunction formatIdentifier(str: string) {\n  return str\n    .replace(/\\s/g, '_') // Replace spaces by underscores\n    .replace(/[^\\w^_]/g, '') // Remove all special characters\n    .replace(/^\\d+/, '') // Remove leading numbers (if any)\n}\n","import { useReducer } from \"react\"\n\n/**\n * Hook that forces a re-render, similar to `forceUpdate` in class components.\n */\nexport function useForceUpdate(): () => void {\n  // Create a new empty object each update, so that the new state always\n  // has different referential equality than the previous state\n  const [, forceUpdate] = useReducer(() => ({}), {})\n  return forceUpdate\n}\n"],"sourceRoot":""}