{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welkom Welkom bij deze architectuur van de self-service GIS Architectuur van het Kadaster. Middels deze website beschrijven wij: Onze visie over Self-Service GIS naar de toekomst. Hoe onze huidige architectuur hierin voorziet. Wat dit betekent voor onze gebruikers.","title":"Introductie"},{"location":"#welkom","text":"Welkom bij deze architectuur van de self-service GIS Architectuur van het Kadaster. Middels deze website beschrijven wij: Onze visie over Self-Service GIS naar de toekomst. Hoe onze huidige architectuur hierin voorziet. Wat dit betekent voor onze gebruikers.","title":"Welkom"},{"location":"Architecture/","text":"Solution Architecture Uiteindelijk streven wij ernaar onze data zo laagdrempelig en integraal mogelijk beschikbaar te stellen. Dat gaat uiteraard niet vanzelf. In zijn totaliteit onderkennen wij een Solution Architecture voor de totale ontsluiting. Deze zullen we hier toelichten. Architectuur In de essentie begint onze gedachte bij de data. Hierbij doen we doelbewust geen uitspraken over de specifieke databronnen. De aanpak die wij schetsen is generiek en zal moeten werken voor verschillende soorten data en databronnen. Databronnen benaderbaar met SQL, Linked Data en REST (vanuit de bron) noemen we hier expliciet. Op deze typen bronnen hebben wij eerder succesvol linked data ontsloten. Wij ontsluiten deze bronnen middels GraphQL. ( zie ook GraphQL-ETL ) Vanuit deze bronnen maken/hebben wij een Linked Data specifiek model ( zie ook Modelling ) waarheen wij de brondata omzetten. Deze omzetting doen wij met een component wat wij de Enhancer noemen. Het resulterende datamodel representeert vaak een vertaling die dicht op het oorspronkelijke datamodel van de bron ligt en is derhalve herkenbaar voor de dataset-eigenaar. Deze resulterende LD \u2013 registraties zijn vaak moeilijk te gebruiken zonder domeinkennis van de specifieke bron en diens datamodel. ( zie ook Linked Data ). Om die reden zetten we de data om naar \u00e9\u00e9n of meerdere views (datamodellen) wat dichter bij de wens van de gebruiker zitten. Dit is zichtbaar in de gele laag. ( zie ook Knowledge Graph ). Uiteindelijk bieden we op basis van standaard services (bijv. REST / ElasticSearch / SPARQL / GraphQL) verschillende stopcontacten waar een gebruiker middels zijn applicatie op kan aansluiten. Hierbij interpreteren we een applicatie als een breed begrip. Zo is de metadata bijvoorbeeld ook gemakkelijk vindbaar voor een zoekmachine als Google. ( zie ook Gebruik ). Kernprincipes Om tot deze solution architecture te komen zijn een aantal kernprincipes van belang die relevant zijn geweest in de totstandkoming. Deze principes zijn: Data komt zo dicht mogelijk bij de bron weg. Enkel noodzakelijke kopie\u00ebn worden gebruikt. Data lineage is van essentieel belang. Het moet bij alle data herkenbaar zijn waar deze zijn oorsprong vindt. De Data Governance is duidelijk. Ieder tussenproduct van de data heeft een duidelijke eigenaar. Tussenproducten in de architectuur dienen allemaal een doel . Data wordt niet onnodig ontsloten. Data is rijk aan metadata en semantiek . Dit is onderdeel van de data die wij ontsluiten.","title":"Overzicht"},{"location":"Architecture/#solution-architecture","text":"Uiteindelijk streven wij ernaar onze data zo laagdrempelig en integraal mogelijk beschikbaar te stellen. Dat gaat uiteraard niet vanzelf. In zijn totaliteit onderkennen wij een Solution Architecture voor de totale ontsluiting. Deze zullen we hier toelichten.","title":"Solution Architecture"},{"location":"Architecture/#architectuur","text":"In de essentie begint onze gedachte bij de data. Hierbij doen we doelbewust geen uitspraken over de specifieke databronnen. De aanpak die wij schetsen is generiek en zal moeten werken voor verschillende soorten data en databronnen. Databronnen benaderbaar met SQL, Linked Data en REST (vanuit de bron) noemen we hier expliciet. Op deze typen bronnen hebben wij eerder succesvol linked data ontsloten. Wij ontsluiten deze bronnen middels GraphQL. ( zie ook GraphQL-ETL ) Vanuit deze bronnen maken/hebben wij een Linked Data specifiek model ( zie ook Modelling ) waarheen wij de brondata omzetten. Deze omzetting doen wij met een component wat wij de Enhancer noemen. Het resulterende datamodel representeert vaak een vertaling die dicht op het oorspronkelijke datamodel van de bron ligt en is derhalve herkenbaar voor de dataset-eigenaar. Deze resulterende LD \u2013 registraties zijn vaak moeilijk te gebruiken zonder domeinkennis van de specifieke bron en diens datamodel. ( zie ook Linked Data ). Om die reden zetten we de data om naar \u00e9\u00e9n of meerdere views (datamodellen) wat dichter bij de wens van de gebruiker zitten. Dit is zichtbaar in de gele laag. ( zie ook Knowledge Graph ). Uiteindelijk bieden we op basis van standaard services (bijv. REST / ElasticSearch / SPARQL / GraphQL) verschillende stopcontacten waar een gebruiker middels zijn applicatie op kan aansluiten. Hierbij interpreteren we een applicatie als een breed begrip. Zo is de metadata bijvoorbeeld ook gemakkelijk vindbaar voor een zoekmachine als Google. ( zie ook Gebruik ).","title":"Architectuur"},{"location":"Architecture/#kernprincipes","text":"Om tot deze solution architecture te komen zijn een aantal kernprincipes van belang die relevant zijn geweest in de totstandkoming. Deze principes zijn: Data komt zo dicht mogelijk bij de bron weg. Enkel noodzakelijke kopie\u00ebn worden gebruikt. Data lineage is van essentieel belang. Het moet bij alle data herkenbaar zijn waar deze zijn oorsprong vindt. De Data Governance is duidelijk. Ieder tussenproduct van de data heeft een duidelijke eigenaar. Tussenproducten in de architectuur dienen allemaal een doel . Data wordt niet onnodig ontsloten. Data is rijk aan metadata en semantiek . Dit is onderdeel van de data die wij ontsluiten.","title":"Kernprincipes"},{"location":"Brondata/","text":"Brondata Zowel bij het Kadaster als bij veel ontwikkelingen om ons heen (Denk aan Common Ground en DiS-Geo ) erkennen we dat het belangrijk is dat we Data bij de bron als belangrijk uitgangspunt hanteren. Maar wat betekent dat? Data bij de bron Data wordt zo dicht mogelijk uit de bron beschikbaar gesteld. Er zijn geen onnodige kopi\u00eben De actualiteit van data is hierdoor (near) real-time. Het gebruik van de bron is in discussies vaak ambivalent. Immers, de bron kan betekenen: Data rechtstreeks bij de absolute bron (bijvoorbeeld voor de BAG het gemeentelijke systeem waar deze wordt ingevoerd). Data rechtstreeks bij de Landelijke Voorziening. Data in een centrale informatie voorziening welke verantwoordelijk is voor de levering van data (zoals Datahub, PDOK). Hierbij concluderen wij dat optie (3) op de korte termijn het meest voor de hand ligt, zodat er middels \u00e9\u00e9n voorziening met zeer hoge actualiteit en lage kosten services kunnen worden gecreeerd die dataset-onafhankelijk zijn. Wel zien we mogelijkheden dit in sommige gevallen te combineren met de situatie omschreven in (2), waarbij we data niet eerst kopi\u00ebren naar de centrale informatievoorziening. We beproven dit concreet in onze ontsluiting van de BRT. Voor de (vaak gedecentraliseerde) situatie beschreven in (1) zien wij vooral op de middellange termijn mogelijkheden. Denk aan ontwikkelingen rondom Blockchain en het Protocol-denken zoals toegepast in de Rijksinnovatie SensRNet . Huidige situatie We zien dat bij verschillende services (zowel binnen- als buiten het Kadaster) verschillende actualiteitsniveaus en afstanden tot de bron leven. Soms leven er nog kopi\u00eben tussen de bron en het uiteindelijke ontsluitingskanaal. We kennen momenteel een aantal bronnen voor onze Linked Data en GraphQL leveringen (Self-Service GIS ontsluitingskanalen, zie ook Gebruik ). Rechtstreeks op de LV Voor de ontsluiting van de BRT als Linked Data geldt dat wij momenteel rechtstreeks aansluiten op de LV database. Dat betekent dat GraphQL rechtstreeks aangeboden kan worden op deze bron en dat Linked Data vanuit deze bron wordt gegenereerd op basis van een nieuwe release (voor de BRT is dit 5 keer per jaar). PDOK Voor de ontsluiting van de BGT als Linked Data geldt dat wij momenteel aansluiten op de download levering van de BGT. Deze verversen wij ieder kwartaal. Dit betekent dat wij:\" De data kwartaallijks downloaden als GML. Deze GML uitpakken en importeren in een Postgres (kopie) database. GraphQL als levering aansluiten op deze kopie database. Vanuit deze download de data transformeren naar Linked Data. Het resultaat is dat zowel de GraphQL als Linked Data in het slechtste geval een kwartaal achter lopen qua actualiteit. Note: Het is aannemelijk dat PDOK ook in de toekomst een belangrijke rol blijft spelen als GEO-platform voor al onze GIS gebruikers. De actualiteit van PDOK kan - afhankelijk van de bron - ook goed aansluiten bij die van de bron. Github leveringen Voor de BAG geldt dat zij een maandelijkse download beschikbaar stellen van de BAG 2.0 dataset (in GML formaat). Voor dit type bron (download leveringen GML via Github) geldt hetzelfde als voor bovengenoemde PDOK GML levering. Datahub In de nabije toekomst zien wij steeds meer bronnen die ontsloten gaan worden bij de Datahub binnen het Kadaster. De datahub dient als centrale voorziening waarvandaan verschillende services / pipelines kunnen worden voorzien van data. Zo ook de analyse trein waarmee wij de gebruikers van het Self-Service Analyse platform van data gaan voorzien. Dit betekent ook dat de Datahub voor ons geldt als de bron voor Kadastrale datasets . Uiteraard betekent dit ook dat de datahub aan een aantal uitgangspunten moet voldoen: De data in de Datahub is (near)real-time actueel. De data in de Datahub komt qua structuur overeen met de brondatabase; Er vinden geen ondoorzichte transformaties plaats. Er zijn geen additionele kopi\u00eben tussen de brondatabase en de datahub. Streaming API E\u00e9n van de services die de Datahub vermoedelijk gaat leveren is een streaming API waarmee zowel pull als subscription based bevragingen mogelijk zijn. Hiermee zullen zowel bulk bevragingen als simpele(re) lookup bevragingen mogelijk zijn. Aansluiting op de Datahub Binnen het huidige project (OBDO Integraal Bevragen) willen we aansluiten op de datahub voor in ieder geval de BAG levering. Op deze manier sluiten we met GraphQL aan op de datahub, mogelijk over de GRPC levering. Van een GraphQL levering op deze datahub kan meteen gebruik gemaakt worden . Middels een GraphQL levering maken wij vervolgens Linked Data . Vanuit deze Linked Data registratieve levering cree\u00ebren we vervolgens de Knowledge Graph .","title":"Brondata"},{"location":"Brondata/#brondata","text":"Zowel bij het Kadaster als bij veel ontwikkelingen om ons heen (Denk aan Common Ground en DiS-Geo ) erkennen we dat het belangrijk is dat we Data bij de bron als belangrijk uitgangspunt hanteren. Maar wat betekent dat?","title":"Brondata"},{"location":"Brondata/#data-bij-de-bron","text":"Data wordt zo dicht mogelijk uit de bron beschikbaar gesteld. Er zijn geen onnodige kopi\u00eben De actualiteit van data is hierdoor (near) real-time. Het gebruik van de bron is in discussies vaak ambivalent. Immers, de bron kan betekenen: Data rechtstreeks bij de absolute bron (bijvoorbeeld voor de BAG het gemeentelijke systeem waar deze wordt ingevoerd). Data rechtstreeks bij de Landelijke Voorziening. Data in een centrale informatie voorziening welke verantwoordelijk is voor de levering van data (zoals Datahub, PDOK). Hierbij concluderen wij dat optie (3) op de korte termijn het meest voor de hand ligt, zodat er middels \u00e9\u00e9n voorziening met zeer hoge actualiteit en lage kosten services kunnen worden gecreeerd die dataset-onafhankelijk zijn. Wel zien we mogelijkheden dit in sommige gevallen te combineren met de situatie omschreven in (2), waarbij we data niet eerst kopi\u00ebren naar de centrale informatievoorziening. We beproven dit concreet in onze ontsluiting van de BRT. Voor de (vaak gedecentraliseerde) situatie beschreven in (1) zien wij vooral op de middellange termijn mogelijkheden. Denk aan ontwikkelingen rondom Blockchain en het Protocol-denken zoals toegepast in de Rijksinnovatie SensRNet .","title":"Data bij de bron"},{"location":"Brondata/#huidige-situatie","text":"We zien dat bij verschillende services (zowel binnen- als buiten het Kadaster) verschillende actualiteitsniveaus en afstanden tot de bron leven. Soms leven er nog kopi\u00eben tussen de bron en het uiteindelijke ontsluitingskanaal. We kennen momenteel een aantal bronnen voor onze Linked Data en GraphQL leveringen (Self-Service GIS ontsluitingskanalen, zie ook Gebruik ).","title":"Huidige situatie"},{"location":"Brondata/#rechtstreeks-op-de-lv","text":"Voor de ontsluiting van de BRT als Linked Data geldt dat wij momenteel rechtstreeks aansluiten op de LV database. Dat betekent dat GraphQL rechtstreeks aangeboden kan worden op deze bron en dat Linked Data vanuit deze bron wordt gegenereerd op basis van een nieuwe release (voor de BRT is dit 5 keer per jaar).","title":"Rechtstreeks op de LV"},{"location":"Brondata/#pdok","text":"Voor de ontsluiting van de BGT als Linked Data geldt dat wij momenteel aansluiten op de download levering van de BGT. Deze verversen wij ieder kwartaal. Dit betekent dat wij:\" De data kwartaallijks downloaden als GML. Deze GML uitpakken en importeren in een Postgres (kopie) database. GraphQL als levering aansluiten op deze kopie database. Vanuit deze download de data transformeren naar Linked Data. Het resultaat is dat zowel de GraphQL als Linked Data in het slechtste geval een kwartaal achter lopen qua actualiteit. Note: Het is aannemelijk dat PDOK ook in de toekomst een belangrijke rol blijft spelen als GEO-platform voor al onze GIS gebruikers. De actualiteit van PDOK kan - afhankelijk van de bron - ook goed aansluiten bij die van de bron.","title":"PDOK"},{"location":"Brondata/#github-leveringen","text":"Voor de BAG geldt dat zij een maandelijkse download beschikbaar stellen van de BAG 2.0 dataset (in GML formaat). Voor dit type bron (download leveringen GML via Github) geldt hetzelfde als voor bovengenoemde PDOK GML levering.","title":"Github leveringen"},{"location":"Brondata/#datahub","text":"In de nabije toekomst zien wij steeds meer bronnen die ontsloten gaan worden bij de Datahub binnen het Kadaster. De datahub dient als centrale voorziening waarvandaan verschillende services / pipelines kunnen worden voorzien van data. Zo ook de analyse trein waarmee wij de gebruikers van het Self-Service Analyse platform van data gaan voorzien. Dit betekent ook dat de Datahub voor ons geldt als de bron voor Kadastrale datasets . Uiteraard betekent dit ook dat de datahub aan een aantal uitgangspunten moet voldoen: De data in de Datahub is (near)real-time actueel. De data in de Datahub komt qua structuur overeen met de brondatabase; Er vinden geen ondoorzichte transformaties plaats. Er zijn geen additionele kopi\u00eben tussen de brondatabase en de datahub.","title":"Datahub"},{"location":"Brondata/#streaming-api","text":"E\u00e9n van de services die de Datahub vermoedelijk gaat leveren is een streaming API waarmee zowel pull als subscription based bevragingen mogelijk zijn. Hiermee zullen zowel bulk bevragingen als simpele(re) lookup bevragingen mogelijk zijn.","title":"Streaming API"},{"location":"Brondata/#aansluiting-op-de-datahub","text":"Binnen het huidige project (OBDO Integraal Bevragen) willen we aansluiten op de datahub voor in ieder geval de BAG levering. Op deze manier sluiten we met GraphQL aan op de datahub, mogelijk over de GRPC levering. Van een GraphQL levering op deze datahub kan meteen gebruik gemaakt worden . Middels een GraphQL levering maken wij vervolgens Linked Data . Vanuit deze Linked Data registratieve levering cree\u00ebren we vervolgens de Knowledge Graph .","title":"Aansluiting op de Datahub"},{"location":"Enhancer/","text":"GraphQL naar Linked Data: De Enhancer In de sectie omtrent GraphQL beschrijven wij reeds hoe we GraphQL kunnen gebruiken om data te leveren in een JSON (JavaScript Object Notation) formaat. Wij gebruiken dit - naast een ontsluitingskanaal richting de eindgebruiker - ook als mogelijkheid om Linked Data te genereren. JSON-LD In de omzetting van JSON naar Linked Data maken wij veel gebruik van de open standaard JSON-LD , zoals gestandaardiseerd door het W3C . JSON-LD - in zijn essentie - biedt de mogelijkheid om van JSON data lichtgewicht Linked Data te genereren. Deze documentatie is gebaseerd op JSON-LD 1.1 , zoals beheerd door de W3C. Enhancer Het Data Science Team heeft een component ontwikkeld dat op basis van een GraphQL endpoint in staat is JSON-LD te bevragen. De enhancer neemt de volgende configuratie: JSON-LD Context Een GraphQL endpoint Vervolgens dient de Enhancer als een additioneel endpoint waar op basis van een accept header data data wordt teruggeven in een bepaald formaat: application/n-quads application/ld+json Vervolgens zijn er twee manieren om de enhancer aan te spreken: Bevragen obv een query Het enhancer endpoint kan benaderd worden met een POST request met in de body een GraphQL query, zoals { \"query\" : \"{ bag2nummeraanduiding(first:10 ) { jsonldid jsonldtype objecteindtijd objectbegintijd tijdstipregistratie eindregistratie tijdstipregistratielv tijdstipeindregistratielv primaryTopic { jsonldid jsonldtype identificatie { jsonldid jsonldtype }} inonderzoek geconstateerd documentnummer documentdatum aanduidingrecordinactief aanduidingrecordcorrectie huisnummer huisletter huisnummertoevoeging postcode nummeraanduidingstatus ligtin ligtaan }}\" } en de headers { \"content-type\" : \"application/json\" , \"accept\" : \"application/ld+json\" } Het reusltaat van deze bevraging is een JSON-LD respons van de desbetreffende GraphQL query. Bevragen obv voorgedefini\u00eberde queries Voor het omzetten van de GraphQL levering naar Linked Data bereiden we vaak voorgedefini\u00eberde queries voor in de enhancer, waarmee op basis van (paginatie) parameters een set aan objecten opgevraagd kan worden. Dit is bijvoorbeeld bruikbaar in een full load van een dataset als Linked Data. Het configureren van deze voorgedefini\u00eberde queries werkt momenteel door in de Enhancer een graphql query toe te voegen onder de directory /query. Zie bijvoorbeeld de query /bag/pand.graphql. { \"query\" : \"{ bag2pand(#filter#) { jsonldid jsonldtype jsonldbase jsonldvocab jsonldlabel voorkomenidentificatie begingeldigheid eindgeldigheid tijdstipregistratie eindregistratie tijdstipregistratielv tijdstipeindregistratielv primaryTopic { jsonldid jsonldtype identificatie { jsonldid jsonldtype namespace lokaalid } } geometrie geconstateerd documentnummer documentdatum oorspronkelijkbouwjaar pandstatus vorigeGeldigeVersie vorigeGeregistreerdeVersie } } \" } Tip voor de developer: Gebruik deze website om een GraphQL query te verlossen van newlines. Vervolgens kan de data bevraagd worden met een request naar http://enhancer-endpoint/bag/pand/0/1000 waarbij de laatste twee (paginatie) parameters zijn die gedefini\u00eberd zijn in de enhancer. Door gebruik te maken van deze parameters kan over de gehele set aan objecten worden gelopen. JSON-LD Context Een voorbeeld van een (ingekorte) JSON-LD Context (van de BAG) is hieronder te vinden: { \"@context\" : { \"@base\" : \"https://bag2.basisregistraties.overheid.nl/bag/id/registratie/\" , \"@version\" : 1.1 , \"@vocab\" : \"https://bag2.basisregistraties.overheid.nl/bag/def/\" , \"adresseerbaarobjectstatus\" : { \"@context\" : { \"@base\" : \"https://bag2.basisregistraties.overheid.nl/bag/id/status/\" }, \"@id\" : \"status\" , \"@type\" : \"@id\" }, \"begingeldigheid\" : { \"@id\" : \"nen3610:beginGeldigheid\" , \"@type\" : \"xsd:date\" }, \"bronhouder\" : { \"@context\" : { \"@base\" : \"https://bag2.basisregistraties.overheid.nl/bag/id/bronhouder/\" }, \"@type\" : \"@id\" }, \"data\" : \"@nest\" , \"dct\" : \"http://purl.org/dc/terms/\" , \"documentdatum\" : { \"@id\" : \"dct:created\" , \"@type\" : \"xsd:date\" }, \"documentnummer\" : { \"@id\" : \"dct:identifier\" }, \"eindgeldigheid\" : { \"@id\" : \"nen3610:eindGeldigheid\" , \"@type\" : \"xsd:date\" }, \"eindregistratie\" : { \"@id\" : \"eindRegistratie\" , \"@type\" : \"xsd:dateTime\" } } waarbij keys in de JSON-LD context verwijzen naar attributen en/of objecten in de GraphQL typedefs (bijv. documentnummer, eindgeldigheid, etc.). Op deze manier weet de Enhancer hoe deze attributen om te zetten zijn naar een Linked data formaat (zoals nquads). Linked Data In de pipeline van het omzetten van een GraphQL levering hebben we een manier nodig om (in batch) over de totale set aan objecten cq. voorkomens heen te lopen. We gebruiken de volgende header: { \"accept\" : \"application/n-quads\" } en lopen over de gehele set heen die we willen bevragen middels de voorgedefinieerde queries. Deze batch bevragingen worden aangeroepen vanuit een minimaal stuk code wat wij tot voorheen de microservice noemden. Dit proces wordt verder toegelicht in de documentatie rondom onze ETL Pipeline .","title":"GraphQL naar Linked Data"},{"location":"Enhancer/#graphql-naar-linked-data-de-enhancer","text":"In de sectie omtrent GraphQL beschrijven wij reeds hoe we GraphQL kunnen gebruiken om data te leveren in een JSON (JavaScript Object Notation) formaat. Wij gebruiken dit - naast een ontsluitingskanaal richting de eindgebruiker - ook als mogelijkheid om Linked Data te genereren.","title":"GraphQL naar Linked Data: De Enhancer"},{"location":"Enhancer/#json-ld","text":"In de omzetting van JSON naar Linked Data maken wij veel gebruik van de open standaard JSON-LD , zoals gestandaardiseerd door het W3C . JSON-LD - in zijn essentie - biedt de mogelijkheid om van JSON data lichtgewicht Linked Data te genereren. Deze documentatie is gebaseerd op JSON-LD 1.1 , zoals beheerd door de W3C.","title":"JSON-LD"},{"location":"Enhancer/#enhancer","text":"Het Data Science Team heeft een component ontwikkeld dat op basis van een GraphQL endpoint in staat is JSON-LD te bevragen. De enhancer neemt de volgende configuratie: JSON-LD Context Een GraphQL endpoint Vervolgens dient de Enhancer als een additioneel endpoint waar op basis van een accept header data data wordt teruggeven in een bepaald formaat: application/n-quads application/ld+json Vervolgens zijn er twee manieren om de enhancer aan te spreken:","title":"Enhancer"},{"location":"Enhancer/#bevragen-obv-een-query","text":"Het enhancer endpoint kan benaderd worden met een POST request met in de body een GraphQL query, zoals { \"query\" : \"{ bag2nummeraanduiding(first:10 ) { jsonldid jsonldtype objecteindtijd objectbegintijd tijdstipregistratie eindregistratie tijdstipregistratielv tijdstipeindregistratielv primaryTopic { jsonldid jsonldtype identificatie { jsonldid jsonldtype }} inonderzoek geconstateerd documentnummer documentdatum aanduidingrecordinactief aanduidingrecordcorrectie huisnummer huisletter huisnummertoevoeging postcode nummeraanduidingstatus ligtin ligtaan }}\" } en de headers { \"content-type\" : \"application/json\" , \"accept\" : \"application/ld+json\" } Het reusltaat van deze bevraging is een JSON-LD respons van de desbetreffende GraphQL query.","title":"Bevragen obv een query"},{"location":"Enhancer/#bevragen-obv-voorgedefinieerde-queries","text":"Voor het omzetten van de GraphQL levering naar Linked Data bereiden we vaak voorgedefini\u00eberde queries voor in de enhancer, waarmee op basis van (paginatie) parameters een set aan objecten opgevraagd kan worden. Dit is bijvoorbeeld bruikbaar in een full load van een dataset als Linked Data. Het configureren van deze voorgedefini\u00eberde queries werkt momenteel door in de Enhancer een graphql query toe te voegen onder de directory /query. Zie bijvoorbeeld de query /bag/pand.graphql. { \"query\" : \"{ bag2pand(#filter#) { jsonldid jsonldtype jsonldbase jsonldvocab jsonldlabel voorkomenidentificatie begingeldigheid eindgeldigheid tijdstipregistratie eindregistratie tijdstipregistratielv tijdstipeindregistratielv primaryTopic { jsonldid jsonldtype identificatie { jsonldid jsonldtype namespace lokaalid } } geometrie geconstateerd documentnummer documentdatum oorspronkelijkbouwjaar pandstatus vorigeGeldigeVersie vorigeGeregistreerdeVersie } } \" } Tip voor de developer: Gebruik deze website om een GraphQL query te verlossen van newlines. Vervolgens kan de data bevraagd worden met een request naar http://enhancer-endpoint/bag/pand/0/1000 waarbij de laatste twee (paginatie) parameters zijn die gedefini\u00eberd zijn in de enhancer. Door gebruik te maken van deze parameters kan over de gehele set aan objecten worden gelopen.","title":"Bevragen obv voorgedefini\u00eberde queries"},{"location":"Enhancer/#json-ld-context","text":"Een voorbeeld van een (ingekorte) JSON-LD Context (van de BAG) is hieronder te vinden: { \"@context\" : { \"@base\" : \"https://bag2.basisregistraties.overheid.nl/bag/id/registratie/\" , \"@version\" : 1.1 , \"@vocab\" : \"https://bag2.basisregistraties.overheid.nl/bag/def/\" , \"adresseerbaarobjectstatus\" : { \"@context\" : { \"@base\" : \"https://bag2.basisregistraties.overheid.nl/bag/id/status/\" }, \"@id\" : \"status\" , \"@type\" : \"@id\" }, \"begingeldigheid\" : { \"@id\" : \"nen3610:beginGeldigheid\" , \"@type\" : \"xsd:date\" }, \"bronhouder\" : { \"@context\" : { \"@base\" : \"https://bag2.basisregistraties.overheid.nl/bag/id/bronhouder/\" }, \"@type\" : \"@id\" }, \"data\" : \"@nest\" , \"dct\" : \"http://purl.org/dc/terms/\" , \"documentdatum\" : { \"@id\" : \"dct:created\" , \"@type\" : \"xsd:date\" }, \"documentnummer\" : { \"@id\" : \"dct:identifier\" }, \"eindgeldigheid\" : { \"@id\" : \"nen3610:eindGeldigheid\" , \"@type\" : \"xsd:date\" }, \"eindregistratie\" : { \"@id\" : \"eindRegistratie\" , \"@type\" : \"xsd:dateTime\" } } waarbij keys in de JSON-LD context verwijzen naar attributen en/of objecten in de GraphQL typedefs (bijv. documentnummer, eindgeldigheid, etc.). Op deze manier weet de Enhancer hoe deze attributen om te zetten zijn naar een Linked data formaat (zoals nquads).","title":"JSON-LD Context"},{"location":"Enhancer/#linked-data","text":"In de pipeline van het omzetten van een GraphQL levering hebben we een manier nodig om (in batch) over de totale set aan objecten cq. voorkomens heen te lopen. We gebruiken de volgende header: { \"accept\" : \"application/n-quads\" } en lopen over de gehele set heen die we willen bevragen middels de voorgedefinieerde queries. Deze batch bevragingen worden aangeroepen vanuit een minimaal stuk code wat wij tot voorheen de microservice noemden. Dit proces wordt verder toegelicht in de documentatie rondom onze ETL Pipeline .","title":"Linked Data"},{"location":"Gebruik/","text":"Gebruik van ons platform Ons platform is op meerdere manieren te gebruiken. Afhankelijk van de soort gebruiker bieden we verschillende aanspreekpunten aan. De huidige aanspreekpunten zijn via GraphQL, SPARQL of een voorontwikkelde oplossing via REST. Afhankelijk van de eisen van de gebruiker en de brondata zijn er verschillende endpoints beschikbaar. Bijvoorbeeld eindpoints met gesloten data (meer authorisatie vereist) of enkelvoudige endpoints (een enkele bron). Voor gekoppelde en geintegreerde data (en ook enkelvoudige brondata) kunnen de overkoepelende knowledge graph endpoints worden gebruikt.","title":"Overzicht"},{"location":"Gebruik/#gebruik-van-ons-platform","text":"Ons platform is op meerdere manieren te gebruiken. Afhankelijk van de soort gebruiker bieden we verschillende aanspreekpunten aan. De huidige aanspreekpunten zijn via GraphQL, SPARQL of een voorontwikkelde oplossing via REST. Afhankelijk van de eisen van de gebruiker en de brondata zijn er verschillende endpoints beschikbaar. Bijvoorbeeld eindpoints met gesloten data (meer authorisatie vereist) of enkelvoudige endpoints (een enkele bron). Voor gekoppelde en geintegreerde data (en ook enkelvoudige brondata) kunnen de overkoepelende knowledge graph endpoints worden gebruikt.","title":"Gebruik van ons platform"},{"location":"GraphQL/","text":"Alle individuele openbare bronnen en de gecombineerde knowledge graphs zijn bereikbaar via GraphQL. Ieder endpoint is geconfigureerd met een playground waar exploratie mogelijk is. GraphQL verkennen De databronnen die openbaar beschikbaar zijn bieden wij aan op het GraphQL knowledge graph endpoint op onze website: https://labs.kadaster.nl/gateway Voor onze technische implementatie van GraphQL ( zie onze architectuurpagina ) Voorbeelden van queries staan in de playground beschikbaar. Op dit endpoint kunnen gebruikers aansluiten en applicaties ontwikkelen voor de openbaar beschikbare bronnen. Er is verder geen configuratie voor toegang vereist. Let wel dat gebruik op het endpoint gemonitord wordt en dat queries die te complex zijn niet worden uitgevoerd. Ook langlopende queries worden afgebroken. GraphQL via REST In applicaties is de GraphQL playground natuurlijk niet geschikt. Hiervoor kan een verzoek gedaan worden met een REST request. Hiervoor dient dezelfde URL te worden gehanteerd: https://labs.kadaster.nl/gateway Het is mogelijk om POST requests uit te voeren met in de 'body' een graphql query. Op deze manier is ook mogelijk om te communiceren met het endpoint via applicatie interfaces. Gebruik van gesloten data Indien er gebruik wordt gemaakt van gesloten (niet openbare) data dient er een ander endpoint te worden gebruikt. Dit endpoint bevind zich binnen de perken van het Kadaster netwerk. Voor gebruik dit endpoint is verdere toestemming en configuratie nodig. Het endpoint bevindt zich in het beveiligde deel van het Kadaster netwerk. De werking van de GraphQL service blijft hetzelfde behalve de (mogelijke) toevoeging van een (nog te besluiten) identificatie middel. Opties hiervoor zijn: JWT (JSON web token) Authorisation in de Header De configuratie die vereist is voor de toegang tot het endpoint is tweezijdig TLS. Dit stelt de diensten die wij aanbieden in staat om de gebruikers te identificeren. De verbinding is alleen mogelijk als de gebruiker zich identificeert via een certificaat. Voor configuratie, neem contact op met de toegangsdienst van het Kadaster.","title":"GraphQL"},{"location":"GraphQL/#graphql-verkennen","text":"De databronnen die openbaar beschikbaar zijn bieden wij aan op het GraphQL knowledge graph endpoint op onze website: https://labs.kadaster.nl/gateway Voor onze technische implementatie van GraphQL ( zie onze architectuurpagina ) Voorbeelden van queries staan in de playground beschikbaar. Op dit endpoint kunnen gebruikers aansluiten en applicaties ontwikkelen voor de openbaar beschikbare bronnen. Er is verder geen configuratie voor toegang vereist. Let wel dat gebruik op het endpoint gemonitord wordt en dat queries die te complex zijn niet worden uitgevoerd. Ook langlopende queries worden afgebroken.","title":"GraphQL verkennen"},{"location":"GraphQL/#graphql-via-rest","text":"In applicaties is de GraphQL playground natuurlijk niet geschikt. Hiervoor kan een verzoek gedaan worden met een REST request. Hiervoor dient dezelfde URL te worden gehanteerd: https://labs.kadaster.nl/gateway Het is mogelijk om POST requests uit te voeren met in de 'body' een graphql query. Op deze manier is ook mogelijk om te communiceren met het endpoint via applicatie interfaces.","title":"GraphQL via REST"},{"location":"GraphQL/#gebruik-van-gesloten-data","text":"Indien er gebruik wordt gemaakt van gesloten (niet openbare) data dient er een ander endpoint te worden gebruikt. Dit endpoint bevind zich binnen de perken van het Kadaster netwerk. Voor gebruik dit endpoint is verdere toestemming en configuratie nodig. Het endpoint bevindt zich in het beveiligde deel van het Kadaster netwerk. De werking van de GraphQL service blijft hetzelfde behalve de (mogelijke) toevoeging van een (nog te besluiten) identificatie middel. Opties hiervoor zijn: JWT (JSON web token) Authorisation in de Header De configuratie die vereist is voor de toegang tot het endpoint is tweezijdig TLS. Dit stelt de diensten die wij aanbieden in staat om de gebruikers te identificeren. De verbinding is alleen mogelijk als de gebruiker zich identificeert via een certificaat. Voor configuratie, neem contact op met de toegangsdienst van het Kadaster.","title":"Gebruik van gesloten data"},{"location":"GraphQLETL/","text":"Ontsluiting middels GraphQL GraphQL is een open-source framework oorspronkelijk ontwerpen door Facebook en tegenwoordig onderhouden door de GraphQL foundation. GraphQL is - vanuit hun eigen woorden - een querytaal voor APIs. Het combineert de gedachte van graafmodellering van je data en laagdrempelige ontsluiting via een developer-friendly API interface. Voordelen en doel van GraphQL Met GraphQL ondervangen we een aantal vaak gestelde tekortkomingen van de services die we op onze basisregistraties leveren. Levering van data is vraaggestuurd in plaats van aanbodgestuurd . We geven de gebruiker de kans om precies die data te bevragen die hij/zij nodig heeft. We maken bevragen op basis van objecten mogelijk. Verschillende datasets met een administratieve connectie kunnen integraal bevraagd worden. Voor ons heeft GraphQL echter twee belangrijke doelen: GraphQL is een krachtig paradigme om data integraal en laagdrempelig richting onze afnemers beschikbaar te stelen \u00e9n GraphQL dient als abstractielaag op de bron, om hiermee onze Extract- Transform & Load (ETL) van Linked Data uit te voeren. In dit document bespreken we nadrukkelijk dit eerste. Voor het tweede punt verwijzen we de ge\u00efnteresseerde lezer door naar de sectie over GraphQL in gebruik . GraphQL op een silo Verschillende GraphQL endpoints - naar de buitenwereld toe geidentificeerd door hun typedefs en resolvers - bevinden zich op een databron, zijnde (op dit moment) Linked Data, SQL en/of REST. Een GraphQL endpoint is dus back-end agnostisch. Typedefs Zoals eerder gesteld modelleren we middels GraphQL onze data als een graaf, met verschillende nodes (objecten) en edges (relaties). Deze modellering vinden we terug in de typedefs van ons GraphQL endpoint. Neem als voorbeeld het object Pand in de BAG. De corresponderende typedefs ziet er als volgt uit: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \"\"\"Een pand is de kleinste bij de totstandkoming functioneel en bouwkundig-constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is\"\"\" type BAG2Pand implements JSONLD @ key ( fields : \"lokaalid peilDatum\" ) { \"\"\"De identificatiecodes voor objecten zijn uniek binnen de context van deze naamgevingsruimte. Correspondeerd met de [NEN3610 standaard](https://geonovum.github.io/NEN3610-Linkeddata/#nen3610id)\"\"\" namespace : String ! \"\"\"Een aanduiding waarmee kan worden aangegeven dat een pand in de registratie is opgenomen als gevolg van een feitelijke constatering, zonder dat er op het moment van opname sprake was van een regulier brondocument voor deze opname. Zie ook [de BAG catalogus](https://imbag.github.io/catalogus/hoofdstukken/attributen--relaties#745-geconstateerd) \"\"\" geconstateerd : Boolean \"\"\"BAG registraties bevatten een voorkomen identificatie, waarmee de volgorde wordt aangegeven waarmee registraties voor hetzelfde object zijn aangemaakt.\"\"\" voorkomenidentificatie : Int \"\"\"Wordt gebruikt om de formele historie voor de bronhouder mee aan de duiden. Deze attribuut beschrijft wanneer het voorkomen is ontstaan bij de bronhouder. Zie ook [deze praktijkhandleiding](https://imbag.github.io/praktijkhandleiding/artikelen/hoe-bepaal-ik-welke-gegevens-in-een-levenscyclus-van-een-object-geldig-zijn)\"\"\" tijdstipregistratie : DateTime \"\"\"Wordt gebruikt om de formele historie voor de bronhouder mee aan de duiden. Deze attribuut beschrijft wanneer het voorkomen is afgesloten bij de bronhouder. Zie ook [deze praktijkhandleiding](https://imbag.github.io/praktijkhandleiding/artikelen/hoe-bepaal-ik-welke-gegevens-in-een-levenscyclus-van-een-object-geldig-zijn)\"\"\" eindregistratie : DateTime \"\"\"Wordt gebruikt om de materi\u00eble historie voor de bronhouder mee aan de duiden .De materi\u00eble historie beschrijft vanaf welke datum een voorkomen geldig is in de registratie, via het attribuut begingeldigheid. Deze datum kan in de toekomst liggen. Zie ook [deze praktijkhandleiding](https://imbag.github.io/praktijkhandleiding/artikelen/hoe-bepaal-ik-welke-gegevens-in-een-levenscyclus-van-een-object-geldig-zijn)\"\"\" begingeldigheid : Date \"\"\"Wordt gebruikt om de materi\u00eble historie voor de bronhouder mee aan de duiden .De materi\u00eble historie beschrijft tot welke datum een voorkomen geldig is in de registratie, via het attribuut eindgeldigheid. Deze datum kan in de toekomst liggen. Zie ook [deze praktijkhandleiding](https://imbag.github.io/praktijkhandleiding/artikelen/hoe-bepaal-ik-welke-gegevens-in-een-levenscyclus-van-een-object-geldig-zijn)\"\"\" eindgeldigheid : Date \"\"\"De unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van een pand heeft plaatsgevonden binnen een gemeente.\"\"\" documentnummer : String \"\"\"De datum waarop het brondocument is vastgesteld op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van een pand heeft plaatsgevonden.\"\"\" documentdatum : Date \"\"\"De minimaal tweedimensionale geometrische representatie van het bovenzicht van de omtrekken van een pand. Gemeten in het stelsel van de Rijksdriehoeksmeting. De [ESPG](https://epsg.io/28992) code van dit stelsel is 28992.\"\"\" geometrie : String @ jsonrdfprefix ( prefix : \"<http://www.opengis.net/def/crs/EPSG/0/28992> \" ) \"\"\"De aanduiding van het jaar waarin een pand oorspronkelijk als bouwkundig gereed is of zal worden opgeleverd.\"\"\" oorspronkelijkbouwjaar : Int ! \"\"\"De fase van de levenscyclus van een pand, waarin het betreffende pand zich bevindt. Domeinverzameling: - Bouw gestart - Bouwvergunning verleend - Niet gerealiseerd pand - Pand buiten gebruik - Pand gesloopt - Pand in gebruik - Pand in gebruik (niet ingemeten) - Sloopvergunning verleend \"\"\" pandstatus : String ! @ jsonrdftype \"\"\"Een verwijzing naar de Verblijfsobjecten en diens voorkomens (historie) welke deel uit maken van dit pand. Neemt alleen het actuele voorkomen wanneer peilDatum niet leeg is.\"\"\" bevatverblijfsobjecten : [ BAG2Verblijfsobject ] } Kortom, het object ( BAG2Pand ) kent attributen (bijv. oorspronkelijkBouwjaar ), verscheidene vormen van metadatering (zichtbaar in de typedefs) en object-relaties (zoals bevatVerblijfsobjecten ) waarmee relaties naar andere objecten worden aangegeven. Query Onderdeel van het implementeren van de typedefs is ook het defini\u00ebren van de Query varianten die voor deze silo geldt. Een Query defini\u00ebert de ingang waarmee de data bevraagd kan worden. Denk bijvoorbeeld aan een (set van) nummeraanduiding(en): bag2nummeraanduiding ( identificatiecode : String @ lpad ( length : 16 , char : \"0\" ), peilDatum : Date , first : Int , offset : Int ) : [ BAG2Nummeraanduiding ] Deze Query (ingang) beschrijft dus dat er een nummeraanduiding opgehaald kan worden voor een gegeven identificatiecode (vergelijkbaar met een standaard REST API) of dat er een set aan objecten opgehaald kan worden (met paginatie parameters first en offset ). Middels de zogenoemde directive lpad wordt input van een gebruiker voor identificatiecode automatisch aangevuld tot 16 karakters. Resolvers Wanneer de typedefs gedefini\u00eberd zijn moet het GraphQL endpoint nog weten hoe het de onderliggende data moet ophalen. Dit is terug te vinden in de resolvers. Een voorbeeldje: BAG2Nummeraanduiding : { hoofdadresVan ( parent , args , ctx , info ){ return querydb ({ pool : 'bag_pg' , ctx : bagsql [ \"bag2verblijfsobject\" ], id : \"hoofdadres = :identificatie\" , binds : { peildatum : parent . peilDatum , identificatie : parent . identificatiecode }}); }, } Kortom, de resolvers beschrijven hier dat er een voorgedefini\u00eberde SQL query ( bag2verlijfsobject ) moet worden afgevuurd met daarin een aantal bind variabelen (parameters) om van een object met type BAG2Nummeraanduiding het object op te halen dat het hoofdadresVan deze nummeraanduiding is. Middels de pool wordt aangegeven uit welke database de data moet komen. GraphQL over de silo's heen Al onze GraphQL endpoints voldoen aan de Apollo GraphQL standaard . Apollo is een open-source framework bovenop GraphQL waarmee voornamelijk federatie gemakkelijker is gemaakt. Wanneer verschillende GraphQL endpoints naar elkaar verwijzen (bijvoorbeeld doordat de onderliggende data relaties naar een andere databron bevat) gebruiken we Apollo om de brug tussen deze silo's te slaan. Dit betekent dat - governance technisch - data eigenaren verantwoordelijk zijn voor de data in hun eigen silo (en desbetreffende endpoint). Maar ook dat er middels een zogenoemde Apollo Gateway een bevraging kan worden uitgevoerd over deze verschillende silo's heen. Hierbij is het irrelevant waar deze endpoints staan. Voor deze endpoints geldt dus een volledige federated approach . De kracht hiervan is dat Kadaster niet per se een endpoint hoeft te hosten op alle data, maar dat ook externe partijen (zoals bijvoorbeeld CBS of NDW) een eigen endpoint zouden kunnen hosten, welke we dan wel weer integraal kunnen bevragen. Uiteraard wel zolang zij maar aan dezelfde standaarden voldoen. Om de silo's met elkaar te verbinden moeten er in de silo's zogenoemde extends worden aangebracht. Een voorbeeldje: extend type BGTPand @ key ( fields : \"identificatiebagpnd peilDatum\" ){ identificatiebagpnd : String @ external peilDatum : Date @ external \"\"\"In de BGT is voor het Pand object een relatie tot het afgeleide BAG pand opgenomen. Een BGT pand kan niet bestaan zonder onderliggend BAG pand. Dit is een verwijzing naar de bijbehorende voorkomens (historie) van het BAG pand. Alleen het actuele voorkomen wordt meegenomen wanneer peilDatum niet leeg is.\"\"\" bagpand : [ BAG2Pand ] } Hier wordt dus gesteld dat een BGTPand een relatie heeft met een BAGPand. En dat klopt. Een BGT Pand kan zelfs niet bestaan zonder BAG Pand . De identifier naar het BAG pand is dan ook een attribuut van het BGT Pand Object. Door in een extend aan te geven dat deze administratieve relatie bestaat, en een bijbehorende resolver te implementeren, kunnen beide objecten nu in samenhang worden bevraagd. GraphQL over Linked Data Voor onze toepassing geldt dat wij vaak GraphQL toepassen om traditionele data naar Linked Data te transformeren. Er zijn echter ook een scala aan toepassingen te bedenken waarom GraphQL ook een hele waardevolle abstractielaag kan bieden bovenop Linked Data. GraphQL is een breder geadopteerd query mechanisme dan SPARQL (de querytaal van Linked Data, red.) en biedt ook meer mogelijkheden om gemakkelijk door het schema heen te lopen. Het is dan ook mogelijk om een Linked Data endpoint met een (Apollo) GraphQL endpoint te abstraheren. Voor Linked Data endpoints geldt dat hier een communica implementatie met bijbehorende JSON-LD context (Zie bijvoorbeeld de JSON-LD context van BAG 2.0) bij hoort. Conclusie Een GraphQL endpoint is back-end agnostisch. Een GraphQL endpoint wordt gedefini\u00eberd door zijn typedefs en resolvers. GraphQL endpoints kunnen middels het Apollo framework geheel federatief worden opgezet en beheerd. Middels een Apollo GraphQL Gateway zijn de federatieve endpoints echter wel op \u00e9\u00e9n plek toegankelijk. GraphQL kan ook middels Communica dienen als abstractielaag voor een gegeven Linked Data bron. Een technische architectuur van dit geheel is te vinden in de volgende plaat: Terwijl we functioneel de volgende overzichtsplaat hanteren:","title":"GraphQL"},{"location":"GraphQLETL/#ontsluiting-middels-graphql","text":"GraphQL is een open-source framework oorspronkelijk ontwerpen door Facebook en tegenwoordig onderhouden door de GraphQL foundation. GraphQL is - vanuit hun eigen woorden - een querytaal voor APIs. Het combineert de gedachte van graafmodellering van je data en laagdrempelige ontsluiting via een developer-friendly API interface.","title":"Ontsluiting middels GraphQL"},{"location":"GraphQLETL/#voordelen-en-doel-van-graphql","text":"Met GraphQL ondervangen we een aantal vaak gestelde tekortkomingen van de services die we op onze basisregistraties leveren. Levering van data is vraaggestuurd in plaats van aanbodgestuurd . We geven de gebruiker de kans om precies die data te bevragen die hij/zij nodig heeft. We maken bevragen op basis van objecten mogelijk. Verschillende datasets met een administratieve connectie kunnen integraal bevraagd worden. Voor ons heeft GraphQL echter twee belangrijke doelen: GraphQL is een krachtig paradigme om data integraal en laagdrempelig richting onze afnemers beschikbaar te stelen \u00e9n GraphQL dient als abstractielaag op de bron, om hiermee onze Extract- Transform & Load (ETL) van Linked Data uit te voeren. In dit document bespreken we nadrukkelijk dit eerste. Voor het tweede punt verwijzen we de ge\u00efnteresseerde lezer door naar de sectie over GraphQL in gebruik .","title":"Voordelen en doel van GraphQL"},{"location":"GraphQLETL/#graphql-op-een-silo","text":"Verschillende GraphQL endpoints - naar de buitenwereld toe geidentificeerd door hun typedefs en resolvers - bevinden zich op een databron, zijnde (op dit moment) Linked Data, SQL en/of REST. Een GraphQL endpoint is dus back-end agnostisch.","title":"GraphQL op een silo"},{"location":"GraphQLETL/#typedefs","text":"Zoals eerder gesteld modelleren we middels GraphQL onze data als een graaf, met verschillende nodes (objecten) en edges (relaties). Deze modellering vinden we terug in de typedefs van ons GraphQL endpoint. Neem als voorbeeld het object Pand in de BAG. De corresponderende typedefs ziet er als volgt uit: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \"\"\"Een pand is de kleinste bij de totstandkoming functioneel en bouwkundig-constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is\"\"\" type BAG2Pand implements JSONLD @ key ( fields : \"lokaalid peilDatum\" ) { \"\"\"De identificatiecodes voor objecten zijn uniek binnen de context van deze naamgevingsruimte. Correspondeerd met de [NEN3610 standaard](https://geonovum.github.io/NEN3610-Linkeddata/#nen3610id)\"\"\" namespace : String ! \"\"\"Een aanduiding waarmee kan worden aangegeven dat een pand in de registratie is opgenomen als gevolg van een feitelijke constatering, zonder dat er op het moment van opname sprake was van een regulier brondocument voor deze opname. Zie ook [de BAG catalogus](https://imbag.github.io/catalogus/hoofdstukken/attributen--relaties#745-geconstateerd) \"\"\" geconstateerd : Boolean \"\"\"BAG registraties bevatten een voorkomen identificatie, waarmee de volgorde wordt aangegeven waarmee registraties voor hetzelfde object zijn aangemaakt.\"\"\" voorkomenidentificatie : Int \"\"\"Wordt gebruikt om de formele historie voor de bronhouder mee aan de duiden. Deze attribuut beschrijft wanneer het voorkomen is ontstaan bij de bronhouder. Zie ook [deze praktijkhandleiding](https://imbag.github.io/praktijkhandleiding/artikelen/hoe-bepaal-ik-welke-gegevens-in-een-levenscyclus-van-een-object-geldig-zijn)\"\"\" tijdstipregistratie : DateTime \"\"\"Wordt gebruikt om de formele historie voor de bronhouder mee aan de duiden. Deze attribuut beschrijft wanneer het voorkomen is afgesloten bij de bronhouder. Zie ook [deze praktijkhandleiding](https://imbag.github.io/praktijkhandleiding/artikelen/hoe-bepaal-ik-welke-gegevens-in-een-levenscyclus-van-een-object-geldig-zijn)\"\"\" eindregistratie : DateTime \"\"\"Wordt gebruikt om de materi\u00eble historie voor de bronhouder mee aan de duiden .De materi\u00eble historie beschrijft vanaf welke datum een voorkomen geldig is in de registratie, via het attribuut begingeldigheid. Deze datum kan in de toekomst liggen. Zie ook [deze praktijkhandleiding](https://imbag.github.io/praktijkhandleiding/artikelen/hoe-bepaal-ik-welke-gegevens-in-een-levenscyclus-van-een-object-geldig-zijn)\"\"\" begingeldigheid : Date \"\"\"Wordt gebruikt om de materi\u00eble historie voor de bronhouder mee aan de duiden .De materi\u00eble historie beschrijft tot welke datum een voorkomen geldig is in de registratie, via het attribuut eindgeldigheid. Deze datum kan in de toekomst liggen. Zie ook [deze praktijkhandleiding](https://imbag.github.io/praktijkhandleiding/artikelen/hoe-bepaal-ik-welke-gegevens-in-een-levenscyclus-van-een-object-geldig-zijn)\"\"\" eindgeldigheid : Date \"\"\"De unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van een pand heeft plaatsgevonden binnen een gemeente.\"\"\" documentnummer : String \"\"\"De datum waarop het brondocument is vastgesteld op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van een pand heeft plaatsgevonden.\"\"\" documentdatum : Date \"\"\"De minimaal tweedimensionale geometrische representatie van het bovenzicht van de omtrekken van een pand. Gemeten in het stelsel van de Rijksdriehoeksmeting. De [ESPG](https://epsg.io/28992) code van dit stelsel is 28992.\"\"\" geometrie : String @ jsonrdfprefix ( prefix : \"<http://www.opengis.net/def/crs/EPSG/0/28992> \" ) \"\"\"De aanduiding van het jaar waarin een pand oorspronkelijk als bouwkundig gereed is of zal worden opgeleverd.\"\"\" oorspronkelijkbouwjaar : Int ! \"\"\"De fase van de levenscyclus van een pand, waarin het betreffende pand zich bevindt. Domeinverzameling: - Bouw gestart - Bouwvergunning verleend - Niet gerealiseerd pand - Pand buiten gebruik - Pand gesloopt - Pand in gebruik - Pand in gebruik (niet ingemeten) - Sloopvergunning verleend \"\"\" pandstatus : String ! @ jsonrdftype \"\"\"Een verwijzing naar de Verblijfsobjecten en diens voorkomens (historie) welke deel uit maken van dit pand. Neemt alleen het actuele voorkomen wanneer peilDatum niet leeg is.\"\"\" bevatverblijfsobjecten : [ BAG2Verblijfsobject ] } Kortom, het object ( BAG2Pand ) kent attributen (bijv. oorspronkelijkBouwjaar ), verscheidene vormen van metadatering (zichtbaar in de typedefs) en object-relaties (zoals bevatVerblijfsobjecten ) waarmee relaties naar andere objecten worden aangegeven.","title":"Typedefs"},{"location":"GraphQLETL/#query","text":"Onderdeel van het implementeren van de typedefs is ook het defini\u00ebren van de Query varianten die voor deze silo geldt. Een Query defini\u00ebert de ingang waarmee de data bevraagd kan worden. Denk bijvoorbeeld aan een (set van) nummeraanduiding(en): bag2nummeraanduiding ( identificatiecode : String @ lpad ( length : 16 , char : \"0\" ), peilDatum : Date , first : Int , offset : Int ) : [ BAG2Nummeraanduiding ] Deze Query (ingang) beschrijft dus dat er een nummeraanduiding opgehaald kan worden voor een gegeven identificatiecode (vergelijkbaar met een standaard REST API) of dat er een set aan objecten opgehaald kan worden (met paginatie parameters first en offset ). Middels de zogenoemde directive lpad wordt input van een gebruiker voor identificatiecode automatisch aangevuld tot 16 karakters.","title":"Query"},{"location":"GraphQLETL/#resolvers","text":"Wanneer de typedefs gedefini\u00eberd zijn moet het GraphQL endpoint nog weten hoe het de onderliggende data moet ophalen. Dit is terug te vinden in de resolvers. Een voorbeeldje: BAG2Nummeraanduiding : { hoofdadresVan ( parent , args , ctx , info ){ return querydb ({ pool : 'bag_pg' , ctx : bagsql [ \"bag2verblijfsobject\" ], id : \"hoofdadres = :identificatie\" , binds : { peildatum : parent . peilDatum , identificatie : parent . identificatiecode }}); }, } Kortom, de resolvers beschrijven hier dat er een voorgedefini\u00eberde SQL query ( bag2verlijfsobject ) moet worden afgevuurd met daarin een aantal bind variabelen (parameters) om van een object met type BAG2Nummeraanduiding het object op te halen dat het hoofdadresVan deze nummeraanduiding is. Middels de pool wordt aangegeven uit welke database de data moet komen.","title":"Resolvers"},{"location":"GraphQLETL/#graphql-over-de-silos-heen","text":"Al onze GraphQL endpoints voldoen aan de Apollo GraphQL standaard . Apollo is een open-source framework bovenop GraphQL waarmee voornamelijk federatie gemakkelijker is gemaakt. Wanneer verschillende GraphQL endpoints naar elkaar verwijzen (bijvoorbeeld doordat de onderliggende data relaties naar een andere databron bevat) gebruiken we Apollo om de brug tussen deze silo's te slaan. Dit betekent dat - governance technisch - data eigenaren verantwoordelijk zijn voor de data in hun eigen silo (en desbetreffende endpoint). Maar ook dat er middels een zogenoemde Apollo Gateway een bevraging kan worden uitgevoerd over deze verschillende silo's heen. Hierbij is het irrelevant waar deze endpoints staan. Voor deze endpoints geldt dus een volledige federated approach . De kracht hiervan is dat Kadaster niet per se een endpoint hoeft te hosten op alle data, maar dat ook externe partijen (zoals bijvoorbeeld CBS of NDW) een eigen endpoint zouden kunnen hosten, welke we dan wel weer integraal kunnen bevragen. Uiteraard wel zolang zij maar aan dezelfde standaarden voldoen. Om de silo's met elkaar te verbinden moeten er in de silo's zogenoemde extends worden aangebracht. Een voorbeeldje: extend type BGTPand @ key ( fields : \"identificatiebagpnd peilDatum\" ){ identificatiebagpnd : String @ external peilDatum : Date @ external \"\"\"In de BGT is voor het Pand object een relatie tot het afgeleide BAG pand opgenomen. Een BGT pand kan niet bestaan zonder onderliggend BAG pand. Dit is een verwijzing naar de bijbehorende voorkomens (historie) van het BAG pand. Alleen het actuele voorkomen wordt meegenomen wanneer peilDatum niet leeg is.\"\"\" bagpand : [ BAG2Pand ] } Hier wordt dus gesteld dat een BGTPand een relatie heeft met een BAGPand. En dat klopt. Een BGT Pand kan zelfs niet bestaan zonder BAG Pand . De identifier naar het BAG pand is dan ook een attribuut van het BGT Pand Object. Door in een extend aan te geven dat deze administratieve relatie bestaat, en een bijbehorende resolver te implementeren, kunnen beide objecten nu in samenhang worden bevraagd.","title":"GraphQL over de silo's heen"},{"location":"GraphQLETL/#graphql-over-linked-data","text":"Voor onze toepassing geldt dat wij vaak GraphQL toepassen om traditionele data naar Linked Data te transformeren. Er zijn echter ook een scala aan toepassingen te bedenken waarom GraphQL ook een hele waardevolle abstractielaag kan bieden bovenop Linked Data. GraphQL is een breder geadopteerd query mechanisme dan SPARQL (de querytaal van Linked Data, red.) en biedt ook meer mogelijkheden om gemakkelijk door het schema heen te lopen. Het is dan ook mogelijk om een Linked Data endpoint met een (Apollo) GraphQL endpoint te abstraheren. Voor Linked Data endpoints geldt dat hier een communica implementatie met bijbehorende JSON-LD context (Zie bijvoorbeeld de JSON-LD context van BAG 2.0) bij hoort.","title":"GraphQL over Linked Data"},{"location":"GraphQLETL/#conclusie","text":"Een GraphQL endpoint is back-end agnostisch. Een GraphQL endpoint wordt gedefini\u00eberd door zijn typedefs en resolvers. GraphQL endpoints kunnen middels het Apollo framework geheel federatief worden opgezet en beheerd. Middels een Apollo GraphQL Gateway zijn de federatieve endpoints echter wel op \u00e9\u00e9n plek toegankelijk. GraphQL kan ook middels Communica dienen als abstractielaag voor een gegeven Linked Data bron. Een technische architectuur van dit geheel is te vinden in de volgende plaat: Terwijl we functioneel de volgende overzichtsplaat hanteren:","title":"Conclusie"},{"location":"IRI/","text":"IRI strategie In de IRI strategie BGT wordt vastgelegd hoe namen voor objecten in de linked data versie van de BGT zullen worden uitgegeven. Hierbij volgen we grotendeels de Aanzet tot een nationale URI-Strategie voor Linked Data van de Nederlandse overheid (hierna 'Aanzet') en de manier waarop het Kadaster Data Platform (KDP) op dit moment IRIs uitgeeft. Op sommige punten zullen wij echter afwijken van de Aanzet en/of van de KDP aanpak. We zullen dit doen op onderdelen waar de Aanzet en de KDP methode achterhaald zijn, en op onderdelen waar het letterlijk volgen van de Aanzet en de KDP methode tot nodeloze complexiteit zou leiden. In lijn met de Aanzet en de KDP aanpak kan een linked data IRI worden opgedeeld in de volgende componenten: {schema}://{domein}/{type}/{subtype}/{referentie} We zullen elk van deze componenten kort behandelen in een eigen subsectie. Ten slotte zullen we een aantal voorbeelden geven van BGT IRIs die volgens deze strategie zijn aangemaakt. {schema} Voor de linked data BGT gebruiken we het https schema. In de Aanzet en in KDP wordt het http schema gebruikt. Het verschil tussen deze twee schema's is dat HTTP IRIs geen gebruiken maken van het beveiligingsprotocol SSL, terwijl HTTPS IRIs hier wel gebruik van maken. Het gebruik van het beveiligingsprotocol SSL is de laatste jaren gemeengoed geworden op het Internet. Moderne web browsers laten waarschuwingen zien wanneer een niet-SSL HTTP IRI wordt ingevoerd. Het gebruik van een niet-SSL HTTP IRI binnen een beveiligde applicatie of web pagina wordt eveneens door moderne web browsers aangeduid met een waarschuwing. Ten slotte worden niet-SSL HTTP IRIs lager getoond in zoekresultaten in moderne web zoekmachines. De kans bestaat dat het gebruik van niet-SSL HTTP IRIs op termijn verder ontmoedigd zal worden, en \u2015 binnen sommige omgevingen \u2015 zelfs geheel zal worden geweerd. Het is technisch mogelijk om zowel niet-SSL HTTP IRIs alsook HTTPS IRIs gelijktijdig te ondersteunen. Hierbij resulteert het bevragen van een niet-SSL HTTP IRI in een doorverwijzing ('redirect') naar de corresponderende HTTPS IRI. Deze oplossing is technisch in te richten, maar heeft de volgende nadelen: Verwarring bij gebruikers Er komen 2 IRIs in omloop die allebei hetzelfde BGT object identificeren. Sommige gebruikers zullen de HTTP IRI gaan gebruiken en anderen zullen de HTTPS IRI, mogelijk ook door elkaar heen, gaan gebruiken. Dit kan voor verwarring bij de gebruiker leiden. De vraag \"Welke IRI moet ik gebruiken?\" zal frequent en helder beantwoord moeten worden. Hogere onderhoudskosten Het gebruik van 2 IRIs voor hetzelfde object betekent dat in BGT bevragingen en in BGT applicaties rekening moet worden gehouden met het mogelijke gebruik van 2 soorten IRIs. Bijvoorbeeld een software onderdeel dat op basis van een BGT object identificatie een ander gegeven teruggeeft moet zowel de HTTP IRI alsook de HTTPS IRI kunnen accepteren en verwerken. Per individuele bevraging is dit een relatief kleine investering, echter keert deze investering op veel plekken terug. Daarnaast moeten ontwikkelaars zich blijvend bewust zijn van het mogelijke gebruik van 2 soorten IRIs. Over de tijd heen moet daarom rekening gehouden worden met hogere beheerskosten wanneer voor het gebruik van 2 IRIs gekozen wordt. Hogere server belasting Wanneer een HTTP IRI bevraagt wordt moet de server doorverwijzen naar de corresponderende HTTPS IRI. Dit betekent dat gebruikers twee bevragingen in plaats van \u00e9\u00e9n bevraging moeten uitvoeren. Daarnaast moet de server twee bevragingen in plaats van \u00e9\u00e9n bevraging afhandelen. Merk op dat deze extra server belasting in de praktijk zal meevallen, en mogelijk slechts enkele procent extra performance zal kosten. Tegelijkertijd is het niet ondersteunen van HTTP IRIs een eenvoudige manier om een kleine besparing op toekomstige server capaciteit te realiseren. {domein} Voor het domein volgen we de manier waarop de bestaande linked data basisregistraties door KDP worden ontsloten. Hierbij wordt tevens de Aanpak gevolgd, waarin wordt gewaarschuwd voor het gebruik van een organisatienaam als onderdeel van het domain. (Organisatienamen veranderen namelijk regelmatig.) Dit betekent dat het volgende domein voor de linked data BGT wordt gebruikt: bgt.basisregistraties.overheid.nl Dat is in lijn met de volgende bestaande IRI prefixen die door KDP worden aangeboden: bag.basisregistraties.overheid.nl brt.basisregistraties.overheid.nl {type} We stellen voor om de volgende types te gebruiken: def/ voor definities; dat wil zeggen BGT klassen en BGT eigenschappen. id/ voor instanties; dat wil zeggen individuele BGT objecten. In de Aanzet wordt naast def/ en id/ type, ook het gebruik van het doc/ type voorgesteld. Het gebruik van het doc/ type hangt samen met een onderscheiding die traditioneel in linked data gemaakt wordt tussen een object (aangeduid met type id/ ) en een pagina over dat object (aangeduid met type doc/ ). Het idee is dat op het moment dat de id/ IRI in een web browser gebruikt wordt een doorverwijzing gevolgd wordt naar de corresponderende doc/ IRI. Merk op dat voor def/ IRIs een dergelijke doorverwijzing niet wordt voorgesteld, alhoewel het onderscheid tussen een concept en een pagina over dat concept theoretisch gezien ook gemaakt zou kunnen worden. Voor de linked data BGT wordt geen gebruik gemaakt van deze traditionele doorverwijzingspraktijk, omdat het gebruik van id/ en doc/ in de praktijk de volgende problemen veroorzaakt: Verwarring bij de gebruiker Wanneer gebruik gemaakt wordt van een id/ IRI, wordt deze binnen de web browser automatisch vervangen door de corresponderende doc/ IRI. Dit betekent dat de gebruiker niet zomaar de URL in de web browser kan gebruiken om het opgezochte object mee te identificeren. Een gebruiker moet zich er van bewust zijn dat er een onderscheid wordt gemaakt tussen een object (type id/ ) en een pagina over dat object in de web browser (type doc/ ). Omdat dit onderscheid nergens anders op het web gemaakt wordt kan dit tot verwarring leiden bij de gebruiker. Trager gebruik Wanneer wordt doorverwezen van id/ naar doc/ IRIs duurt een bevraging van een IRI in de web browser langer dan wanneer de id/ IRI direct toegang verschaft tot het opgevraagde web document. Dit is een relatief kleine vertraging van enkele tientallen procenten. Echter, het niet implementeren van de doc/ doorverwijzing is een eenvoudige manier om alle bevragingen van IRIs een klein beetje sneller te maken. Hogere onderhoudskosten Wanneer wordt doorverwezen van id/ naar doc/ IRIs moet extra code onderhouden worden: er moet immers een doorverwijzing worden onderhouden van de ene naar de andere IRI. De doorverwijzingen in sectie 2.1 , van HTTP naar HTTPS IRIs, is een standaard operatie die door bestaande software componenten ondersteund wordt. Dat is niet het geval voor de doorverwijzing van id/ naar doc/ IRIs. Deze laatste vereist in veel gevallen code die geschreven en onderhouden moet worden. Hogere server belasting Evenals bij de doorverwijzing van HTTP naar HTTPS IRI (sectie 2.1 ), resulteren doorverwijzingen van id/ naar doc/ IRIs tot een verdubbeling van het aantal bevragingen dat door de server moet worden afgehandeld. Ook dit is weer een performance penalty van ten minste enkele procenten. {subtype} Het subtype wordt eveneens gebruikt in combinatie met het id/ type om het soort instantie weer te gegeven. Bijvoorbeeld, voor een pand wordt het subtype pand/ gebruikt, waardoor het pand met /id/pand/ begint. Hierin volgt de linked data BGT de Aanzet en de KDP methode. Omdat het aantal instanties in de BGT er groot is (vele miljoenen) en de referentie vaak betekenisloos is (een arbitraire code), biedt het subtype enige houvast voor het soort van instantie waar we mee te maken hebben. De subtypes zorgen ervoor dat de grote ruimte van instantie IRIs wordt opgedeeld in betekenisvolle categorie\u00ebn. Hierbij is het wel van belang dat iedere id/ IRI precies \u00e9\u00e9n subtype heeft, die bovendien eenvoudig vast te stellen is. Voor de BGT garanderen we dat voor iedere instantie IRI \u00e9\u00e9n directe hoofdklasse wordt toegekend. Bijvoorbeeld, ieder pand is een instantie van klasse bgt:Pand , ieder onbegroeid terreindeel is een instantie van klasse bgt:OnbegroeidTerreindeel , etc. Het {subtype} wordt vervolgens gevormd door de referentie van de klasse te nemen, met een kleine beginletter. Bijvoorbeeld /id/pand/ voor instanties van klasse bgt:Pand , en /id/onbegroeidTerreindeel/ voor instanties van klasse bgt:OnbegroeidTerreindeel . Voor het def/ type wordt geen subtype gebruikt. De belangrijkste redenen hiervoor zijn dat (1) er veel minder definitie IRIs zijn (enkele tientallen), en (2) de referentie namen voor definitie IRIs vaak al betekenisvol zijn (bijvoorbeeld bgt:Pand of bgt:bestaand ). {referentie} Voor definities wordt gebruik gemaakt van een betekenisvolle naam als referentie. Deze naam moet aan bepaalde syntactische eisen voldoen waardoor deze binnen een IRI gebruikt kan worden. De referentie naam voor een begroeid terreindeel is bijvoorbeeld BegroeidTerreindeel aan elkaar geschreven, omdat spaties in IRIs niet zijn toegestaan. Daarnaast wordt de referentie voor een eigenschap traditioneel met een kleine letter geschreven, terwijl de referentie voor een klasse traditioneel met een grote letter geschreven wordt. Deze conventie is nuttig omdat er soms een eigenschap is die dezelfde naam heeft als de klasse waar deze eigenschap naar verwijst. Bijvoorbeeld, het NEN 3610 vocabulaire bevat klasse nen3610:Identificatie en een eigenschap nen3610:identificatie . Voorbeelden van referenties voor definitie IRIs in de BGT zijn Wegdeel voor een klasse, en relatieveHoogteligging voor een eigenschap. Voor instanties wordt gebruik gemaakt van een betekenisloze identificatiecode. Dit wordt specifiek voor instanties gedaan omdat deze vaak geen betekenisvolle naam hebben. In de context van de BGT is het bijvoorbeeld niet aannemelijk dat ieder begroeid terreindeel of ieder individueel pand een betekenisvolle naam heeft. Om deze instantie IRIs toch nog enigszins te kunnen duiden worden betekenisvolle subtypes gebruikt (zie sectie 2.4 ). Scheidingsteken Tussen elke twee linked data IRI componenten komt een scheidingsteken voor: - Het scheidingsteken tussen het {schema} en het {domein} is de drie-karakter sequentie :// . - Het scheidingsteken tussen de andere componenten is de voorwaartse slash ( / ). In de Aanzet wordt een alternatieve aanpak beschreven voor het laatste scheidingsteken: het teken dat direct voor de {referentie} staat. Hiervoor kan in plaats van een voorwaartse slash ( / ) namelijk een hekje ( # ) gebruikt worden. Dit alternatieve scheidingsteken kan uitsluitend gebruikt worden voor IRIs die definities aangeven (de def/ IRIs). In de KDP aanpak wordt voor definities gebruik gemaakt van dit alternatieve scheidingsteken. Het verschil tussen een / en een # teken heeft een belangrijke functionele consequentie: - Wanneer het laatste scheidingsteken een voorwaartse slash ( / ) is, wordt elke individuele IRI apart opgevraagd. Wanneer een klasse of een eigenschap wordt op gevraagd wordt alleen die ene klasse of die ene eigenschap door de server teruggegeven. - Wanneer het laatste scheidingsteken een hekje ( # ) is, wordt alle data in \u00e9\u00e9n keer opgevraagd. Dit is ook de reden waarom het hekje alleen wordt voorgesteld voor definitie IRIs, omdat het aantal definitie IRIs voor veel datasets klein is (in tegenstelling tot het aantal instantie IRIs). Wanneer een klasse of een eigenschap wordt opgevraagd worden alle klassen en alle eigenschappen teruggegeven. Voor de linked data BGT wordt als laatste scheidingsteken de voorwaartse slash ( / ) gebruikt, om de volgende redenen: Verwarring bij de gebruiker Bij het bevragen van een instantie IRI is de gebruiker gewend om de beschrijving van die ene specifieke instantie terug te krijgen. Wanneer een gebruiker een definitie IRI bevraagt krijgt deze ineens meerdere definities terug. Dit kan verwarrend zijn voor gebruikers die niet bekend zijn met linked data. Daarnaast kan het voor de gebruiker enige moeite kosten om uit de totaliteit van teruggegeven definities de ene definitie op te halen die ook daadwerkelijk bevraagd is. Wanneer de gebruiker goede linked data libraries gebruikt om de gegevens te verwerken is deze extra moeite echter relatief beperkt, omdat goede linked data libraries ondersteuning bieden voor het uitfilteren van de opgevraagde informatie. Trager in het gebruik Wanneer alle definities worden doorverwezen wanneer \u00e9\u00e9n definitie wordt opgevraagd betekent dit dat er meer gegevens moeten worden verstuurd. Hierbij speelt mee dat het model van de BGT \u2015 zeker met inachtneming van de IMGeo uitbreiding \u2015 omvangrijker is dan de meeste modellen die door het KDP worden ontsloten. Dit betekent dat bij gebruikmaking van een hash ( # ), voor elke bevraging van 1 definitie IRI de teruggegeven hoeveelheid 100 tot 1,000 keer groter zal zijn dan met de voorwaartse slash ( / ) methode. Wanneer de gebruiker over een minder snelle Internet verbinding beschikt kan deze vermenigvuldiging van de teruggegeven gegevensgrootte voor de gebruiker merkbaar trager zijn. Bij een snellere Internet verbinding zal het verschil minder of geheel niet merkbaar zijn. Tegelijkertijd is de keuze voor de voorwaartse slash aanpak een eenvoudige manier om het benodigde gegevensverkeer te verkleinen. Conclusie Op basis van de overwegingen in de voorgaande subsecties komen we tot de volgende IRI strategie voor de linked data BGT: https://bgt.basisregistraties.overheid.nl/def/{eigenschap} https://bgt.basisregistraties.overheid.nl/def/{Klasse} https://bgt.basisregistraties.overheid.nl/id/{subtype}/{referentie} Aan de hand van bovenstaande IRI templates kunnen concrete IRIs er als volgt uit komen te zien: De mogelijke IRI voor de BGT klasse die wegdelen aanduidt: https://bgt.basisregistraties.overheid.nl/def/Wegdeel De mogelijke IRI voor de BGT eigenschap die de relatieve hoogteligging van geospati\u00eble objecten aanduidt: https://bgt.basisregistraties.overheid.nl/def/relatieveHoogteligging De mogelijke IRI voor een specifiek BGT wegdeel (instantie): https://bgt.basisregistraties.overheid.nl/id/wegdeel/{referentie} Afwijking van de Aanzet Zoals in de voorgaande subsecties besproken wijkt de IRI strategie voor de linked data BGT op de volgende punten af van de Aanzet en de KDP aanpak: De BGT maakt gebruik van HTTPS IRIs. De BGT verwijst niet door van id/ IRIs naar doc/ IRIs. De BGT gebruikt de voorwaartse slash (/`) als laatste scheidingsteken. Menselijk gebruik en machine gebruik Voor al deze IRIs zal content negotiation ondersteund worden. Dit betekent dat voor menselijk gebruik een HTML pagina met menselijk leesbare inhoud zal worden getoond. Deze HTML pagina wordt automatisch geserveerd door web browsers, die op de achtergrond om content van het Media Type text/html vragen. Voor machine gebruik zal een RDF bestand worden uitgegeven. Dit machine formaat kan worden opgevraagd door een ander Media Type op te geven. Bijvoorbeeld application/n-triples geeft de beschrijving van de bevraagde IRI in het N-Triples formaat terug.","title":"IRI Strategie"},{"location":"IRI/#iri-strategie","text":"In de IRI strategie BGT wordt vastgelegd hoe namen voor objecten in de linked data versie van de BGT zullen worden uitgegeven. Hierbij volgen we grotendeels de Aanzet tot een nationale URI-Strategie voor Linked Data van de Nederlandse overheid (hierna 'Aanzet') en de manier waarop het Kadaster Data Platform (KDP) op dit moment IRIs uitgeeft. Op sommige punten zullen wij echter afwijken van de Aanzet en/of van de KDP aanpak. We zullen dit doen op onderdelen waar de Aanzet en de KDP methode achterhaald zijn, en op onderdelen waar het letterlijk volgen van de Aanzet en de KDP methode tot nodeloze complexiteit zou leiden. In lijn met de Aanzet en de KDP aanpak kan een linked data IRI worden opgedeeld in de volgende componenten: {schema}://{domein}/{type}/{subtype}/{referentie} We zullen elk van deze componenten kort behandelen in een eigen subsectie. Ten slotte zullen we een aantal voorbeelden geven van BGT IRIs die volgens deze strategie zijn aangemaakt.","title":"IRI strategie"},{"location":"IRI/#schema","text":"Voor de linked data BGT gebruiken we het https schema. In de Aanzet en in KDP wordt het http schema gebruikt. Het verschil tussen deze twee schema's is dat HTTP IRIs geen gebruiken maken van het beveiligingsprotocol SSL, terwijl HTTPS IRIs hier wel gebruik van maken. Het gebruik van het beveiligingsprotocol SSL is de laatste jaren gemeengoed geworden op het Internet. Moderne web browsers laten waarschuwingen zien wanneer een niet-SSL HTTP IRI wordt ingevoerd. Het gebruik van een niet-SSL HTTP IRI binnen een beveiligde applicatie of web pagina wordt eveneens door moderne web browsers aangeduid met een waarschuwing. Ten slotte worden niet-SSL HTTP IRIs lager getoond in zoekresultaten in moderne web zoekmachines. De kans bestaat dat het gebruik van niet-SSL HTTP IRIs op termijn verder ontmoedigd zal worden, en \u2015 binnen sommige omgevingen \u2015 zelfs geheel zal worden geweerd. Het is technisch mogelijk om zowel niet-SSL HTTP IRIs alsook HTTPS IRIs gelijktijdig te ondersteunen. Hierbij resulteert het bevragen van een niet-SSL HTTP IRI in een doorverwijzing ('redirect') naar de corresponderende HTTPS IRI. Deze oplossing is technisch in te richten, maar heeft de volgende nadelen: Verwarring bij gebruikers Er komen 2 IRIs in omloop die allebei hetzelfde BGT object identificeren. Sommige gebruikers zullen de HTTP IRI gaan gebruiken en anderen zullen de HTTPS IRI, mogelijk ook door elkaar heen, gaan gebruiken. Dit kan voor verwarring bij de gebruiker leiden. De vraag \"Welke IRI moet ik gebruiken?\" zal frequent en helder beantwoord moeten worden. Hogere onderhoudskosten Het gebruik van 2 IRIs voor hetzelfde object betekent dat in BGT bevragingen en in BGT applicaties rekening moet worden gehouden met het mogelijke gebruik van 2 soorten IRIs. Bijvoorbeeld een software onderdeel dat op basis van een BGT object identificatie een ander gegeven teruggeeft moet zowel de HTTP IRI alsook de HTTPS IRI kunnen accepteren en verwerken. Per individuele bevraging is dit een relatief kleine investering, echter keert deze investering op veel plekken terug. Daarnaast moeten ontwikkelaars zich blijvend bewust zijn van het mogelijke gebruik van 2 soorten IRIs. Over de tijd heen moet daarom rekening gehouden worden met hogere beheerskosten wanneer voor het gebruik van 2 IRIs gekozen wordt. Hogere server belasting Wanneer een HTTP IRI bevraagt wordt moet de server doorverwijzen naar de corresponderende HTTPS IRI. Dit betekent dat gebruikers twee bevragingen in plaats van \u00e9\u00e9n bevraging moeten uitvoeren. Daarnaast moet de server twee bevragingen in plaats van \u00e9\u00e9n bevraging afhandelen. Merk op dat deze extra server belasting in de praktijk zal meevallen, en mogelijk slechts enkele procent extra performance zal kosten. Tegelijkertijd is het niet ondersteunen van HTTP IRIs een eenvoudige manier om een kleine besparing op toekomstige server capaciteit te realiseren.","title":"{schema}"},{"location":"IRI/#domein","text":"Voor het domein volgen we de manier waarop de bestaande linked data basisregistraties door KDP worden ontsloten. Hierbij wordt tevens de Aanpak gevolgd, waarin wordt gewaarschuwd voor het gebruik van een organisatienaam als onderdeel van het domain. (Organisatienamen veranderen namelijk regelmatig.) Dit betekent dat het volgende domein voor de linked data BGT wordt gebruikt: bgt.basisregistraties.overheid.nl Dat is in lijn met de volgende bestaande IRI prefixen die door KDP worden aangeboden: bag.basisregistraties.overheid.nl brt.basisregistraties.overheid.nl","title":"{domein}"},{"location":"IRI/#type","text":"We stellen voor om de volgende types te gebruiken: def/ voor definities; dat wil zeggen BGT klassen en BGT eigenschappen. id/ voor instanties; dat wil zeggen individuele BGT objecten. In de Aanzet wordt naast def/ en id/ type, ook het gebruik van het doc/ type voorgesteld. Het gebruik van het doc/ type hangt samen met een onderscheiding die traditioneel in linked data gemaakt wordt tussen een object (aangeduid met type id/ ) en een pagina over dat object (aangeduid met type doc/ ). Het idee is dat op het moment dat de id/ IRI in een web browser gebruikt wordt een doorverwijzing gevolgd wordt naar de corresponderende doc/ IRI. Merk op dat voor def/ IRIs een dergelijke doorverwijzing niet wordt voorgesteld, alhoewel het onderscheid tussen een concept en een pagina over dat concept theoretisch gezien ook gemaakt zou kunnen worden. Voor de linked data BGT wordt geen gebruik gemaakt van deze traditionele doorverwijzingspraktijk, omdat het gebruik van id/ en doc/ in de praktijk de volgende problemen veroorzaakt: Verwarring bij de gebruiker Wanneer gebruik gemaakt wordt van een id/ IRI, wordt deze binnen de web browser automatisch vervangen door de corresponderende doc/ IRI. Dit betekent dat de gebruiker niet zomaar de URL in de web browser kan gebruiken om het opgezochte object mee te identificeren. Een gebruiker moet zich er van bewust zijn dat er een onderscheid wordt gemaakt tussen een object (type id/ ) en een pagina over dat object in de web browser (type doc/ ). Omdat dit onderscheid nergens anders op het web gemaakt wordt kan dit tot verwarring leiden bij de gebruiker. Trager gebruik Wanneer wordt doorverwezen van id/ naar doc/ IRIs duurt een bevraging van een IRI in de web browser langer dan wanneer de id/ IRI direct toegang verschaft tot het opgevraagde web document. Dit is een relatief kleine vertraging van enkele tientallen procenten. Echter, het niet implementeren van de doc/ doorverwijzing is een eenvoudige manier om alle bevragingen van IRIs een klein beetje sneller te maken. Hogere onderhoudskosten Wanneer wordt doorverwezen van id/ naar doc/ IRIs moet extra code onderhouden worden: er moet immers een doorverwijzing worden onderhouden van de ene naar de andere IRI. De doorverwijzingen in sectie 2.1 , van HTTP naar HTTPS IRIs, is een standaard operatie die door bestaande software componenten ondersteund wordt. Dat is niet het geval voor de doorverwijzing van id/ naar doc/ IRIs. Deze laatste vereist in veel gevallen code die geschreven en onderhouden moet worden. Hogere server belasting Evenals bij de doorverwijzing van HTTP naar HTTPS IRI (sectie 2.1 ), resulteren doorverwijzingen van id/ naar doc/ IRIs tot een verdubbeling van het aantal bevragingen dat door de server moet worden afgehandeld. Ook dit is weer een performance penalty van ten minste enkele procenten.","title":"{type}"},{"location":"IRI/#subtype","text":"Het subtype wordt eveneens gebruikt in combinatie met het id/ type om het soort instantie weer te gegeven. Bijvoorbeeld, voor een pand wordt het subtype pand/ gebruikt, waardoor het pand met /id/pand/ begint. Hierin volgt de linked data BGT de Aanzet en de KDP methode. Omdat het aantal instanties in de BGT er groot is (vele miljoenen) en de referentie vaak betekenisloos is (een arbitraire code), biedt het subtype enige houvast voor het soort van instantie waar we mee te maken hebben. De subtypes zorgen ervoor dat de grote ruimte van instantie IRIs wordt opgedeeld in betekenisvolle categorie\u00ebn. Hierbij is het wel van belang dat iedere id/ IRI precies \u00e9\u00e9n subtype heeft, die bovendien eenvoudig vast te stellen is. Voor de BGT garanderen we dat voor iedere instantie IRI \u00e9\u00e9n directe hoofdklasse wordt toegekend. Bijvoorbeeld, ieder pand is een instantie van klasse bgt:Pand , ieder onbegroeid terreindeel is een instantie van klasse bgt:OnbegroeidTerreindeel , etc. Het {subtype} wordt vervolgens gevormd door de referentie van de klasse te nemen, met een kleine beginletter. Bijvoorbeeld /id/pand/ voor instanties van klasse bgt:Pand , en /id/onbegroeidTerreindeel/ voor instanties van klasse bgt:OnbegroeidTerreindeel . Voor het def/ type wordt geen subtype gebruikt. De belangrijkste redenen hiervoor zijn dat (1) er veel minder definitie IRIs zijn (enkele tientallen), en (2) de referentie namen voor definitie IRIs vaak al betekenisvol zijn (bijvoorbeeld bgt:Pand of bgt:bestaand ).","title":"{subtype}"},{"location":"IRI/#referentie","text":"Voor definities wordt gebruik gemaakt van een betekenisvolle naam als referentie. Deze naam moet aan bepaalde syntactische eisen voldoen waardoor deze binnen een IRI gebruikt kan worden. De referentie naam voor een begroeid terreindeel is bijvoorbeeld BegroeidTerreindeel aan elkaar geschreven, omdat spaties in IRIs niet zijn toegestaan. Daarnaast wordt de referentie voor een eigenschap traditioneel met een kleine letter geschreven, terwijl de referentie voor een klasse traditioneel met een grote letter geschreven wordt. Deze conventie is nuttig omdat er soms een eigenschap is die dezelfde naam heeft als de klasse waar deze eigenschap naar verwijst. Bijvoorbeeld, het NEN 3610 vocabulaire bevat klasse nen3610:Identificatie en een eigenschap nen3610:identificatie . Voorbeelden van referenties voor definitie IRIs in de BGT zijn Wegdeel voor een klasse, en relatieveHoogteligging voor een eigenschap. Voor instanties wordt gebruik gemaakt van een betekenisloze identificatiecode. Dit wordt specifiek voor instanties gedaan omdat deze vaak geen betekenisvolle naam hebben. In de context van de BGT is het bijvoorbeeld niet aannemelijk dat ieder begroeid terreindeel of ieder individueel pand een betekenisvolle naam heeft. Om deze instantie IRIs toch nog enigszins te kunnen duiden worden betekenisvolle subtypes gebruikt (zie sectie 2.4 ).","title":"{referentie}"},{"location":"IRI/#scheidingsteken","text":"Tussen elke twee linked data IRI componenten komt een scheidingsteken voor: - Het scheidingsteken tussen het {schema} en het {domein} is de drie-karakter sequentie :// . - Het scheidingsteken tussen de andere componenten is de voorwaartse slash ( / ). In de Aanzet wordt een alternatieve aanpak beschreven voor het laatste scheidingsteken: het teken dat direct voor de {referentie} staat. Hiervoor kan in plaats van een voorwaartse slash ( / ) namelijk een hekje ( # ) gebruikt worden. Dit alternatieve scheidingsteken kan uitsluitend gebruikt worden voor IRIs die definities aangeven (de def/ IRIs). In de KDP aanpak wordt voor definities gebruik gemaakt van dit alternatieve scheidingsteken. Het verschil tussen een / en een # teken heeft een belangrijke functionele consequentie: - Wanneer het laatste scheidingsteken een voorwaartse slash ( / ) is, wordt elke individuele IRI apart opgevraagd. Wanneer een klasse of een eigenschap wordt op gevraagd wordt alleen die ene klasse of die ene eigenschap door de server teruggegeven. - Wanneer het laatste scheidingsteken een hekje ( # ) is, wordt alle data in \u00e9\u00e9n keer opgevraagd. Dit is ook de reden waarom het hekje alleen wordt voorgesteld voor definitie IRIs, omdat het aantal definitie IRIs voor veel datasets klein is (in tegenstelling tot het aantal instantie IRIs). Wanneer een klasse of een eigenschap wordt opgevraagd worden alle klassen en alle eigenschappen teruggegeven. Voor de linked data BGT wordt als laatste scheidingsteken de voorwaartse slash ( / ) gebruikt, om de volgende redenen: Verwarring bij de gebruiker Bij het bevragen van een instantie IRI is de gebruiker gewend om de beschrijving van die ene specifieke instantie terug te krijgen. Wanneer een gebruiker een definitie IRI bevraagt krijgt deze ineens meerdere definities terug. Dit kan verwarrend zijn voor gebruikers die niet bekend zijn met linked data. Daarnaast kan het voor de gebruiker enige moeite kosten om uit de totaliteit van teruggegeven definities de ene definitie op te halen die ook daadwerkelijk bevraagd is. Wanneer de gebruiker goede linked data libraries gebruikt om de gegevens te verwerken is deze extra moeite echter relatief beperkt, omdat goede linked data libraries ondersteuning bieden voor het uitfilteren van de opgevraagde informatie. Trager in het gebruik Wanneer alle definities worden doorverwezen wanneer \u00e9\u00e9n definitie wordt opgevraagd betekent dit dat er meer gegevens moeten worden verstuurd. Hierbij speelt mee dat het model van de BGT \u2015 zeker met inachtneming van de IMGeo uitbreiding \u2015 omvangrijker is dan de meeste modellen die door het KDP worden ontsloten. Dit betekent dat bij gebruikmaking van een hash ( # ), voor elke bevraging van 1 definitie IRI de teruggegeven hoeveelheid 100 tot 1,000 keer groter zal zijn dan met de voorwaartse slash ( / ) methode. Wanneer de gebruiker over een minder snelle Internet verbinding beschikt kan deze vermenigvuldiging van de teruggegeven gegevensgrootte voor de gebruiker merkbaar trager zijn. Bij een snellere Internet verbinding zal het verschil minder of geheel niet merkbaar zijn. Tegelijkertijd is de keuze voor de voorwaartse slash aanpak een eenvoudige manier om het benodigde gegevensverkeer te verkleinen.","title":"Scheidingsteken"},{"location":"IRI/#conclusie","text":"Op basis van de overwegingen in de voorgaande subsecties komen we tot de volgende IRI strategie voor de linked data BGT: https://bgt.basisregistraties.overheid.nl/def/{eigenschap} https://bgt.basisregistraties.overheid.nl/def/{Klasse} https://bgt.basisregistraties.overheid.nl/id/{subtype}/{referentie} Aan de hand van bovenstaande IRI templates kunnen concrete IRIs er als volgt uit komen te zien: De mogelijke IRI voor de BGT klasse die wegdelen aanduidt: https://bgt.basisregistraties.overheid.nl/def/Wegdeel De mogelijke IRI voor de BGT eigenschap die de relatieve hoogteligging van geospati\u00eble objecten aanduidt: https://bgt.basisregistraties.overheid.nl/def/relatieveHoogteligging De mogelijke IRI voor een specifiek BGT wegdeel (instantie): https://bgt.basisregistraties.overheid.nl/id/wegdeel/{referentie}","title":"Conclusie"},{"location":"IRI/#afwijking-van-de-aanzet","text":"Zoals in de voorgaande subsecties besproken wijkt de IRI strategie voor de linked data BGT op de volgende punten af van de Aanzet en de KDP aanpak: De BGT maakt gebruik van HTTPS IRIs. De BGT verwijst niet door van id/ IRIs naar doc/ IRIs. De BGT gebruikt de voorwaartse slash (/`) als laatste scheidingsteken.","title":"Afwijking van de Aanzet"},{"location":"IRI/#menselijk-gebruik-en-machine-gebruik","text":"Voor al deze IRIs zal content negotiation ondersteund worden. Dit betekent dat voor menselijk gebruik een HTML pagina met menselijk leesbare inhoud zal worden getoond. Deze HTML pagina wordt automatisch geserveerd door web browsers, die op de achtergrond om content van het Media Type text/html vragen. Voor machine gebruik zal een RDF bestand worden uitgegeven. Dit machine formaat kan worden opgevraagd door een ander Media Type op te geven. Bijvoorbeeld application/n-triples geeft de beschrijving van de bevraagde IRI in het N-Triples formaat terug.","title":"Menselijk gebruik en machine gebruik"},{"location":"KnowledgeGraph/","text":"Kennisgraaf Wanneer we (basis-)registraties beschikbaar stellen als Linked Data is er nog steeds een grote hoeveelheid domeinkennis nodig om de data goed te kunnen gebruiken. Zo kunnen bijvoorbeeld alleen BAG en BGT specialisten die data en het datamodel goed kennen gemakkelijk interacteren met de data. In de praktijk zijn veel gebruikers ge\u00efnteresseerd in data over hun huis, wijk of leefomgeving. Om die reden slaan we de complexe basisregistraties en andere overheidsdatasets plat tot een Knowledge Graph voor een bepaald doeleinde. Hierbij is het mogelijk om bepaalde versimpelingen toe te passen, zoals het abstraheren van historie in de registraties. 1. Datamodel van de Kennisgraaf In de praktijk praten gebruikers vaak niet in termen als nummeraanduiding , verblijfsobject of bestuurlijk gebied, maar over adressen, gebouwen en wijken. Gebruikers denken in termen van hun fysieke leefomgeving (Figuur 1). Figuur 1. Een visuele weergave van de fysieke werkelijkheid zoals veel gebruikers deze vanuit hun dagelijks leven ervaren. 2. Schema.org model In het maken van een gebruiksvriendelijk datamodel kan ervoor gekozen worden om termen uit de basisregistraties te hergebruiken (zoals Pand of Perceel). Er kan ook voor gekozen worden om de data naar een nog meer generiek en open standaard te brengen, zoals Schema.org . Deze standaard is ge\u00efntrodueerd door Google en behelst een manier van data omschrijving waarmee moderne zoekmachines goed aan de slag kunnen. Objecten, pagina's en websites die met deze standaard zijn omschreven zijn dan ook over het algemeen goed vindbaar op het web. In Figuur 2 wordt een voorbeeld van een datamodel in Schema.org gegeven. Figuur 2. Een voorbeeld van een datamodel dat gebruik maakt van Schema.org. Merk op dat dit model dicht in de buurt zit van de fysieke werkelijk zoals de meeste mensen deze ervaren (\"stad\", \"plaats\", \"adres\"). 2.1 Schema.org vertaling Tabel 1 geeft een overzicht van de directe transformaties die in de KG zijn opgenomen. Waar (inclusief) is aangegeven, betekent dit dat deze transformatie een aantal bronconcepten omvat in \u00e9\u00e9n KKG-concept of omgekeerd. Kennisgraaf gegeven Overheids Bron gegeven sdo:AdministrativeArea BAG woonplaats BRT buurt BGT openbare ruimte BGT stadsdeel BGT wijk CBS buurt sdo:addressLocality BAG woonplaats sdo:Bridge BGT brug sdo:dateCreated BAG Openbare ruimte: datum aangemaakt BAG bouwjaar sdo:floorsize BAG oppervlakte sdo:geo BAG geometrie BRT puntgeometrie BRT vlakgeometrie BGT geometrie sdo:latitude BAG Verblijfsobject puntgeometrie BAG openbare ruimte puntgeometrie BRT wegdeel puntgeometrie BRT waterdeel puntgeometrie sdo:longitude BAG Verblijfsobject puntgeometrie BAG openbare ruimte puntgeometrie BRT waterdeel puntgeometrie BRT wegdeel puntgeometrie sdo:name BGT Bronhouder naam RCE Rijksmonument naam rdfs:label skos:prefLabel sdo:Place BAG pand BGT pand BGT begroeid terreindeel BGT brug BGT onbegroeid terreindeel BGT waterdeel BGT wegdeel BRT gebouw BRT terrein BRT waterdeel BRT wegdeel RCE Rijksmonument BAG Verblijfsobject sdo:polygon BAG pand vlakgeometrie BAG woonplaats vlakgeometrie BGT begroeid terreindeel vlakgeometrie BGT brug vlakgeometrie BGT buurt vlakgeometrie BGT pand vlakgeometrie BGT onbegroeid terreindeel vlakgeometrie BGT openbare ruimte vlakgeometrie BGT stadsdeel vlakgeometrie BGT wegdeel vlakgeometrie BGT waterdeel vlakgeometrie BGT wateschap vlakgeometrie BGT wijk vlakgeometrie BRT gebouw vlakgeometrie BRT terreindeel vlakgeometrie BRT waterdeel vlakgeometrie BRT wegdeel vlakgeometrie RCE Rijksmonument vlakgeometrie CBS wijk vlakgeometrie sdo:postalCode BAG postcode sdo:streetAddress (samenvoeging van:) BAG Openbare ruimte naam BAG huisnummer BAG huisnummertoevoeging BAG huisletter Tabel 1. Vertaling van Schema.org naar Overheids Bronnen. 2.2 Bevindingen Bevindingen bij het eerste gebruik van een op Schema.org gebaseerde kennisgraaf: Door de mapping naar Schema.org worden we uitgenodigd om informatie simpeler te ontsluiten. Data wordt in termen van de alledaagse wereld ontsloten, begrijpelijk voor de niet-specialistische gebruiker. Doordat Schema.org alledaagse begrippen zoals Adres, Plaats, Huis hanteert is de data eenvoudiger te bevragen. Doordat verscheidene begrippen soms worden 'plat geslagen' in Schema.org wordt de structuur eenvoudiger (bijvoorbeeld Nummeraanduiding en OpenbareRuimte wordt PostAdres). Sommige voor de hand liggende begrippen zitten (nog) niet in Schema.org. Brug bijvoorbeeld wel, maar Weg niet. Schema.org is in het Engels. Het is soms nog lastig om de juiste Nederlandse vertaling te vinden. De koppeling tussen Schema.org en de bronsystemen is eenvoudig te leggen (prov:wasDerivedFrom voor instanties; sdo:additionalType voor definities). Een toekomstige iteratie van de knowledge graph o.b.v. Schema.org moet het evenwicht zien te vinden tusen 'breedte en diepte' van de ontologie: de rijkdom van de onderliggende data ontsluiten, maar op een manier die geen domeinkennis vereist. Doordat meerdere geo-objecten nu als 1 object ontsloten worden heeft de gebruiker meer begeleiding nodig bij het kiezen van dubbel voorkomende eigenschappen (m.n. geometrie). Voor een aantal object typen is maar weinig informatie bekend (bijvoorbeeld een Bak). Je hebt dan alleen de geometrie en de bronhouder. Het is niet duidelijk of deze informatie nuttig is voor veel gebruikers. Een aantal object typen worden op een te laag niveau ontsloten in de bron (bijvoorbeeld Wegdeel, Waterdeele). Om voor de gebruiker nuttig te zijn zouden deze gegroepeerd ontsloten moeten worden. Bijvoorbeeld 1 water i.p.v. 100 losse waterdelen. 3. Data Lineage Essentieel uitgangspunt bij het transformeren van de data naar de Knowledge Graph is dat de data lineage herleidbaar blijft. Attributen en objecten komen uit een bepaalde dataset en een bepaald gegeven binnen deze dataset. Deze lineage houden we traceerbaar middels de prov standaard zoals gestandaardiseerd door het W3C. Een specifiek voorbeeld van hoe data lineage automatisch wordt bijgehouden is te vinden in Tabelen 3 tot en met 9. Dit betreft de cellen met waarde \"wasDerivedFrom\". Deze zelfde relatie is ook te vinden in de implementatie bevraging die aan het einde van deze pagina is opgenomen. 4. Van Overheids Bron tot Kadaster Kennisgraaf (KGG) Om technisch tot een invulling te komen van een Knowledge Graph bovenop onze registratieve Linked Data, maken wij gebruik van zgn. LD Views. LD Views zijn geautomatiseerde afbeeldingen van registratieve datasets naar een ge\u00efntegreerde kennisgraaf. Met deze aanpak transformeren we de registratieve laag naar een additionele laag dat gebruik maakt van bovengenoemd datamodel. Schema.org Place ( sdo:Place ) is het centrale element in de kennisgrafiek en als zodanig is elke LD View die in de kennisgrafiek is geconstrueerd een specifiek type sdo:Place . Momenteel zijn er verschillende soorten plaatsen in de kennisgrafiek, waaronder: Panden, Gebieden, Waterdelen, Wegdelen, Terreindelen en Overige. Elk van deze bestaat uit een of meer LD Views. Een technische bespreking van wat deze LD View zijn en hoe ze concreet worden geconstrueerd, vindt u hier . Om beter weer te kunnen geven hoe LD Views en hun corresponderende sdo:Place categorie inhoudelijk zijn opgebouwd introduceren we het gedetailleerde tabel formaat in Tabel 2: Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap Objecttype eigenschapA BronObjecttype bronEigenschap eigenschapB [[Klasse]] eigenschapC \"waarde\" Tabel 2. Overzicht van het gedetailleerde tabel formaat waarmee vertalingen in de Kennisgraaf kunnen worden beschreven. De dikgedrukte rijen in dit tabel formaat moeten als volgt gelezen worden: Rij 1 geeft aan dat de linker twee kolommen gegevens in de Kadaster Kennisgraaf (KKG) beschrijven. Deze rij geeft ook dat dat de rechter twee kolommen gegevens in een Kadastrale bron aanduiden, waar de gegevens in de kennisgraaf op gebaseerd worden. Rij 2 geeft aan dat zowel in de kennisgraaf alsook in de bron een onderscheid wordt gemaakt tussen objecttype en eigenschap. De niet-dikgedrukte rijen in dit tabel formaat moeten als volgt gelezen worden: Rij 1-3 geven aan dat ze objecten van hetzelfde objecttype in de kennisgraaf beschrijven. Rij 1 legt een specifieke afbeelding (View) vast van een Bronklasse/bronEigenschap combinatie, naar een Klase/eigenschap combinatie in de kennisgraaf. De meeste afbeeldingen (Views) zijn van dit karakter. Rij 2 legt een ander soort afbeelding (View) vast: eigenschap2 in de kennisgraaf is niet direct gebaseed op 1 gegeven in een bron, maar vormt een link naar een ander objecttype in de kennisgraaf. Dit andere objecttype komt elders in dezelfde tabel voor. Rij 3 legt weer een ander soort afbeelding (Viev) vast: eigenschap3 in de kennisgraaf heeft een constante waarde. Deze waarde is niet afkomstig uit een specifieke locatie in de bron, maar maakt onderdeel uit van de LD View. 4.1 Van Gebouw/Pand naar Schema.org Place ( visuele weergave ) Tabel 3 geeft de gedetailleerde vertaling voor panden weer. Hier wordt een Schema.org Schema.org Place gebaseerd op BAG Pand, BGT pand en BRT gebouw. Een interactieve visualisatie is hier beschikbaar. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap AdministrativeArea containsPlace Verblijfsobject identificatie GeoCoordinates latitude Verblijfsobject geometrie longitude Verblijfsobject geometrie name \"BAG puntgeometrie\" wasDerivedFrom Verblijfsobject identificatie GeoShape name \"BAG vlakgeometrie\" polygon BAG Pand geometrie wasDerivedFrom BAG Pand identificatie GeoShape name \"BRT geometrie\" polygon BRT Gebouw geometrie wasDerivedFrom BRT Gebouw identificatie GeoShape name \"BGT maaiveld geometrie\" polygon BGT Pand geometrie wasDerivedFrom BGT Pand identificatie Place additionalType \" BAG Pand \" Verblijfsobject gebruiksdoel \" BRT Gebouw \" BRT Gebouw typeGebouw \" BGT Pand \" address [[ PostalAddress ]] containedInPlace [[ AdministrativeArea ]] dateCreated BAG Pand bouwjaar floorSize Verblijfsobject oppervlakte geo [[ GeoCoordinates ]] [[ GeoShape ]] name Nummeraanduiding postcode OpenbareRuimte naam Nummeraanduiding huisnummer huisnummertoevoeging huisletter Woonplaats naam wasDerivedFrom BAG Pand identificatie Verblijfsobject identificatie BRT Gebouw identificatie PostalAddress addressCountry \"Nederland\" addressLocality Woonplaats naam name Nummeraanduiding postcode OpenbareRuimte naam Nummeraanduiding huisnummer huisnummertoevoeging huisletter Woonplaats naam postalCode Nummeraanduiding postcode streetAddress OpenbareRuimte naam Nummeraanduiding huisnummer huisnummertoevoeging huisletter wasDerivedFrom Nummeraanduiding identificatie Tabel 3. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om BAG panden, BRT gebouwen en BGT panden om te zetten. Naast de transformaties in Tabel 3 worden ook nog de volgende filters toegepast. Nummeraanduiding Nummeraanduidingen waarvan de registratie is afgesloten worden niet meegenomen in de LD View. Nummeraanduidngen met status naamgeving ingetrokken worden niet meegenomen in de LD View. Openbare ruimte Openbare ruimtes waarvan de registratie is afgesloten worden niet meegenomen in de LD View. Openbare ruimtes met status naamgeving ingetrokken worden niet meegenomen in de LD View. Verblijfsobject Verblijfsobjecten met status niet geraliseerd verblijfsobject , verblijfsobject ingetrokken of verblijfsobject ten onrechte opgevoerd worden niet meegenomen in de LD View. Verblijfsobjecten waarvan de registratie is afgesloten worden niet meegenomen in de LD View. Pand Panden met status niet gerealiseerd pand , pand gesloopt of pand ten onrechte opgevoerd worden niet meegenomen in de LD View. Panden aarvan de registratie is afgesloten worden niet meegenomen in de LD View. 4.2 Van administratief gebieden / registratief gebied / woonplaats / buurt / wijk / gemeente (BAG, BGT, BRT, CBS, RCE) naar Schema.org Place ( visuele weergave ) Tabel 4 geeft de inhoudelijke afbeelding (View) voor gebieden weer. Hier bestaat de sdo:Place categorie Gebieden uit de BAG Woonplaats, een aantal BGT gebieden, Openbare Ruimtes (BGT en BAG) en Wijken en Buurten. Een interactieve visualisatie van deze sdo:Place categorie is hier beschikbaar. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap AdministrativeArea containsPlace BAG Openbare Ruimte identificatie Verblijfsobject identificatie wasDerivedFrom BAG Woonplaats identificatie BGT Buurt identificatie BGT Openbare Ruimte identificatie BGT Stadsdeel identificatie BGT Wijk identificatie CBS Buurt identificatie additionalType Woonplaats BGT Buurt identificatie BGT Openbare Ruimte identificatie BGT Stadsdeel identificatie BGT Wijk identificatie \" CBS Buurt \" geo [[ GeoShape ]] [[ GeoCoordinates ]] name Woonplaats naam BGT Buurt naam BGT Openbare Ruimte naam BGT Stadsdeel naam BGT Wijk naam CBS Buurt naam identifier CBS Buurt identificatie Place wasDerivedFrom BAG Openbare Ruimte identificatie additionalType BAG Openbare Ruimte type dateCreated BAG Openbare Ruimte aangemaakt geo [[ GeoCoordinates ]] GeoCoordinates wasDerivedFrom BGT Openbare Ruimte latitude BGT Openbare Ruimte geometrie longitude BGT Openbare Ruimte geometrie name [['BGT puntgeometrie']] GeoShape wasDerivedFrom Woonplaats identificatie BGT Buurt identificatie BGT Openbare Ruimte identificatie BGT Stadsdeel identificatie BGT Wijk identificatie CBS Buurt identificatie name \"BAG vlakgeometrie\" \"BGT geometrie\" \"CBS geometrie\" polygon BAG Woonplaats geometrie BGT Buurt geometrie BGT Openbare Ruimte geometrie BGT Stadsdeel geometrie BGT Wijk geometrie CBS Buurt geometrie Tabel 4. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om BAG woonplaatsen, bgt gebieden, openbare ruimtes en wijken en buurten om te zetten. Naast de transformaties in Tabel 4 worden ook de volgende filters toegepast. BAG Woonplaats Woonplaatsen met status woonplaats ingetrokken worden niet meegenomen in de LD View. Openbare ruimte Openbare ruimtes waarvan de registratie is afgesloten worden niet meegenomen in de LD View. Openbare ruimtes met status naamgeving ingetrokken worden niet meegenomen in de LD View. 4.3 Van terreindeel (BGT, BRT) naar Schema.org Place ( visuele weergave ) Tabel 5 geeft de inhoudelijke afbeelding (View) voor gebieden weer. Hier bestaat de sdo:Place categorie Terreindelen uit de BGT (Begroeid en onbegroeid terreindeel) en BRT. Een interactieve visualisatie van deze sdo:Place categorie is hier beschikbaar. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap Place wasDerivedFrom BGT Begroeid Terreindeel identificatie BGT Onbegroeid Terreindeel identificatie BRT Terrein identificatie additionalType \" BGT Begroeid Terreindeel \" BGT Begroeid Terreindeel functie fysiek voorkomen plus functie plus fysiek voorkomen plus type type \" BGT Onbegroeid Terreindeel \" BGT Onbegroeid Terreindeel fysiek voorkomen plus fysiek voorkomen \" BRT Terrein \" BRT Terrein fysiek voorkomen type voorkomen geo [[ GeoShape ]] name BGT Begroeid Terreindeel \"Een begroeid terreindeel van bronhouder: bronhouder naam \" BGT Onbegroeid Terreindeel \"Een begroeid terreindeel van bronhouder: bronhouder naam \" BRT Terrein naam GeoShape wasDerivedFrom BGT Begroeid Terreindeel identificatie BGT Onbegroeid Terreindeel identificatie BRT Terrein identificatie name \"BGT geometrie\" \"BRT geometrie\" polygon BGT Begroeid Terreindeel geometrie BGT Onbegroeid Terreindeel geometrie BRT Terrein geometrie Tabel 5. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om BRT en BGT terreindelen om te zetten. 4.4 Van waterdeel (BGT, BRT) naar Schema.org Place ( visuele weergave ) Tabel 6 geeft de inhoudelijke afbeelding (View) voor gebieden weer. Hier bestaat de sdo:Place categorie Waterdelen uit de BGT en de BRT. Een interactieve visualisatie van deze sdo:Place categorie is hier beschikbaar. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap Place wasDerivedFrom BGT Waterdeel identificatie BRT Waterdeel identificatie additionalType \" BGT Waterdeel \" BGT Waterdeel plus type type \" BRT Waterdeel \" BRT Waterdeel functie type geo [[ GeoShape ]] [[ GeoCoordinates ]] name BGT Waterdeel \"Een waterdeel van bronhouder: bronhouder naam \" BRT Waterdeel naam GeoShape wasDerivedFrom BGT Waterdeel identificatie BRT Waterdeel identificatie name \"BGT geometrie\" \"BRT geometrie\" polygon BGT Waterdeel geometrie BRT Waterdeel geometrie GeoCoordinates wasDerivedFrom BRT Waterdeel identificatie name \"BRT geometrie\" latitude BRT Waterdeel geometrie longitude BRT Waterdeel geometrie Tabel 6. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om BGT en BRT waterdelen om te zetten. 4.5 Van wegdeel (BGT, BRT) naar Schema.org Place ( visuele weergave ) Tabel 7 geeft de inhoudelijke afbeelding (View) voor gebieden weer. Hier bestaat de sdo:Place categorie Wegdelen uit de BGT en de BRT. Een interactieve visualisatie van deze sdo:Place categorie is hier beschikbaar. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap Place wasDerivedFrom BGT Wegdeel identificatie BRT Wegdeel identificatie additionalType \" BGT Wegdeel \" BGT Wegdeel functie fysiek voorkomen plus functie plus fysiek voorkomen \" BRT Wegdeel \" BRT Wegdeel fysiek voorkomen hoofdverkeersgebruik type infrastructuur type weg verhardingstype geo [[ GeoShape ]] [[ GeoCoordinates ]] name BGT Wegdeel \"Een wegdeel van bronhouder: bronhouder naam \" BRT Wegdeel naam GeoShape wasDerivedFrom BGT Wegdeel identificatie BRT Wegdeel identificatie name \"BGT geometrie\" \"BRT geometrie\" polygon BGT Wegdeel geometrie BRT Wegdeel geometrie GeoCoordinates wasDerivedFrom BRT Wegdeel identificatie name \"BRT geometrie\" latitude BRT Wegdeel geometrie longitude BRT Wegdeel geometrie Tabel 7. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om BGT en BRT wegdelen om te zetten. 4.6 Van Monument (RCE) naar Schema.org Place Tabel 8 geeft de inhoudelijke afbeelding (View) voor gebieden weer. Hier bestaat de sdo:Place categorie RCE Monumenten. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap Place wasDerivedFrom RCE Monument rijksmonument nummer additionalType \" RCE Monument \" geo [[ GeoShape ]] name RCE Monument naam GeoShape wasDerivedFrom RCE Monument geometrie name \"RCE geometrie\" polygon RCE Monument geometrie as WKT Tabel 8. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om RCE Monumenten om te zetten. 4.7 Van Brug (BGT) naar Schema.org Bridge Tabel 9 geeft de inhoudelijke afbeelding (View) voor bruggen weer. Hiervoor wordt het Schema.org objecttype sdo:Bridge gebruikt. Schema.org Bridge is een subtype van Schema.org Place. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap Bridge wasDerivedFrom BGT Brug identificatie additionalType type overbruggingsdeel geo [[ GeoShape ]] name BGT Brug \"Een brugdeel van bronhouder: bronhouder naam \" GeoShape wasDerivedFrom BGT Brug geometrie name \"BGT geometrie\" polygon BGT Brug geometrie Tabel 9. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om BGT bruggen om te zetten.","title":"Knowledge Graph"},{"location":"KnowledgeGraph/#kennisgraaf","text":"Wanneer we (basis-)registraties beschikbaar stellen als Linked Data is er nog steeds een grote hoeveelheid domeinkennis nodig om de data goed te kunnen gebruiken. Zo kunnen bijvoorbeeld alleen BAG en BGT specialisten die data en het datamodel goed kennen gemakkelijk interacteren met de data. In de praktijk zijn veel gebruikers ge\u00efnteresseerd in data over hun huis, wijk of leefomgeving. Om die reden slaan we de complexe basisregistraties en andere overheidsdatasets plat tot een Knowledge Graph voor een bepaald doeleinde. Hierbij is het mogelijk om bepaalde versimpelingen toe te passen, zoals het abstraheren van historie in de registraties.","title":"Kennisgraaf"},{"location":"KnowledgeGraph/#1-datamodel-van-de-kennisgraaf","text":"In de praktijk praten gebruikers vaak niet in termen als nummeraanduiding , verblijfsobject of bestuurlijk gebied, maar over adressen, gebouwen en wijken. Gebruikers denken in termen van hun fysieke leefomgeving (Figuur 1). Figuur 1. Een visuele weergave van de fysieke werkelijkheid zoals veel gebruikers deze vanuit hun dagelijks leven ervaren.","title":"1. Datamodel van de Kennisgraaf"},{"location":"KnowledgeGraph/#2-schemaorg-model","text":"In het maken van een gebruiksvriendelijk datamodel kan ervoor gekozen worden om termen uit de basisregistraties te hergebruiken (zoals Pand of Perceel). Er kan ook voor gekozen worden om de data naar een nog meer generiek en open standaard te brengen, zoals Schema.org . Deze standaard is ge\u00efntrodueerd door Google en behelst een manier van data omschrijving waarmee moderne zoekmachines goed aan de slag kunnen. Objecten, pagina's en websites die met deze standaard zijn omschreven zijn dan ook over het algemeen goed vindbaar op het web. In Figuur 2 wordt een voorbeeld van een datamodel in Schema.org gegeven. Figuur 2. Een voorbeeld van een datamodel dat gebruik maakt van Schema.org. Merk op dat dit model dicht in de buurt zit van de fysieke werkelijk zoals de meeste mensen deze ervaren (\"stad\", \"plaats\", \"adres\").","title":"2. Schema.org model"},{"location":"KnowledgeGraph/#21-schemaorg-vertaling","text":"Tabel 1 geeft een overzicht van de directe transformaties die in de KG zijn opgenomen. Waar (inclusief) is aangegeven, betekent dit dat deze transformatie een aantal bronconcepten omvat in \u00e9\u00e9n KKG-concept of omgekeerd. Kennisgraaf gegeven Overheids Bron gegeven sdo:AdministrativeArea BAG woonplaats BRT buurt BGT openbare ruimte BGT stadsdeel BGT wijk CBS buurt sdo:addressLocality BAG woonplaats sdo:Bridge BGT brug sdo:dateCreated BAG Openbare ruimte: datum aangemaakt BAG bouwjaar sdo:floorsize BAG oppervlakte sdo:geo BAG geometrie BRT puntgeometrie BRT vlakgeometrie BGT geometrie sdo:latitude BAG Verblijfsobject puntgeometrie BAG openbare ruimte puntgeometrie BRT wegdeel puntgeometrie BRT waterdeel puntgeometrie sdo:longitude BAG Verblijfsobject puntgeometrie BAG openbare ruimte puntgeometrie BRT waterdeel puntgeometrie BRT wegdeel puntgeometrie sdo:name BGT Bronhouder naam RCE Rijksmonument naam rdfs:label skos:prefLabel sdo:Place BAG pand BGT pand BGT begroeid terreindeel BGT brug BGT onbegroeid terreindeel BGT waterdeel BGT wegdeel BRT gebouw BRT terrein BRT waterdeel BRT wegdeel RCE Rijksmonument BAG Verblijfsobject sdo:polygon BAG pand vlakgeometrie BAG woonplaats vlakgeometrie BGT begroeid terreindeel vlakgeometrie BGT brug vlakgeometrie BGT buurt vlakgeometrie BGT pand vlakgeometrie BGT onbegroeid terreindeel vlakgeometrie BGT openbare ruimte vlakgeometrie BGT stadsdeel vlakgeometrie BGT wegdeel vlakgeometrie BGT waterdeel vlakgeometrie BGT wateschap vlakgeometrie BGT wijk vlakgeometrie BRT gebouw vlakgeometrie BRT terreindeel vlakgeometrie BRT waterdeel vlakgeometrie BRT wegdeel vlakgeometrie RCE Rijksmonument vlakgeometrie CBS wijk vlakgeometrie sdo:postalCode BAG postcode sdo:streetAddress (samenvoeging van:) BAG Openbare ruimte naam BAG huisnummer BAG huisnummertoevoeging BAG huisletter Tabel 1. Vertaling van Schema.org naar Overheids Bronnen.","title":"2.1 Schema.org vertaling"},{"location":"KnowledgeGraph/#22-bevindingen","text":"Bevindingen bij het eerste gebruik van een op Schema.org gebaseerde kennisgraaf: Door de mapping naar Schema.org worden we uitgenodigd om informatie simpeler te ontsluiten. Data wordt in termen van de alledaagse wereld ontsloten, begrijpelijk voor de niet-specialistische gebruiker. Doordat Schema.org alledaagse begrippen zoals Adres, Plaats, Huis hanteert is de data eenvoudiger te bevragen. Doordat verscheidene begrippen soms worden 'plat geslagen' in Schema.org wordt de structuur eenvoudiger (bijvoorbeeld Nummeraanduiding en OpenbareRuimte wordt PostAdres). Sommige voor de hand liggende begrippen zitten (nog) niet in Schema.org. Brug bijvoorbeeld wel, maar Weg niet. Schema.org is in het Engels. Het is soms nog lastig om de juiste Nederlandse vertaling te vinden. De koppeling tussen Schema.org en de bronsystemen is eenvoudig te leggen (prov:wasDerivedFrom voor instanties; sdo:additionalType voor definities). Een toekomstige iteratie van de knowledge graph o.b.v. Schema.org moet het evenwicht zien te vinden tusen 'breedte en diepte' van de ontologie: de rijkdom van de onderliggende data ontsluiten, maar op een manier die geen domeinkennis vereist. Doordat meerdere geo-objecten nu als 1 object ontsloten worden heeft de gebruiker meer begeleiding nodig bij het kiezen van dubbel voorkomende eigenschappen (m.n. geometrie). Voor een aantal object typen is maar weinig informatie bekend (bijvoorbeeld een Bak). Je hebt dan alleen de geometrie en de bronhouder. Het is niet duidelijk of deze informatie nuttig is voor veel gebruikers. Een aantal object typen worden op een te laag niveau ontsloten in de bron (bijvoorbeeld Wegdeel, Waterdeele). Om voor de gebruiker nuttig te zijn zouden deze gegroepeerd ontsloten moeten worden. Bijvoorbeeld 1 water i.p.v. 100 losse waterdelen.","title":"2.2 Bevindingen"},{"location":"KnowledgeGraph/#3-data-lineage","text":"Essentieel uitgangspunt bij het transformeren van de data naar de Knowledge Graph is dat de data lineage herleidbaar blijft. Attributen en objecten komen uit een bepaalde dataset en een bepaald gegeven binnen deze dataset. Deze lineage houden we traceerbaar middels de prov standaard zoals gestandaardiseerd door het W3C. Een specifiek voorbeeld van hoe data lineage automatisch wordt bijgehouden is te vinden in Tabelen 3 tot en met 9. Dit betreft de cellen met waarde \"wasDerivedFrom\". Deze zelfde relatie is ook te vinden in de implementatie bevraging die aan het einde van deze pagina is opgenomen.","title":"3. Data Lineage"},{"location":"KnowledgeGraph/#4-van-overheids-bron-tot-kadaster-kennisgraaf-kgg","text":"Om technisch tot een invulling te komen van een Knowledge Graph bovenop onze registratieve Linked Data, maken wij gebruik van zgn. LD Views. LD Views zijn geautomatiseerde afbeeldingen van registratieve datasets naar een ge\u00efntegreerde kennisgraaf. Met deze aanpak transformeren we de registratieve laag naar een additionele laag dat gebruik maakt van bovengenoemd datamodel. Schema.org Place ( sdo:Place ) is het centrale element in de kennisgrafiek en als zodanig is elke LD View die in de kennisgrafiek is geconstrueerd een specifiek type sdo:Place . Momenteel zijn er verschillende soorten plaatsen in de kennisgrafiek, waaronder: Panden, Gebieden, Waterdelen, Wegdelen, Terreindelen en Overige. Elk van deze bestaat uit een of meer LD Views. Een technische bespreking van wat deze LD View zijn en hoe ze concreet worden geconstrueerd, vindt u hier . Om beter weer te kunnen geven hoe LD Views en hun corresponderende sdo:Place categorie inhoudelijk zijn opgebouwd introduceren we het gedetailleerde tabel formaat in Tabel 2: Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap Objecttype eigenschapA BronObjecttype bronEigenschap eigenschapB [[Klasse]] eigenschapC \"waarde\" Tabel 2. Overzicht van het gedetailleerde tabel formaat waarmee vertalingen in de Kennisgraaf kunnen worden beschreven. De dikgedrukte rijen in dit tabel formaat moeten als volgt gelezen worden: Rij 1 geeft aan dat de linker twee kolommen gegevens in de Kadaster Kennisgraaf (KKG) beschrijven. Deze rij geeft ook dat dat de rechter twee kolommen gegevens in een Kadastrale bron aanduiden, waar de gegevens in de kennisgraaf op gebaseerd worden. Rij 2 geeft aan dat zowel in de kennisgraaf alsook in de bron een onderscheid wordt gemaakt tussen objecttype en eigenschap. De niet-dikgedrukte rijen in dit tabel formaat moeten als volgt gelezen worden: Rij 1-3 geven aan dat ze objecten van hetzelfde objecttype in de kennisgraaf beschrijven. Rij 1 legt een specifieke afbeelding (View) vast van een Bronklasse/bronEigenschap combinatie, naar een Klase/eigenschap combinatie in de kennisgraaf. De meeste afbeeldingen (Views) zijn van dit karakter. Rij 2 legt een ander soort afbeelding (View) vast: eigenschap2 in de kennisgraaf is niet direct gebaseed op 1 gegeven in een bron, maar vormt een link naar een ander objecttype in de kennisgraaf. Dit andere objecttype komt elders in dezelfde tabel voor. Rij 3 legt weer een ander soort afbeelding (Viev) vast: eigenschap3 in de kennisgraaf heeft een constante waarde. Deze waarde is niet afkomstig uit een specifieke locatie in de bron, maar maakt onderdeel uit van de LD View.","title":"4. Van Overheids Bron tot Kadaster Kennisgraaf (KGG)"},{"location":"KnowledgeGraph/#41-van-gebouwpand-naar-schemaorg-place-visuele-weergave","text":"Tabel 3 geeft de gedetailleerde vertaling voor panden weer. Hier wordt een Schema.org Schema.org Place gebaseerd op BAG Pand, BGT pand en BRT gebouw. Een interactieve visualisatie is hier beschikbaar. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap AdministrativeArea containsPlace Verblijfsobject identificatie GeoCoordinates latitude Verblijfsobject geometrie longitude Verblijfsobject geometrie name \"BAG puntgeometrie\" wasDerivedFrom Verblijfsobject identificatie GeoShape name \"BAG vlakgeometrie\" polygon BAG Pand geometrie wasDerivedFrom BAG Pand identificatie GeoShape name \"BRT geometrie\" polygon BRT Gebouw geometrie wasDerivedFrom BRT Gebouw identificatie GeoShape name \"BGT maaiveld geometrie\" polygon BGT Pand geometrie wasDerivedFrom BGT Pand identificatie Place additionalType \" BAG Pand \" Verblijfsobject gebruiksdoel \" BRT Gebouw \" BRT Gebouw typeGebouw \" BGT Pand \" address [[ PostalAddress ]] containedInPlace [[ AdministrativeArea ]] dateCreated BAG Pand bouwjaar floorSize Verblijfsobject oppervlakte geo [[ GeoCoordinates ]] [[ GeoShape ]] name Nummeraanduiding postcode OpenbareRuimte naam Nummeraanduiding huisnummer huisnummertoevoeging huisletter Woonplaats naam wasDerivedFrom BAG Pand identificatie Verblijfsobject identificatie BRT Gebouw identificatie PostalAddress addressCountry \"Nederland\" addressLocality Woonplaats naam name Nummeraanduiding postcode OpenbareRuimte naam Nummeraanduiding huisnummer huisnummertoevoeging huisletter Woonplaats naam postalCode Nummeraanduiding postcode streetAddress OpenbareRuimte naam Nummeraanduiding huisnummer huisnummertoevoeging huisletter wasDerivedFrom Nummeraanduiding identificatie Tabel 3. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om BAG panden, BRT gebouwen en BGT panden om te zetten. Naast de transformaties in Tabel 3 worden ook nog de volgende filters toegepast. Nummeraanduiding Nummeraanduidingen waarvan de registratie is afgesloten worden niet meegenomen in de LD View. Nummeraanduidngen met status naamgeving ingetrokken worden niet meegenomen in de LD View. Openbare ruimte Openbare ruimtes waarvan de registratie is afgesloten worden niet meegenomen in de LD View. Openbare ruimtes met status naamgeving ingetrokken worden niet meegenomen in de LD View. Verblijfsobject Verblijfsobjecten met status niet geraliseerd verblijfsobject , verblijfsobject ingetrokken of verblijfsobject ten onrechte opgevoerd worden niet meegenomen in de LD View. Verblijfsobjecten waarvan de registratie is afgesloten worden niet meegenomen in de LD View. Pand Panden met status niet gerealiseerd pand , pand gesloopt of pand ten onrechte opgevoerd worden niet meegenomen in de LD View. Panden aarvan de registratie is afgesloten worden niet meegenomen in de LD View.","title":"4.1 Van Gebouw/Pand naar Schema.org Place (visuele weergave)"},{"location":"KnowledgeGraph/#42-van-administratief-gebieden-registratief-gebied-woonplaats-buurt-wijk-gemeente-bag-bgt-brt-cbs-rce-naar-schemaorg-place-visuele-weergave","text":"Tabel 4 geeft de inhoudelijke afbeelding (View) voor gebieden weer. Hier bestaat de sdo:Place categorie Gebieden uit de BAG Woonplaats, een aantal BGT gebieden, Openbare Ruimtes (BGT en BAG) en Wijken en Buurten. Een interactieve visualisatie van deze sdo:Place categorie is hier beschikbaar. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap AdministrativeArea containsPlace BAG Openbare Ruimte identificatie Verblijfsobject identificatie wasDerivedFrom BAG Woonplaats identificatie BGT Buurt identificatie BGT Openbare Ruimte identificatie BGT Stadsdeel identificatie BGT Wijk identificatie CBS Buurt identificatie additionalType Woonplaats BGT Buurt identificatie BGT Openbare Ruimte identificatie BGT Stadsdeel identificatie BGT Wijk identificatie \" CBS Buurt \" geo [[ GeoShape ]] [[ GeoCoordinates ]] name Woonplaats naam BGT Buurt naam BGT Openbare Ruimte naam BGT Stadsdeel naam BGT Wijk naam CBS Buurt naam identifier CBS Buurt identificatie Place wasDerivedFrom BAG Openbare Ruimte identificatie additionalType BAG Openbare Ruimte type dateCreated BAG Openbare Ruimte aangemaakt geo [[ GeoCoordinates ]] GeoCoordinates wasDerivedFrom BGT Openbare Ruimte latitude BGT Openbare Ruimte geometrie longitude BGT Openbare Ruimte geometrie name [['BGT puntgeometrie']] GeoShape wasDerivedFrom Woonplaats identificatie BGT Buurt identificatie BGT Openbare Ruimte identificatie BGT Stadsdeel identificatie BGT Wijk identificatie CBS Buurt identificatie name \"BAG vlakgeometrie\" \"BGT geometrie\" \"CBS geometrie\" polygon BAG Woonplaats geometrie BGT Buurt geometrie BGT Openbare Ruimte geometrie BGT Stadsdeel geometrie BGT Wijk geometrie CBS Buurt geometrie Tabel 4. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om BAG woonplaatsen, bgt gebieden, openbare ruimtes en wijken en buurten om te zetten. Naast de transformaties in Tabel 4 worden ook de volgende filters toegepast. BAG Woonplaats Woonplaatsen met status woonplaats ingetrokken worden niet meegenomen in de LD View. Openbare ruimte Openbare ruimtes waarvan de registratie is afgesloten worden niet meegenomen in de LD View. Openbare ruimtes met status naamgeving ingetrokken worden niet meegenomen in de LD View.","title":"4.2 Van administratief gebieden / registratief gebied / woonplaats / buurt / wijk / gemeente (BAG, BGT, BRT, CBS, RCE) naar Schema.org Place (visuele weergave)"},{"location":"KnowledgeGraph/#43-van-terreindeel-bgt-brt-naar-schemaorg-place-visuele-weergave","text":"Tabel 5 geeft de inhoudelijke afbeelding (View) voor gebieden weer. Hier bestaat de sdo:Place categorie Terreindelen uit de BGT (Begroeid en onbegroeid terreindeel) en BRT. Een interactieve visualisatie van deze sdo:Place categorie is hier beschikbaar. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap Place wasDerivedFrom BGT Begroeid Terreindeel identificatie BGT Onbegroeid Terreindeel identificatie BRT Terrein identificatie additionalType \" BGT Begroeid Terreindeel \" BGT Begroeid Terreindeel functie fysiek voorkomen plus functie plus fysiek voorkomen plus type type \" BGT Onbegroeid Terreindeel \" BGT Onbegroeid Terreindeel fysiek voorkomen plus fysiek voorkomen \" BRT Terrein \" BRT Terrein fysiek voorkomen type voorkomen geo [[ GeoShape ]] name BGT Begroeid Terreindeel \"Een begroeid terreindeel van bronhouder: bronhouder naam \" BGT Onbegroeid Terreindeel \"Een begroeid terreindeel van bronhouder: bronhouder naam \" BRT Terrein naam GeoShape wasDerivedFrom BGT Begroeid Terreindeel identificatie BGT Onbegroeid Terreindeel identificatie BRT Terrein identificatie name \"BGT geometrie\" \"BRT geometrie\" polygon BGT Begroeid Terreindeel geometrie BGT Onbegroeid Terreindeel geometrie BRT Terrein geometrie Tabel 5. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om BRT en BGT terreindelen om te zetten.","title":"4.3 Van terreindeel (BGT, BRT) naar Schema.org Place (visuele weergave)"},{"location":"KnowledgeGraph/#44-van-waterdeel-bgt-brt-naar-schemaorg-place-visuele-weergave","text":"Tabel 6 geeft de inhoudelijke afbeelding (View) voor gebieden weer. Hier bestaat de sdo:Place categorie Waterdelen uit de BGT en de BRT. Een interactieve visualisatie van deze sdo:Place categorie is hier beschikbaar. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap Place wasDerivedFrom BGT Waterdeel identificatie BRT Waterdeel identificatie additionalType \" BGT Waterdeel \" BGT Waterdeel plus type type \" BRT Waterdeel \" BRT Waterdeel functie type geo [[ GeoShape ]] [[ GeoCoordinates ]] name BGT Waterdeel \"Een waterdeel van bronhouder: bronhouder naam \" BRT Waterdeel naam GeoShape wasDerivedFrom BGT Waterdeel identificatie BRT Waterdeel identificatie name \"BGT geometrie\" \"BRT geometrie\" polygon BGT Waterdeel geometrie BRT Waterdeel geometrie GeoCoordinates wasDerivedFrom BRT Waterdeel identificatie name \"BRT geometrie\" latitude BRT Waterdeel geometrie longitude BRT Waterdeel geometrie Tabel 6. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om BGT en BRT waterdelen om te zetten.","title":"4.4 Van waterdeel (BGT, BRT) naar Schema.org Place (visuele weergave)"},{"location":"KnowledgeGraph/#45-van-wegdeel-bgt-brt-naar-schemaorg-place-visuele-weergave","text":"Tabel 7 geeft de inhoudelijke afbeelding (View) voor gebieden weer. Hier bestaat de sdo:Place categorie Wegdelen uit de BGT en de BRT. Een interactieve visualisatie van deze sdo:Place categorie is hier beschikbaar. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap Place wasDerivedFrom BGT Wegdeel identificatie BRT Wegdeel identificatie additionalType \" BGT Wegdeel \" BGT Wegdeel functie fysiek voorkomen plus functie plus fysiek voorkomen \" BRT Wegdeel \" BRT Wegdeel fysiek voorkomen hoofdverkeersgebruik type infrastructuur type weg verhardingstype geo [[ GeoShape ]] [[ GeoCoordinates ]] name BGT Wegdeel \"Een wegdeel van bronhouder: bronhouder naam \" BRT Wegdeel naam GeoShape wasDerivedFrom BGT Wegdeel identificatie BRT Wegdeel identificatie name \"BGT geometrie\" \"BRT geometrie\" polygon BGT Wegdeel geometrie BRT Wegdeel geometrie GeoCoordinates wasDerivedFrom BRT Wegdeel identificatie name \"BRT geometrie\" latitude BRT Wegdeel geometrie longitude BRT Wegdeel geometrie Tabel 7. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om BGT en BRT wegdelen om te zetten.","title":"4.5 Van wegdeel (BGT, BRT) naar Schema.org Place (visuele weergave)"},{"location":"KnowledgeGraph/#46-van-monument-rce-naar-schemaorg-place","text":"Tabel 8 geeft de inhoudelijke afbeelding (View) voor gebieden weer. Hier bestaat de sdo:Place categorie RCE Monumenten. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap Place wasDerivedFrom RCE Monument rijksmonument nummer additionalType \" RCE Monument \" geo [[ GeoShape ]] name RCE Monument naam GeoShape wasDerivedFrom RCE Monument geometrie name \"RCE geometrie\" polygon RCE Monument geometrie as WKT Tabel 8. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om RCE Monumenten om te zetten.","title":"4.6 Van Monument (RCE) naar Schema.org Place"},{"location":"KnowledgeGraph/#47-van-brug-bgt-naar-schemaorg-bridge","text":"Tabel 9 geeft de inhoudelijke afbeelding (View) voor bruggen weer. Hiervoor wordt het Schema.org objecttype sdo:Bridge gebruikt. Schema.org Bridge is een subtype van Schema.org Place. Kadaster Kennisgraaf (KKG) Overheids Bron Objecttype Eigenschap Objecttype Eigenschap Bridge wasDerivedFrom BGT Brug identificatie additionalType type overbruggingsdeel geo [[ GeoShape ]] name BGT Brug \"Een brugdeel van bronhouder: bronhouder naam \" GeoShape wasDerivedFrom BGT Brug geometrie name \"BGT geometrie\" polygon BGT Brug geometrie Tabel 9. Voorbeeld van een inhoudelijke sdo:Place categorie transformatie gebaseerd op een aantal LD Views. Deze wordt gebruikt om BGT bruggen om te zetten.","title":"4.7 Van Brug (BGT) naar Schema.org Bridge"},{"location":"LDViews/","text":"LD Views Om technisch tot een invulling te komen van een Knowledge Graph bovenop onze registratieve Linked Data, maken wij gebruik van zgn. LD Views. LD Views zijn geautomatiseerde afbeeldingen van registratieve datasets naar een ge\u00efntegreerde kennisgraaf. Met deze aanpak transformeren we de registratieve laag naar een additionele laag dat gebruik maakt van bovengenoemd datamodel. Figuur 1. Architectuur overzicht van de werking van LD Views. In deze architectuur zijn een aantal zaken van belang. We beginnen met brondata (paarse laag) zoals eerder beschreven in Brondata . Deze zetten we middels GraphQL en de Enhancer om naar registratieve Linked Data (de oranje laag). Vanuit daar cree\u00ebren we \u00e9\u00e9n of meerdere Views (afhankelijk van gebruik) op deze data, welke laag we dan ook de Knowledge Graph noemen. Governance technisch zal een business architect moeten bepalen welke data er in deze laag moet zitten - en waar deze data vandaan moet komen. Het unieke hier is dat de data op zichzelf vaak al bevraagbaar is (middels uitgebreide en complexe SPARQL queries op de registratieve Linked Data), maar dat deze voor gemakkelijk gebruik persistent wordt opgeslagen. Voor verschillende doeleinden kunnen verschillende LD Views ontstaan in de toekomst. We geloven heel erg in het statement One size fits none . Immers, er valt niet \u00e9\u00e9n datamodel, \u00e9\u00e9n dataset of \u00e9\u00e9n manier van ontsluiting te bedenken waar alle gebruikers baat bij hebben. Door dit wel na te streven lopen we het risico een oplossing te cree\u00ebren die voor niemand echt de perfect aansluiting geeft. Daarom houden we de brondata grotendeels intact en staan we toe op basis van verschillende use cases \u00e9\u00e9n of meerdere Knowledge Graphs beschikbaar te stellen. Technische Implementatie Voor de technische implementatie van LD Views wordt gebruik gemaakt van de open standaarden SPARQL construct en SHACL Rules. SPARQL construct Wordt gebruikt om inhoudelijke transformaties in uit te drukken. Deze transformaties corresponderen met LD View tabellen zoals Tabel 1 en 2. De met Tabel 2 corresponderende bevraging is hieronder opgenomen. SHACL Rules worden gebruikt om de SPARQL construct queries op te slaan als linked data. Deze worden ook gebruikt om de volgorde waarin de transformaties moeten worden uitgevoerd vast te leggen. Technische Implementatie Panden BAG Pand De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix status : <https://bag2.basisregistraties.overheid.nl/bag/id/status/> prefix tfg : <https://triplydb.com/Triply/functions/geo/> prefix xsd : <http://www.w3.org/2001/XMLSchema#> construct { ?administrativeArea sdo : containsPlace ?place . ?geoCoordinates a sdo : GeoCoordinates ; prov : wasDerivedFrom ?verblijfsobjectRegistratie ; sdo : latitude ?latitude ; sdo : longitude ?longitude ; sdo : name 'BAG puntgeometrie' . ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?pandRegistratie ; sdo : name 'BAG vlakgeometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?pandRegistratie , ?verblijfsobjectRegistratie ; sdo : additionalType bag : Pand , ?gebruiksdoel ; sdo : address ?postalAddress ; sdo : containedInPlace ?administrativeArea ; sdo : dateCreated ?dateCreated ; sdo : floorSize ?oppervlakte ; sdo : geo ?geoCoordinates , ?geoShape ; sdo : name ?placeName . ?postalAddress a sdo : PostalAddress ; prov : wasDerivedFrom ?nummeraanduidingRegistratie ; sdo : addressCountry 'Nederland' ; sdo : addressLocality ?woonplaatsNaam ; sdo : name ?postalAddressName ; sdo : postalCode ?postcode ; sdo : streetAddress ?streetAddress . } from named <https://bag2.basisregistraties.overheid.nl/bag/graphs/instanties> where { # BAG nummeraanduiding: identity ?nummeraanduidingRegistratie bag : postcode ?postcode . filter not exists { ?nummeraanduidingRegistratie prov : invalidatedAtTime []. } ?nummeraanduidingRegistratie bag : status ?nummeraanduidingStatus . filter ( ?nummeraanduidingStatus not in ( status : naamgevingIngetrokken )) # BAG nummeraanduiding: connections ?nummeraanduidingRegistratie bag : ligtAan ?openbareRuimte ; foaf : primaryTopic ?nummeraanduiding . # BAG nummeraanduiding: the rest ?nummeraanduiding nen3610 : identificatie / nen3610 : lokaalID ?postalAddressId . ?nummeraanduidingRegistratie bag : huisnummer ?huisnummer . optional { ?nummeraanduidingRegistratie bag : huisletter ?huisletter . } optional { ?nummeraanduidingRegistratie bag : huisnummertoevoeging ?huisnummertoevoeging . } # BAG openbare ruimte: identity ?openbareRuimteRegistratie foaf : primaryTopic ?openbareRuimte . filter not exists { ?openbareRuimteRegistratie prov : invalidatedAtTime []. } ?openbareRuimteRegistratie bag : status ?openbareRuimteStatus . filter ( ?openbareRuimteStatus not in ( status : naamgevingIngetrokken )) # BAG openbare ruimte: connections ?openbareRuimteRegistratie bag : ligtIn ?woonplaats . # BAG openbare ruimte: the rest ?openbareRuimteRegistratie skos : prefLabel ?openbareRuimteNaam . # BAG verblijfsobject: identity ?verblijfsobjectRegistratie bag : hoofdadres ?nummeraanduiding . filter not exists { ?verblijfsobjectRegistratie prov : invalidatedAtTime []. } ?verblijfsobjectRegistratie bag : status ?verblijfsobjectStatus . filter ( ?verblijfsobjectStatus not in ( status : nietGerealiseerdVerblijfsobject , status : verblijfsobjectIngetrokken , status : verblijfsobjectTenOnrechteOpgevoerd )) # BAG verblijfsobject: connections ?verblijfsobjectRegistratie bag : maaktDeelUitVan ?pand ; foaf : primaryTopic ?verblijfsobject . # BAG verblijfsobject: the rest ?verblijfsobject nen3610 : identificatie / nen3610 : lokaalID ?verblijfsobjectId . ?verblijfsobjectRegistratie bag : gebruiksdoel ?gebruiksdoel ; bag : geometrie ?puntRd ; bag : oppervlakte ?oppervlakte . # BAG pand: identity ?pandRegistratie foaf : primaryTopic ?pand . filter not exists { ?pandRegistratie prov : invalidatedAtTime []. } ?pandRegistratie bag : status ?pandStatus . filter ( ?pandStatus not in ( status : nietGerealiseerdPand , status : pandGesloopt , status : pandTenOnrechteOpgevoerd )) # BAG pand: the rest ?pand nen3610 : identificatie / nen3610 : lokaalID ?pandId . ?pandRegistratie bag : bouwjaar ?bouwjaar ; bag : geometrie ?vlakRd . # BAG woonplaats: identity ?woonplaatsRegistratie foaf : primaryTopic ?woonplaats . filter not exists { ?woonplaatsRegistratie prov : invalidatedAtTime []. } ?woonplaatsRegistratie bag : status ?woonplaatsStatus . filter ( ?woonplaatsStatus not in ( status : woonplaatsIngetrokken )) # BAG woonplaats: the rest ?woonplaats nen3610 : identificatie / nen3610 : lokaalID ?administrativeAreaId . ?woonplaatsRegistratie skos : prefLabel ?woonplaatsNaam . bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?administrativeAreaId )) as ?administrativeArea ) bind ( xsd : integer ( str ( ?bouwjaar )) as ?dateCreated ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-coordinates/bag-' , ?verblijfsobjectId )) as ?geoCoordinates ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bag-' , ?pandId )) as ?geoShape ) bind ( xsd : double ( tfg : latitude ( ?punt )) as ?latitude ) bind ( xsd : double ( tfg : longitude ( ?punt )) as ?longitude ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?verblijfsobjectId )) as ?place ) bind ( tfg : project ( tfg : 2d ( ?vlakRd )) as ?polygon ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/postal-address/' , ?postalAddressId )) as ?postalAddress ) bind ( tfg : project ( ?puntRd ) as ?punt ) bind ( if ( bound ( ?placeName ), concat ( 'Adres van ' , ?placeName ), '' ) as ?postalAddressName ) bind ( if ( bound ( ?streetAddress ), concat ( ?streetAddress , ', ' , ?postcode , ' ' , ?woonplaatsNaam ), '' ) as ?placeName ) bind ( concat ( ?openbareRuimteNaam , ' ' , str ( ?huisnummer ), if ( bound ( ?huisletter ), ?huisletter , '' ), if ( bound ( ?huisnummertoevoeging ), concat ( '-' , ?huisnummertoevoeging ), '' )) as ?streetAddress ) } BGT Panden De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?bgtPandRegistratie ; sdo : name 'BGT maaiveld geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; sdo : additionalType bgt : Pand ; sdo : geo ?geoShape . } from named <https://bag2.basisregistraties.overheid.nl/bag/graphs/instanties> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # identity ?bgtPandRegistratie bgt : bagPand ?bagPand0 . filter not exists { ?bgtPandRegistratie prov : invalidatedAtTime []. } # the rest ?bgtPandRegistratie foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?bgtPandId . optional { ?bgtPandRegistratie bgt : geometrie ?vlakRd . } # connections optional { [ bag : maaktDeelUitVan ?bagPand ; foaf : primaryTopic / nen3610 : identificatie / nen3610 : lokaalID ?verblijfsobjectId ]. } bind ( iri ( concat ( 'https://bag2.basisregistraties.overheid.nl/bag/id/object/NL.IMBAG.Pand.' , strafter ( str ( ?bagPand0 ), 'https://bag2.basisregistraties.overheid.nl/bag/id/pand/NL.IMBAG.Pand.' ))) as ?bagPand ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?bgtPandId )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?verblijfsobjectId )) as ?place ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) } BRT Gebouw De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix brt : <https://brt.basisregistraties.overheid.nl/brt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> #prefix geo: <http://www.opengis.net/ont/geosparql#> prefix geo : <https://www.opengis.net/ont/geosparql#> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?gebouwRegistratie ; sdo : name 'BRT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?gebouwRegistratie ; sdo : additionalType brt : Gebouw , ?type ; sdo : geo ?geoShape ; sdo : name ?name . } from named <https://bag2.basisregistraties.overheid.nl/bag/graphs/instanties> from named <https://brt.basisregistraties.overheid.nl/brt/id/graph/instanties> from named <https://brt.basisregistraties.overheid.nl/brt/id/graph/brt-2-bag> where { # identity ?pandRegistratie geo : sfWithin ?gebouw . # connections ?gebouwRegistratie foaf : primaryTopic ?gebouw . ?pandRegistratie foaf : primaryTopic ?pand . [ bag : maaktDeelUitVan ?pand ; foaf : primaryTopic ?verblijfsobject ]. # the rest ?gebouwRegistratie brt : geometriePunt | brt : geometrieVlak ?vlakRd ; brt : typeGebouw ?type . ?gebouw nen3610 : identificatie / nen3610 : lokaalID ?gebouwId . ?verblijfsobject nen3610 : identificatie / nen3610 : lokaalID ?verblijfsobjectId . optional { ?gebouwRegistratie skos : prefLabel ?name . } bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/brt-' , ?gebouwId )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?verblijfsobjectId )) as ?place ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) } Technische Implementatie Gebieden BAG Woonplaats De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix status : <https://bag2.basisregistraties.overheid.nl/bag/id/status/> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?administrativeArea a sdo : AdministrativeArea ; prov : wasDerivedFrom ?woonplaatsRegistratie ; sdo : additionalType bag : Woonplaats ; sdo : geo ?geoShape ; sdo : name ?naam . ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?woonplaatsRegistratie ; sdo : name 'BAG vlakgeometrie' ; sdo : polygon ?polygon . } from named <https://bag2.basisregistraties.overheid.nl/bag/graphs/instanties> where { # identity ?woonplaatsRegistratie a bag : WoonplaatsRegistratie . filter not exists { ?woonplaatsRegistratie prov : invalidatedAtTime []. } ?woonplaatsRegistratie bag : status ?woonplaatsStatus . filter ( ?woonplaatsStatus not in ( status : woonplaatsIngetrokken )) # the rest ?woonplaatsRegistratie bag : geometrie ?vlakRd ; foaf : primaryTopic ?woonplaats ; skos : prefLabel ?naam . ?woonplaats nen3610 : identificatie / nen3610 : lokaalID ?id . bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?administrativeArea ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bag-' , ?id )) as ?geoShape ) bind ( tfg : simplify ( tfg : project ( ?vlakRd ), 1.0e-4 ) as ?polygon ) } Administrative Area gebaseerd op BGT Gebieden De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BGT geometrie' ; sdo : polygon ?polygon . ?place a sdo : AdministrativeArea ; prov : wasDerivedFrom ?registratie ; sdo : additionalType ?class , ?functie , ?fysiekVoorkomen , ?plusFunctie , ?plusFysiekVoorkomen , ?plusType , ?type ; sdo : geo ?geoShape ; sdo : name ?placeName . } from named <https://bgt.basisregistraties.overheid.nl/bgt/def/> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # identity values ?class { bgt : BuurtRegistratie bgt : OpenbareRuimteRegistratie bgt : StadsdeelRegistratie bgt : WaterschapRegistratie bgt : WijkRegistratie } ?registratie a ?class . filter not exists { ?registratie prov : invalidatedAtTime []. } # the rest ?registratie bgt : bronhouder / skos : prefLabel ?bronhouderNaam ; bgt : geometrie ?vlakRd ; foaf : primaryTopic ?object . ?object a / skos : prefLabel ?classLabel ; bgt : identificatie / nen3610 : lokaalID ?id . optional { ?registratie bgt : bgt_fysiekVoorkomen ?fysiekVoorkomen0 . } optional { ?registratie bgt : functie ?functie . } optional { ?registratie bgt : naam ?naam . } optional { ?registratie bgt : plusFunctie ?plusFunctie . } optional { ?registratie bgt : plus_fysiekVoorkomen ?plusFysiekVoorkomen0 . } optional { ?registratie bgt : plusType ?plusType . } optional { ?registratie bgt : type ?type . } bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?fysiekVoorkomen0 )) as ?fysiekVoorkomen ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?id )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) bind ( if ( bound ( ?naam ), ?naam , concat ( 'Een ' , lcase ( ?classLabel ), ' van bronhouder ' , ?bronhouderNaam )) as ?placeName ) bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?plusFysiekVoorkomen0 )) as ?plusFysiekVoorkomen ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) } BAG en BGT Openbare Ruimte De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix dct : <http://purl.org/dc/terms/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?administrativeArea sdo : containsPlace ?place . ?geoCoordinates a sdo : GeoCoordinates ; prov : wasDerivedFrom ?openbareRuimteLabelRegistratie ; sdo : latitude ?latitude ; sdo : longitude ?longitude ; sdo : name 'BGT puntgeometrie' . ?place a sdo : Place ; prov : wasDerivedFrom ?openbareRuimteRegistratie , ?openbareRuimteLabelRegistratie ; sdo : additionalType ?type ; sdo : dateCreated ?dateCreated ; sdo : geo ?geoCoordinates . } from named <https://bag2.basisregistraties.overheid.nl/bag/graphs/instanties> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # Openbare ruimte label \u2194 openbare ruimte: identity ?openbareRuimteLabelRegistratie bgt : bagOpenbareRuimte ?openbareRuimte0 . filter not exists { ?openbareRuimteLabelRegistratie prov : invalidatedAtTime []. } bind ( iri ( concat ( 'https://bag2.basisregistraties.overheid.nl/bag/id/object/NL.IMBAG.Openbareruimte.' , strafter ( str ( ?openbareRuimte0 ), 'https://bag2.basisregistraties.overheid.nl/bag/id/openbare-ruimte/' ))) as ?openbareRuimte ) ?openbareRuimteRegistratie foaf : primaryTopic ?openbareRuimte . filter not exists { ?openbareRuimteRegistratie prov : invalidatedAtTime []. } # Openbare ruimte: connections ?openbareRuimteRegistratie bag : ligtIn ?woonplaats . # Openbare ruimte: the rest ?openbareRuimteRegistratie bag : type ?type ; dct : created ?dateCreated ; skos : prefLabel ?openbareRuimteNaam . ?openbareRuimte nen3610 : identificatie / nen3610 : lokaalID ?openbareRuimteId . # Openbare ruimte label: the rest ?openbareRuimteLabelRegistratie bgt : geometrie ?puntRd ; foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?openbareRuimteLabelId . # Woonplaats: the rest ?woonplaats nen3610 : identificatie / nen3610 : lokaalID ?woonplaatsId . bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?woonplaatsId )) as ?administrativeArea ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-coordinates/bgt-' , ?openbareRuimteLabelId )) as ?geoCoordinates ) bind ( str ( tfg : latitude ( ?punt )) as ?latitude ) bind ( str ( tfg : longitude ( ?punt )) as ?longitude ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?openbareRuimteId )) as ?place ) bind ( tfg : project ( ?puntRd ) as ?punt ) } Wijken en Buurten De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix geo : <http://www.opengis.net/ont/geosparql#> prefix prov : <http://www.w3.org/ns/prov#> prefix rdfs : <http://www.w3.org/2000/01/rdf-schema#> prefix sdo : <https://schema.org/> prefix tfg : <https://triplydb.com/Triply/functions/geo/> prefix wbk : <https://data.labs.kadaster.nl/cbs/wbk/vocab/> construct { ?geo a sdo : GeoShape ; prov : wasDerivedFrom ?buurt ; sdo : name \"CBS geometrie\" ; sdo : polygon ?polygon . ?administrativeArea prov : wasDerivedFrom ?buurt ; sdo : additionalType wbk : Buurt ; sdo : geo ?geo ; sdo : identifier ?id ; sdo : name ?name . } from named <https://data.labs.kadaster.nl/cbs/wbk/graphs/geo> where { ?buurt a wbk : Buurt ; geo : hasGeometry / geo : asWKT ?shape ; rdfs : label ?label . bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?administrativeArea ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/wbk-' , ?id )) as ?geo ) bind ( strafter ( str ( ?buurt ), 'https://data.labs.kadaster.nl/cbs/wbk/id/buurt/' ) as ?id ) bind ( str ( ?label ) as ?name ) bind ( tfg : simplify ( ?shape , 1.0e-4 ) as ?polygon ) } Wijken en Buurten Linkset met BAG De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix geo : <http://www.opengis.net/ont/geosparql#> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> construct { ?administrativeArea a sdo : AdministrativeArea ; prov : wasDerivedFrom ?buurt ; sdo : containsPlace ?place . } from named <https://bag2.basisregistraties.overheid.nl/bag/graphs/instanties> from named <https://data.labs.kadaster.nl/cbs/wbk-2-bag/graphs/links> where { # identity ?buurt geo : sfContains ?pandRegistratie . # connections ?pandRegistratie foaf : primaryTopic ?pand . [ bag : maaktDeelUitVan ?pand ; foaf : primaryTopic / nen3610 : identificatie / nen3610 : lokaalID ?verblijfsobjectId ]. bind ( strafter ( str ( ?buurt ), 'https://data.labs.kadaster.nl/cbs/wbk/id/buurt/' ) as ?buurtId ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?buurtId )) as ?administrativeArea ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?verblijfsobjectId )) as ?place ) } Technische Implementatie Terreindelen BGT Begroeid Terreindeel De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BGT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType bgt : BegroeidTerreindeel , ?additionalClass , ?functie , ?fysiekVoorkomen , ?plusFunctie , ?plusFysiekVoorkomen , ?plusType , ?type ; sdo : geo ?geoShape ; sdo : name ?placeName . } from named <https://bgt.basisregistraties.overheid.nl/bgt/def/> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # identity ?registratie a bgt : BegroeidTerreindeelRegistratie . filter not exists { ?registratie prov : invalidatedAtTime []. } # the rest ?registratie bgt : bronhouder / skos : prefLabel ?bronhouderNaam ; bgt : geometrie ?vlakRd ; foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?id . optional { ?registratie bgt : bgt_fysiekVoorkomen ?fysiekVoorkomen0 . } optional { ?registratie bgt : functie ?functie . } optional { ?registratie bgt : naam ?naam . } optional { ?registratie bgt : plusFunctie ?plusFunctie . } optional { ?registratie bgt : plus_fysiekVoorkomen ?plusFysiekVoorkomen0 . } optional { ?registratie bgt : plusType ?plusType . } optional { ?registratie bgt : type ?type . } bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?fysiekVoorkomen0 )) as ?fysiekVoorkomen ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?id )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) bind ( if ( bound ( ?naam ), ?naam , concat ( 'Een begroeid terreindeel van bronhouder ' , ?bronhouderNaam )) as ?placeName ) bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?plusFysiekVoorkomen0 )) as ?plusFysiekVoorkomen ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) } Onbegroeid Terreindeel De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BGT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType bgt : OnbegroeidTerreindeel , ?fysiekVoorkomen , ?plusFysiekVoorkomen ; sdo : geo ?geoShape ; sdo : name ?placeName . } from named <https://bgt.basisregistraties.overheid.nl/bgt/def/> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # identity ?registratie a bgt : OnbegroeidTerreindeelRegistratie . filter not exists { ?registratie prov : invalidatedAtTime []. } # the rest ?registratie bgt : bgt_fysiekVoorkomen ?fysiekVoorkomen0 ; bgt : bronhouder / skos : prefLabel ?bronhouderNaam ; bgt : geometrie ?vlakRd ; foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?id . optional { ?registratie bgt : plus_fysiekVoorkomen ?plusFysiekVoorkomen0 . } bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?fysiekVoorkomen0 )) as ?fysiekVoorkomen ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?id )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) bind ( if ( bound ( ?naam ), ?naam , concat ( 'Een onbegroeid terreindeel van bronhouder ' , ?bronhouderNaam )) as ?placeName ) bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?plusFysiekVoorkomen0 )) as ?plusFysiekVoorkomen ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) } BRT Terrein De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix brt : <https://brt.basisregistraties.overheid.nl/brt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> #prefix geo: <http://www.opengis.net/ont/geosparql#> prefix geo : <https://www.opengis.net/ont/geosparql#> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BRT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType brt : Terrein , ?fysiekVoorkomen_TE , ?type , ?voorkomen ; sdo : geo ?geoShape ; sdo : name ?name . } from named <https://brt.basisregistraties.overheid.nl/brt/id/graph/instanties> where { # identity ?object a brt : Terrein . # connections ?registratie foaf : primaryTopic ?object . # the rest ?object nen3610 : identificatie / nen3610 : lokaalID ?id . ?registratie brt : geometrieVlak ?vlakRd ; brt : typeLandgebruik ?type . optional { ?registratie brt : fysiekVoorkomen_TE ?fysiekVoorkomen_TE . } optional { ?registratie brt : voorkomen_TE ?voorkomen . } optional { ?registratie skos : altLabel | skos : prefLabel ?name . } bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/brt-' , ?id )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) } Technische Implementatie Waterdelen BGT Waterdeel De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geo a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BGT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType bgt : Waterdeel , ?plusType , ?type ; sdo : geo ?geo ; sdo : name ?placeName . } from named <https://bgt.basisregistraties.overheid.nl/bgt/def/> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # identity ?registratie a bgt : WaterdeelRegistratie . filter not exists { ?registratie prov : invalidatedAtTime []. } # the rest ?registratie bgt : bronhouder / skos : prefLabel ?bronhouderNaam ; bgt : geometrie ?vlakRd ; bgt : type ?type ; foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?id . optional { ?registratie bgt : plusType ?plusType . } bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?id )) as ?geo ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) bind ( if ( bound ( ?naam ), ?naam , concat ( 'Een waterdeel van bronhouder ' , ?bronhouderNaam )) as ?placeName ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) } BRT Waterdeel De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix brt : <https://brt.basisregistraties.overheid.nl/brt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoCoordinates a sdo : GeoCoordinates ; prov : wasDerivedFrom ?registratie ; sdo : latitude ?latitude ; sdo : longitude ?longitude ; sdo : name 'BRT geometrie' . ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BRT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType brt : Waterdeel , ?functie , ?type ; sdo : geo ?geoCoordinates , ?geoShape ; sdo : name ?name . } from named <https://brt.basisregistraties.overheid.nl/brt/id/graph/instanties> where { # identity ?object a brt : Waterdeel . # connections ?registratie foaf : primaryTopic ?object . # the rest ?object nen3610 : identificatie / nen3610 : lokaalID ?id . ?registratie brt : functie_WA ?functie ; brt : typeWater ?type . optional { ?registratie skos : altLabel | skos : prefLabel ?name . } { ?registratie brt : geometriePunt ?puntRd . bind ( tfg : project ( ?puntRd ) as ?punt ) bind ( str ( tfg : latitude ( ?punt )) as ?latitude ) bind ( str ( tfg : longitude ( ?punt )) as ?longitude ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-coordinates/brt-' , ?id )) as ?geoCoordinates ) } union { ?registratie brt : geometrieLijn | brt : geometrieVlak ?vormRd . bind ( tfg : project ( ?vormRd ) as ?polygon ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/brt-' , ?id )) as ?geoShape ) } bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) } Technische Implementatie Wegdelen BGT Wegdeel De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BGT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType bgt : Wegdeel , ?functie , ?fysiekVoorkomen , ?plusFunctie , ?plusFysiekVoorkomen ; sdo : geo ?geoShape ; sdo : name ?placeName . } from named <https://bgt.basisregistraties.overheid.nl/bgt/def/> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # identity ?registratie a bgt : WegdeelRegistratie . filter not exists { ?registratie prov : invalidatedAtTime []. } # the rest ?registratie bgt : bgt_fysiekVoorkomen ?fysiekVoorkomen0 ; bgt : bronhouder / skos : prefLabel ?bronhouderNaam ; bgt : functie ?functie ; bgt : geometrie ?vlakRd ; foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?id . optional { ?registratie bgt : plusFunctie ?plusFunctie . } optional { ?registratie bgt : plus_fysiekVoorkomen ?plusFysiekVoorkomen0 . } bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?fysiekVoorkomen0 )) as ?fysiekVoorkomen ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?id )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) bind ( if ( bound ( ?naam ), ?naam , concat ( 'Een wegdeel van bronhouder ' , ?bronhouderNaam )) as ?placeName ) bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?plusFysiekVoorkomen0 )) as ?plusFysiekVoorkomen ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) } BRT Wegdeel De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix brt : <https://brt.basisregistraties.overheid.nl/brt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoCoordinates a sdo : GeoCoordinates ; prov : wasDerivedFrom ?registratie ; sdo : latitude ?latitude ; sdo : longitude ?longitude ; sdo : name 'BRT geometrie' . ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BRT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType brt : Wegdeel , ?fysiekVoorkomen , ?hoofdverkeersgebruik , ?typeInfrastructuur , ?typeWeg , ?verhardingstype ; sdo : geo ?geoCoordinates , ?geoShape ; sdo : name ?name . } Technische Implementatie Overig BGT Brug De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?bridge a sdo : Bridge ; prov : wasDerivedFrom ?registratie ; sdo : additionalType ?type ; sdo : geo ?geoShape ; sdo : name ?name . ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BGT geometrie' ; sdo : polygon ?polygon . } from named <https://bgt.basisregistraties.overheid.nl/bgt/def/> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # Brug: identity ?registratie bgt : hoortBijTypeOverbrugging bgt : Brug . filter not exists { ?registratie prov : invalidatedAtTime []. } # Brug: the rest ?registratie bgt : bronhouder / skos : prefLabel ?bronhouderNaam ; bgt : geometrie ?vlakRd ; bgt : typeOverbruggingsdeel ?type ; foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?id . bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?bridge ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?id )) as ?geoShape ) bind ( concat ( 'Een brugdeel van bronhouder ' , ?bronhouderNaam ) as ?name ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) } RCE Monumenten De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix ceo : <https://linkeddata.cultureelerfgoed.nl/def/ceo#> prefix geo : <http://www.opengis.net/ont/geosparql#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> construct { ?place a sdo : Place ; prov : wasDerivedFrom ?rijksmonument ; sdo : additionalType ceo : Rijksmonument ; sdo : geo ?geoShape ; sdo : name ?name . ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?geometrie ; sdo : name 'RCE geometrie' ; sdo : polygon ?polygon . } from named <https://linkeddata.cultureelerfgoed.nl/id/ceo/> where { ?rijksmonument a ceo : Rijksmonument ; ceo : heeftGeometrie ?geometrie ; ceo : rijksmonumentnummer ?nummer . optional { ?rijksmonument ceo : heeftNaam / ceo : naam ?name . } ?geometrie geo : asWKT ?polygon . bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , str ( ?nummer ))) as ?place ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/rce-' , str ( ?nummer ))) as ?geoShape ) }","title":"LD Views"},{"location":"LDViews/#ld-views","text":"Om technisch tot een invulling te komen van een Knowledge Graph bovenop onze registratieve Linked Data, maken wij gebruik van zgn. LD Views. LD Views zijn geautomatiseerde afbeeldingen van registratieve datasets naar een ge\u00efntegreerde kennisgraaf. Met deze aanpak transformeren we de registratieve laag naar een additionele laag dat gebruik maakt van bovengenoemd datamodel. Figuur 1. Architectuur overzicht van de werking van LD Views. In deze architectuur zijn een aantal zaken van belang. We beginnen met brondata (paarse laag) zoals eerder beschreven in Brondata . Deze zetten we middels GraphQL en de Enhancer om naar registratieve Linked Data (de oranje laag). Vanuit daar cree\u00ebren we \u00e9\u00e9n of meerdere Views (afhankelijk van gebruik) op deze data, welke laag we dan ook de Knowledge Graph noemen. Governance technisch zal een business architect moeten bepalen welke data er in deze laag moet zitten - en waar deze data vandaan moet komen. Het unieke hier is dat de data op zichzelf vaak al bevraagbaar is (middels uitgebreide en complexe SPARQL queries op de registratieve Linked Data), maar dat deze voor gemakkelijk gebruik persistent wordt opgeslagen. Voor verschillende doeleinden kunnen verschillende LD Views ontstaan in de toekomst. We geloven heel erg in het statement One size fits none . Immers, er valt niet \u00e9\u00e9n datamodel, \u00e9\u00e9n dataset of \u00e9\u00e9n manier van ontsluiting te bedenken waar alle gebruikers baat bij hebben. Door dit wel na te streven lopen we het risico een oplossing te cree\u00ebren die voor niemand echt de perfect aansluiting geeft. Daarom houden we de brondata grotendeels intact en staan we toe op basis van verschillende use cases \u00e9\u00e9n of meerdere Knowledge Graphs beschikbaar te stellen.","title":"LD Views"},{"location":"LDViews/#technische-implementatie","text":"Voor de technische implementatie van LD Views wordt gebruik gemaakt van de open standaarden SPARQL construct en SHACL Rules. SPARQL construct Wordt gebruikt om inhoudelijke transformaties in uit te drukken. Deze transformaties corresponderen met LD View tabellen zoals Tabel 1 en 2. De met Tabel 2 corresponderende bevraging is hieronder opgenomen. SHACL Rules worden gebruikt om de SPARQL construct queries op te slaan als linked data. Deze worden ook gebruikt om de volgorde waarin de transformaties moeten worden uitgevoerd vast te leggen.","title":"Technische Implementatie"},{"location":"LDViews/#technische-implementatie-panden","text":"","title":"Technische Implementatie Panden"},{"location":"LDViews/#bag-pand","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix status : <https://bag2.basisregistraties.overheid.nl/bag/id/status/> prefix tfg : <https://triplydb.com/Triply/functions/geo/> prefix xsd : <http://www.w3.org/2001/XMLSchema#> construct { ?administrativeArea sdo : containsPlace ?place . ?geoCoordinates a sdo : GeoCoordinates ; prov : wasDerivedFrom ?verblijfsobjectRegistratie ; sdo : latitude ?latitude ; sdo : longitude ?longitude ; sdo : name 'BAG puntgeometrie' . ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?pandRegistratie ; sdo : name 'BAG vlakgeometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?pandRegistratie , ?verblijfsobjectRegistratie ; sdo : additionalType bag : Pand , ?gebruiksdoel ; sdo : address ?postalAddress ; sdo : containedInPlace ?administrativeArea ; sdo : dateCreated ?dateCreated ; sdo : floorSize ?oppervlakte ; sdo : geo ?geoCoordinates , ?geoShape ; sdo : name ?placeName . ?postalAddress a sdo : PostalAddress ; prov : wasDerivedFrom ?nummeraanduidingRegistratie ; sdo : addressCountry 'Nederland' ; sdo : addressLocality ?woonplaatsNaam ; sdo : name ?postalAddressName ; sdo : postalCode ?postcode ; sdo : streetAddress ?streetAddress . } from named <https://bag2.basisregistraties.overheid.nl/bag/graphs/instanties> where { # BAG nummeraanduiding: identity ?nummeraanduidingRegistratie bag : postcode ?postcode . filter not exists { ?nummeraanduidingRegistratie prov : invalidatedAtTime []. } ?nummeraanduidingRegistratie bag : status ?nummeraanduidingStatus . filter ( ?nummeraanduidingStatus not in ( status : naamgevingIngetrokken )) # BAG nummeraanduiding: connections ?nummeraanduidingRegistratie bag : ligtAan ?openbareRuimte ; foaf : primaryTopic ?nummeraanduiding . # BAG nummeraanduiding: the rest ?nummeraanduiding nen3610 : identificatie / nen3610 : lokaalID ?postalAddressId . ?nummeraanduidingRegistratie bag : huisnummer ?huisnummer . optional { ?nummeraanduidingRegistratie bag : huisletter ?huisletter . } optional { ?nummeraanduidingRegistratie bag : huisnummertoevoeging ?huisnummertoevoeging . } # BAG openbare ruimte: identity ?openbareRuimteRegistratie foaf : primaryTopic ?openbareRuimte . filter not exists { ?openbareRuimteRegistratie prov : invalidatedAtTime []. } ?openbareRuimteRegistratie bag : status ?openbareRuimteStatus . filter ( ?openbareRuimteStatus not in ( status : naamgevingIngetrokken )) # BAG openbare ruimte: connections ?openbareRuimteRegistratie bag : ligtIn ?woonplaats . # BAG openbare ruimte: the rest ?openbareRuimteRegistratie skos : prefLabel ?openbareRuimteNaam . # BAG verblijfsobject: identity ?verblijfsobjectRegistratie bag : hoofdadres ?nummeraanduiding . filter not exists { ?verblijfsobjectRegistratie prov : invalidatedAtTime []. } ?verblijfsobjectRegistratie bag : status ?verblijfsobjectStatus . filter ( ?verblijfsobjectStatus not in ( status : nietGerealiseerdVerblijfsobject , status : verblijfsobjectIngetrokken , status : verblijfsobjectTenOnrechteOpgevoerd )) # BAG verblijfsobject: connections ?verblijfsobjectRegistratie bag : maaktDeelUitVan ?pand ; foaf : primaryTopic ?verblijfsobject . # BAG verblijfsobject: the rest ?verblijfsobject nen3610 : identificatie / nen3610 : lokaalID ?verblijfsobjectId . ?verblijfsobjectRegistratie bag : gebruiksdoel ?gebruiksdoel ; bag : geometrie ?puntRd ; bag : oppervlakte ?oppervlakte . # BAG pand: identity ?pandRegistratie foaf : primaryTopic ?pand . filter not exists { ?pandRegistratie prov : invalidatedAtTime []. } ?pandRegistratie bag : status ?pandStatus . filter ( ?pandStatus not in ( status : nietGerealiseerdPand , status : pandGesloopt , status : pandTenOnrechteOpgevoerd )) # BAG pand: the rest ?pand nen3610 : identificatie / nen3610 : lokaalID ?pandId . ?pandRegistratie bag : bouwjaar ?bouwjaar ; bag : geometrie ?vlakRd . # BAG woonplaats: identity ?woonplaatsRegistratie foaf : primaryTopic ?woonplaats . filter not exists { ?woonplaatsRegistratie prov : invalidatedAtTime []. } ?woonplaatsRegistratie bag : status ?woonplaatsStatus . filter ( ?woonplaatsStatus not in ( status : woonplaatsIngetrokken )) # BAG woonplaats: the rest ?woonplaats nen3610 : identificatie / nen3610 : lokaalID ?administrativeAreaId . ?woonplaatsRegistratie skos : prefLabel ?woonplaatsNaam . bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?administrativeAreaId )) as ?administrativeArea ) bind ( xsd : integer ( str ( ?bouwjaar )) as ?dateCreated ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-coordinates/bag-' , ?verblijfsobjectId )) as ?geoCoordinates ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bag-' , ?pandId )) as ?geoShape ) bind ( xsd : double ( tfg : latitude ( ?punt )) as ?latitude ) bind ( xsd : double ( tfg : longitude ( ?punt )) as ?longitude ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?verblijfsobjectId )) as ?place ) bind ( tfg : project ( tfg : 2d ( ?vlakRd )) as ?polygon ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/postal-address/' , ?postalAddressId )) as ?postalAddress ) bind ( tfg : project ( ?puntRd ) as ?punt ) bind ( if ( bound ( ?placeName ), concat ( 'Adres van ' , ?placeName ), '' ) as ?postalAddressName ) bind ( if ( bound ( ?streetAddress ), concat ( ?streetAddress , ', ' , ?postcode , ' ' , ?woonplaatsNaam ), '' ) as ?placeName ) bind ( concat ( ?openbareRuimteNaam , ' ' , str ( ?huisnummer ), if ( bound ( ?huisletter ), ?huisletter , '' ), if ( bound ( ?huisnummertoevoeging ), concat ( '-' , ?huisnummertoevoeging ), '' )) as ?streetAddress ) }","title":"BAG Pand"},{"location":"LDViews/#bgt-panden","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?bgtPandRegistratie ; sdo : name 'BGT maaiveld geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; sdo : additionalType bgt : Pand ; sdo : geo ?geoShape . } from named <https://bag2.basisregistraties.overheid.nl/bag/graphs/instanties> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # identity ?bgtPandRegistratie bgt : bagPand ?bagPand0 . filter not exists { ?bgtPandRegistratie prov : invalidatedAtTime []. } # the rest ?bgtPandRegistratie foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?bgtPandId . optional { ?bgtPandRegistratie bgt : geometrie ?vlakRd . } # connections optional { [ bag : maaktDeelUitVan ?bagPand ; foaf : primaryTopic / nen3610 : identificatie / nen3610 : lokaalID ?verblijfsobjectId ]. } bind ( iri ( concat ( 'https://bag2.basisregistraties.overheid.nl/bag/id/object/NL.IMBAG.Pand.' , strafter ( str ( ?bagPand0 ), 'https://bag2.basisregistraties.overheid.nl/bag/id/pand/NL.IMBAG.Pand.' ))) as ?bagPand ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?bgtPandId )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?verblijfsobjectId )) as ?place ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) }","title":"BGT Panden"},{"location":"LDViews/#brt-gebouw","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix brt : <https://brt.basisregistraties.overheid.nl/brt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> #prefix geo: <http://www.opengis.net/ont/geosparql#> prefix geo : <https://www.opengis.net/ont/geosparql#> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?gebouwRegistratie ; sdo : name 'BRT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?gebouwRegistratie ; sdo : additionalType brt : Gebouw , ?type ; sdo : geo ?geoShape ; sdo : name ?name . } from named <https://bag2.basisregistraties.overheid.nl/bag/graphs/instanties> from named <https://brt.basisregistraties.overheid.nl/brt/id/graph/instanties> from named <https://brt.basisregistraties.overheid.nl/brt/id/graph/brt-2-bag> where { # identity ?pandRegistratie geo : sfWithin ?gebouw . # connections ?gebouwRegistratie foaf : primaryTopic ?gebouw . ?pandRegistratie foaf : primaryTopic ?pand . [ bag : maaktDeelUitVan ?pand ; foaf : primaryTopic ?verblijfsobject ]. # the rest ?gebouwRegistratie brt : geometriePunt | brt : geometrieVlak ?vlakRd ; brt : typeGebouw ?type . ?gebouw nen3610 : identificatie / nen3610 : lokaalID ?gebouwId . ?verblijfsobject nen3610 : identificatie / nen3610 : lokaalID ?verblijfsobjectId . optional { ?gebouwRegistratie skos : prefLabel ?name . } bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/brt-' , ?gebouwId )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?verblijfsobjectId )) as ?place ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) }","title":"BRT Gebouw"},{"location":"LDViews/#technische-implementatie-gebieden","text":"","title":"Technische Implementatie Gebieden"},{"location":"LDViews/#bag-woonplaats","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix status : <https://bag2.basisregistraties.overheid.nl/bag/id/status/> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?administrativeArea a sdo : AdministrativeArea ; prov : wasDerivedFrom ?woonplaatsRegistratie ; sdo : additionalType bag : Woonplaats ; sdo : geo ?geoShape ; sdo : name ?naam . ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?woonplaatsRegistratie ; sdo : name 'BAG vlakgeometrie' ; sdo : polygon ?polygon . } from named <https://bag2.basisregistraties.overheid.nl/bag/graphs/instanties> where { # identity ?woonplaatsRegistratie a bag : WoonplaatsRegistratie . filter not exists { ?woonplaatsRegistratie prov : invalidatedAtTime []. } ?woonplaatsRegistratie bag : status ?woonplaatsStatus . filter ( ?woonplaatsStatus not in ( status : woonplaatsIngetrokken )) # the rest ?woonplaatsRegistratie bag : geometrie ?vlakRd ; foaf : primaryTopic ?woonplaats ; skos : prefLabel ?naam . ?woonplaats nen3610 : identificatie / nen3610 : lokaalID ?id . bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?administrativeArea ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bag-' , ?id )) as ?geoShape ) bind ( tfg : simplify ( tfg : project ( ?vlakRd ), 1.0e-4 ) as ?polygon ) }","title":"BAG Woonplaats"},{"location":"LDViews/#administrative-area-gebaseerd-op-bgt-gebieden","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BGT geometrie' ; sdo : polygon ?polygon . ?place a sdo : AdministrativeArea ; prov : wasDerivedFrom ?registratie ; sdo : additionalType ?class , ?functie , ?fysiekVoorkomen , ?plusFunctie , ?plusFysiekVoorkomen , ?plusType , ?type ; sdo : geo ?geoShape ; sdo : name ?placeName . } from named <https://bgt.basisregistraties.overheid.nl/bgt/def/> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # identity values ?class { bgt : BuurtRegistratie bgt : OpenbareRuimteRegistratie bgt : StadsdeelRegistratie bgt : WaterschapRegistratie bgt : WijkRegistratie } ?registratie a ?class . filter not exists { ?registratie prov : invalidatedAtTime []. } # the rest ?registratie bgt : bronhouder / skos : prefLabel ?bronhouderNaam ; bgt : geometrie ?vlakRd ; foaf : primaryTopic ?object . ?object a / skos : prefLabel ?classLabel ; bgt : identificatie / nen3610 : lokaalID ?id . optional { ?registratie bgt : bgt_fysiekVoorkomen ?fysiekVoorkomen0 . } optional { ?registratie bgt : functie ?functie . } optional { ?registratie bgt : naam ?naam . } optional { ?registratie bgt : plusFunctie ?plusFunctie . } optional { ?registratie bgt : plus_fysiekVoorkomen ?plusFysiekVoorkomen0 . } optional { ?registratie bgt : plusType ?plusType . } optional { ?registratie bgt : type ?type . } bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?fysiekVoorkomen0 )) as ?fysiekVoorkomen ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?id )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) bind ( if ( bound ( ?naam ), ?naam , concat ( 'Een ' , lcase ( ?classLabel ), ' van bronhouder ' , ?bronhouderNaam )) as ?placeName ) bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?plusFysiekVoorkomen0 )) as ?plusFysiekVoorkomen ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) }","title":"Administrative Area gebaseerd op BGT Gebieden"},{"location":"LDViews/#bag-en-bgt-openbare-ruimte","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix dct : <http://purl.org/dc/terms/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?administrativeArea sdo : containsPlace ?place . ?geoCoordinates a sdo : GeoCoordinates ; prov : wasDerivedFrom ?openbareRuimteLabelRegistratie ; sdo : latitude ?latitude ; sdo : longitude ?longitude ; sdo : name 'BGT puntgeometrie' . ?place a sdo : Place ; prov : wasDerivedFrom ?openbareRuimteRegistratie , ?openbareRuimteLabelRegistratie ; sdo : additionalType ?type ; sdo : dateCreated ?dateCreated ; sdo : geo ?geoCoordinates . } from named <https://bag2.basisregistraties.overheid.nl/bag/graphs/instanties> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # Openbare ruimte label \u2194 openbare ruimte: identity ?openbareRuimteLabelRegistratie bgt : bagOpenbareRuimte ?openbareRuimte0 . filter not exists { ?openbareRuimteLabelRegistratie prov : invalidatedAtTime []. } bind ( iri ( concat ( 'https://bag2.basisregistraties.overheid.nl/bag/id/object/NL.IMBAG.Openbareruimte.' , strafter ( str ( ?openbareRuimte0 ), 'https://bag2.basisregistraties.overheid.nl/bag/id/openbare-ruimte/' ))) as ?openbareRuimte ) ?openbareRuimteRegistratie foaf : primaryTopic ?openbareRuimte . filter not exists { ?openbareRuimteRegistratie prov : invalidatedAtTime []. } # Openbare ruimte: connections ?openbareRuimteRegistratie bag : ligtIn ?woonplaats . # Openbare ruimte: the rest ?openbareRuimteRegistratie bag : type ?type ; dct : created ?dateCreated ; skos : prefLabel ?openbareRuimteNaam . ?openbareRuimte nen3610 : identificatie / nen3610 : lokaalID ?openbareRuimteId . # Openbare ruimte label: the rest ?openbareRuimteLabelRegistratie bgt : geometrie ?puntRd ; foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?openbareRuimteLabelId . # Woonplaats: the rest ?woonplaats nen3610 : identificatie / nen3610 : lokaalID ?woonplaatsId . bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?woonplaatsId )) as ?administrativeArea ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-coordinates/bgt-' , ?openbareRuimteLabelId )) as ?geoCoordinates ) bind ( str ( tfg : latitude ( ?punt )) as ?latitude ) bind ( str ( tfg : longitude ( ?punt )) as ?longitude ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?openbareRuimteId )) as ?place ) bind ( tfg : project ( ?puntRd ) as ?punt ) }","title":"BAG en BGT Openbare Ruimte"},{"location":"LDViews/#wijken-en-buurten","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix geo : <http://www.opengis.net/ont/geosparql#> prefix prov : <http://www.w3.org/ns/prov#> prefix rdfs : <http://www.w3.org/2000/01/rdf-schema#> prefix sdo : <https://schema.org/> prefix tfg : <https://triplydb.com/Triply/functions/geo/> prefix wbk : <https://data.labs.kadaster.nl/cbs/wbk/vocab/> construct { ?geo a sdo : GeoShape ; prov : wasDerivedFrom ?buurt ; sdo : name \"CBS geometrie\" ; sdo : polygon ?polygon . ?administrativeArea prov : wasDerivedFrom ?buurt ; sdo : additionalType wbk : Buurt ; sdo : geo ?geo ; sdo : identifier ?id ; sdo : name ?name . } from named <https://data.labs.kadaster.nl/cbs/wbk/graphs/geo> where { ?buurt a wbk : Buurt ; geo : hasGeometry / geo : asWKT ?shape ; rdfs : label ?label . bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?administrativeArea ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/wbk-' , ?id )) as ?geo ) bind ( strafter ( str ( ?buurt ), 'https://data.labs.kadaster.nl/cbs/wbk/id/buurt/' ) as ?id ) bind ( str ( ?label ) as ?name ) bind ( tfg : simplify ( ?shape , 1.0e-4 ) as ?polygon ) }","title":"Wijken en Buurten"},{"location":"LDViews/#wijken-en-buurten-linkset-met-bag","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix geo : <http://www.opengis.net/ont/geosparql#> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> construct { ?administrativeArea a sdo : AdministrativeArea ; prov : wasDerivedFrom ?buurt ; sdo : containsPlace ?place . } from named <https://bag2.basisregistraties.overheid.nl/bag/graphs/instanties> from named <https://data.labs.kadaster.nl/cbs/wbk-2-bag/graphs/links> where { # identity ?buurt geo : sfContains ?pandRegistratie . # connections ?pandRegistratie foaf : primaryTopic ?pand . [ bag : maaktDeelUitVan ?pand ; foaf : primaryTopic / nen3610 : identificatie / nen3610 : lokaalID ?verblijfsobjectId ]. bind ( strafter ( str ( ?buurt ), 'https://data.labs.kadaster.nl/cbs/wbk/id/buurt/' ) as ?buurtId ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?buurtId )) as ?administrativeArea ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?verblijfsobjectId )) as ?place ) }","title":"Wijken en Buurten Linkset met BAG"},{"location":"LDViews/#technische-implementatie-terreindelen","text":"","title":"Technische Implementatie Terreindelen"},{"location":"LDViews/#bgt-begroeid-terreindeel","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BGT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType bgt : BegroeidTerreindeel , ?additionalClass , ?functie , ?fysiekVoorkomen , ?plusFunctie , ?plusFysiekVoorkomen , ?plusType , ?type ; sdo : geo ?geoShape ; sdo : name ?placeName . } from named <https://bgt.basisregistraties.overheid.nl/bgt/def/> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # identity ?registratie a bgt : BegroeidTerreindeelRegistratie . filter not exists { ?registratie prov : invalidatedAtTime []. } # the rest ?registratie bgt : bronhouder / skos : prefLabel ?bronhouderNaam ; bgt : geometrie ?vlakRd ; foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?id . optional { ?registratie bgt : bgt_fysiekVoorkomen ?fysiekVoorkomen0 . } optional { ?registratie bgt : functie ?functie . } optional { ?registratie bgt : naam ?naam . } optional { ?registratie bgt : plusFunctie ?plusFunctie . } optional { ?registratie bgt : plus_fysiekVoorkomen ?plusFysiekVoorkomen0 . } optional { ?registratie bgt : plusType ?plusType . } optional { ?registratie bgt : type ?type . } bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?fysiekVoorkomen0 )) as ?fysiekVoorkomen ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?id )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) bind ( if ( bound ( ?naam ), ?naam , concat ( 'Een begroeid terreindeel van bronhouder ' , ?bronhouderNaam )) as ?placeName ) bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?plusFysiekVoorkomen0 )) as ?plusFysiekVoorkomen ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) }","title":"BGT Begroeid Terreindeel"},{"location":"LDViews/#onbegroeid-terreindeel","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BGT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType bgt : OnbegroeidTerreindeel , ?fysiekVoorkomen , ?plusFysiekVoorkomen ; sdo : geo ?geoShape ; sdo : name ?placeName . } from named <https://bgt.basisregistraties.overheid.nl/bgt/def/> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # identity ?registratie a bgt : OnbegroeidTerreindeelRegistratie . filter not exists { ?registratie prov : invalidatedAtTime []. } # the rest ?registratie bgt : bgt_fysiekVoorkomen ?fysiekVoorkomen0 ; bgt : bronhouder / skos : prefLabel ?bronhouderNaam ; bgt : geometrie ?vlakRd ; foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?id . optional { ?registratie bgt : plus_fysiekVoorkomen ?plusFysiekVoorkomen0 . } bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?fysiekVoorkomen0 )) as ?fysiekVoorkomen ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?id )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) bind ( if ( bound ( ?naam ), ?naam , concat ( 'Een onbegroeid terreindeel van bronhouder ' , ?bronhouderNaam )) as ?placeName ) bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?plusFysiekVoorkomen0 )) as ?plusFysiekVoorkomen ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) }","title":"Onbegroeid Terreindeel"},{"location":"LDViews/#brt-terrein","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bag : <https://bag2.basisregistraties.overheid.nl/bag/def/> prefix brt : <https://brt.basisregistraties.overheid.nl/brt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> #prefix geo: <http://www.opengis.net/ont/geosparql#> prefix geo : <https://www.opengis.net/ont/geosparql#> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BRT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType brt : Terrein , ?fysiekVoorkomen_TE , ?type , ?voorkomen ; sdo : geo ?geoShape ; sdo : name ?name . } from named <https://brt.basisregistraties.overheid.nl/brt/id/graph/instanties> where { # identity ?object a brt : Terrein . # connections ?registratie foaf : primaryTopic ?object . # the rest ?object nen3610 : identificatie / nen3610 : lokaalID ?id . ?registratie brt : geometrieVlak ?vlakRd ; brt : typeLandgebruik ?type . optional { ?registratie brt : fysiekVoorkomen_TE ?fysiekVoorkomen_TE . } optional { ?registratie brt : voorkomen_TE ?voorkomen . } optional { ?registratie skos : altLabel | skos : prefLabel ?name . } bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/brt-' , ?id )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) }","title":"BRT Terrein"},{"location":"LDViews/#technische-implementatie-waterdelen","text":"","title":"Technische Implementatie Waterdelen"},{"location":"LDViews/#bgt-waterdeel","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geo a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BGT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType bgt : Waterdeel , ?plusType , ?type ; sdo : geo ?geo ; sdo : name ?placeName . } from named <https://bgt.basisregistraties.overheid.nl/bgt/def/> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # identity ?registratie a bgt : WaterdeelRegistratie . filter not exists { ?registratie prov : invalidatedAtTime []. } # the rest ?registratie bgt : bronhouder / skos : prefLabel ?bronhouderNaam ; bgt : geometrie ?vlakRd ; bgt : type ?type ; foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?id . optional { ?registratie bgt : plusType ?plusType . } bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?id )) as ?geo ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) bind ( if ( bound ( ?naam ), ?naam , concat ( 'Een waterdeel van bronhouder ' , ?bronhouderNaam )) as ?placeName ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) }","title":"BGT Waterdeel"},{"location":"LDViews/#brt-waterdeel","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix brt : <https://brt.basisregistraties.overheid.nl/brt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoCoordinates a sdo : GeoCoordinates ; prov : wasDerivedFrom ?registratie ; sdo : latitude ?latitude ; sdo : longitude ?longitude ; sdo : name 'BRT geometrie' . ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BRT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType brt : Waterdeel , ?functie , ?type ; sdo : geo ?geoCoordinates , ?geoShape ; sdo : name ?name . } from named <https://brt.basisregistraties.overheid.nl/brt/id/graph/instanties> where { # identity ?object a brt : Waterdeel . # connections ?registratie foaf : primaryTopic ?object . # the rest ?object nen3610 : identificatie / nen3610 : lokaalID ?id . ?registratie brt : functie_WA ?functie ; brt : typeWater ?type . optional { ?registratie skos : altLabel | skos : prefLabel ?name . } { ?registratie brt : geometriePunt ?puntRd . bind ( tfg : project ( ?puntRd ) as ?punt ) bind ( str ( tfg : latitude ( ?punt )) as ?latitude ) bind ( str ( tfg : longitude ( ?punt )) as ?longitude ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-coordinates/brt-' , ?id )) as ?geoCoordinates ) } union { ?registratie brt : geometrieLijn | brt : geometrieVlak ?vormRd . bind ( tfg : project ( ?vormRd ) as ?polygon ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/brt-' , ?id )) as ?geoShape ) } bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) }","title":"BRT Waterdeel"},{"location":"LDViews/#technische-implementatie-wegdelen","text":"","title":"Technische Implementatie Wegdelen"},{"location":"LDViews/#bgt-wegdeel","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BGT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType bgt : Wegdeel , ?functie , ?fysiekVoorkomen , ?plusFunctie , ?plusFysiekVoorkomen ; sdo : geo ?geoShape ; sdo : name ?placeName . } from named <https://bgt.basisregistraties.overheid.nl/bgt/def/> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # identity ?registratie a bgt : WegdeelRegistratie . filter not exists { ?registratie prov : invalidatedAtTime []. } # the rest ?registratie bgt : bgt_fysiekVoorkomen ?fysiekVoorkomen0 ; bgt : bronhouder / skos : prefLabel ?bronhouderNaam ; bgt : functie ?functie ; bgt : geometrie ?vlakRd ; foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?id . optional { ?registratie bgt : plusFunctie ?plusFunctie . } optional { ?registratie bgt : plus_fysiekVoorkomen ?plusFysiekVoorkomen0 . } bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?fysiekVoorkomen0 )) as ?fysiekVoorkomen ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?id )) as ?geoShape ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?place ) bind ( if ( bound ( ?naam ), ?naam , concat ( 'Een wegdeel van bronhouder ' , ?bronhouderNaam )) as ?placeName ) bind ( iri ( concat ( 'https://bgt.basisregistraties.overheid.nl/bgt/id/fysiek-voorkomen/' , ?plusFysiekVoorkomen0 )) as ?plusFysiekVoorkomen ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) }","title":"BGT Wegdeel"},{"location":"LDViews/#brt-wegdeel","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix brt : <https://brt.basisregistraties.overheid.nl/brt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?geoCoordinates a sdo : GeoCoordinates ; prov : wasDerivedFrom ?registratie ; sdo : latitude ?latitude ; sdo : longitude ?longitude ; sdo : name 'BRT geometrie' . ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BRT geometrie' ; sdo : polygon ?polygon . ?place a sdo : Place ; prov : wasDerivedFrom ?registratie ; sdo : additionalType brt : Wegdeel , ?fysiekVoorkomen , ?hoofdverkeersgebruik , ?typeInfrastructuur , ?typeWeg , ?verhardingstype ; sdo : geo ?geoCoordinates , ?geoShape ; sdo : name ?name . }","title":"BRT Wegdeel"},{"location":"LDViews/#technische-implementatie-overig","text":"","title":"Technische Implementatie Overig"},{"location":"LDViews/#bgt-brug","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix bgt : <https://bgt.basisregistraties.overheid.nl/bgt/def/> prefix foaf : <http://xmlns.com/foaf/0.1/> prefix nen3610 : <http://definities.geostandaarden.nl/def/nen3610#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> prefix skos : <http://www.w3.org/2004/02/skos/core#> prefix tfg : <https://triplydb.com/Triply/functions/geo/> construct { ?bridge a sdo : Bridge ; prov : wasDerivedFrom ?registratie ; sdo : additionalType ?type ; sdo : geo ?geoShape ; sdo : name ?name . ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?registratie ; sdo : name 'BGT geometrie' ; sdo : polygon ?polygon . } from named <https://bgt.basisregistraties.overheid.nl/bgt/def/> from named <https://bgt.basisregistraties.overheid.nl/bgt/id/graph/instanties> where { # Brug: identity ?registratie bgt : hoortBijTypeOverbrugging bgt : Brug . filter not exists { ?registratie prov : invalidatedAtTime []. } # Brug: the rest ?registratie bgt : bronhouder / skos : prefLabel ?bronhouderNaam ; bgt : geometrie ?vlakRd ; bgt : typeOverbruggingsdeel ?type ; foaf : primaryTopic / bgt : identificatie / nen3610 : lokaalID ?id . bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , ?id )) as ?bridge ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/bgt-' , ?id )) as ?geoShape ) bind ( concat ( 'Een brugdeel van bronhouder ' , ?bronhouderNaam ) as ?name ) bind ( tfg : project ( ?vlakRd ) as ?polygon ) }","title":"BGT Brug"},{"location":"LDViews/#rce-monumenten","text":"De bijbehorende tabel vindt u hier en de bijbehorende Weaver model vindt u hier . prefix ceo : <https://linkeddata.cultureelerfgoed.nl/def/ceo#> prefix geo : <http://www.opengis.net/ont/geosparql#> prefix prov : <http://www.w3.org/ns/prov#> prefix sdo : <https://schema.org/> construct { ?place a sdo : Place ; prov : wasDerivedFrom ?rijksmonument ; sdo : additionalType ceo : Rijksmonument ; sdo : geo ?geoShape ; sdo : name ?name . ?geoShape a sdo : GeoShape ; prov : wasDerivedFrom ?geometrie ; sdo : name 'RCE geometrie' ; sdo : polygon ?polygon . } from named <https://linkeddata.cultureelerfgoed.nl/id/ceo/> where { ?rijksmonument a ceo : Rijksmonument ; ceo : heeftGeometrie ?geometrie ; ceo : rijksmonumentnummer ?nummer . optional { ?rijksmonument ceo : heeftNaam / ceo : naam ?name . } ?geometrie geo : asWKT ?polygon . bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/place/' , str ( ?nummer ))) as ?place ) bind ( iri ( concat ( 'https://data.labs.kadaster.nl/kadaster/kg/id/geo-shape/rce-' , str ( ?nummer ))) as ?geoShape ) }","title":"RCE Monumenten"},{"location":"LinkedData/","text":"Linked Data Linked Data is een formaat waarin data als zogenoemde triples beschikbaar worden gesteld. Triples bestaan uit een subject , predicate en een object . Een voorbeeldje: Tevens zijn objecten in Linked Data uniek identificeerbaar op het web (middels zgn. URIs, of Uniform Resource Identifiers). Zie bijvoorbeeld https://bag2.basisregistraties.overheid.nl/bag/id/object/NL.IMBAG.Pand.0003100000117489 IRI Strategie Deze URIs volgen een vaste vorm, zoveel mogelijk in lijn met de Nederlandse URI strategie . Hierbij gaan wij uit van HTTPS URIs. Wij ondersteunen dan ook standaard geen HTTP URIs. Triple Store Triples worden opgeslagen in een zogenoemde triple store. Bij het Kadaster maken we hierbij gebruik van TriplyDB . Door de data in een triple store beschikbaar te stellen kan de data bevraagd worden met de standaard querytaal SPARQL en services die van deze standaard gebruik maken . Voor het uploaden naar de Triple store van gegenereerde triples (vanuit de Enhancer ) maken wij gebruik van de REST-interface van TriplyDB om de triples te uploaden. Deze documentatie wordt nog uitgebreid met informatie over de upload. Linked Data Registraties Zoals eerder beschreven in de Solution Architecture hanteren wij twee stappen in de ontsluiting van onze Linked Data. In de eerste laag stellen we Linked Data beschikbaar van de basisregistratie in een vorm die zo dicht mogelijk overeen komt met de brondata. Zo is de data Herkenbaar voor domein experts. Governance-technisch duidelijk in beheer van de eigenaar van de data. Pas in de tweede laag brengen we de data naar een meer gebruiksvriendelijk datamodel in de Knowledge Graph .","title":"Linked Data"},{"location":"LinkedData/#linked-data","text":"Linked Data is een formaat waarin data als zogenoemde triples beschikbaar worden gesteld. Triples bestaan uit een subject , predicate en een object . Een voorbeeldje: Tevens zijn objecten in Linked Data uniek identificeerbaar op het web (middels zgn. URIs, of Uniform Resource Identifiers). Zie bijvoorbeeld https://bag2.basisregistraties.overheid.nl/bag/id/object/NL.IMBAG.Pand.0003100000117489","title":"Linked Data"},{"location":"LinkedData/#iri-strategie","text":"Deze URIs volgen een vaste vorm, zoveel mogelijk in lijn met de Nederlandse URI strategie . Hierbij gaan wij uit van HTTPS URIs. Wij ondersteunen dan ook standaard geen HTTP URIs.","title":"IRI Strategie"},{"location":"LinkedData/#triple-store","text":"Triples worden opgeslagen in een zogenoemde triple store. Bij het Kadaster maken we hierbij gebruik van TriplyDB . Door de data in een triple store beschikbaar te stellen kan de data bevraagd worden met de standaard querytaal SPARQL en services die van deze standaard gebruik maken . Voor het uploaden naar de Triple store van gegenereerde triples (vanuit de Enhancer ) maken wij gebruik van de REST-interface van TriplyDB om de triples te uploaden. Deze documentatie wordt nog uitgebreid met informatie over de upload.","title":"Triple Store"},{"location":"LinkedData/#linked-data-registraties","text":"Zoals eerder beschreven in de Solution Architecture hanteren wij twee stappen in de ontsluiting van onze Linked Data. In de eerste laag stellen we Linked Data beschikbaar van de basisregistratie in een vorm die zo dicht mogelijk overeen komt met de brondata. Zo is de data Herkenbaar voor domein experts. Governance-technisch duidelijk in beheer van de eigenaar van de data. Pas in de tweede laag brengen we de data naar een meer gebruiksvriendelijk datamodel in de Knowledge Graph .","title":"Linked Data Registraties"},{"location":"Modelling/","text":"Data Modelling Een belangrijk onderdeel van de databronnen die we bij het Kadaster ontsluiten is het datamodel. Er zijn verschillende organisaties die het beheer van deze datamodellen op zich nemen, zoals Geonovum en Logius. Daar komt bij dat deze datamodellen vaak hergebruik maken van bestaande (web-)standaarden. In het cree\u00ebren van Linked Data zijn deze datamodellen van essenti\u00ebel belang. In deze documentatie vind je dan ook onze aanpak rondom het modelleren van Linked Data.","title":"Overzicht"},{"location":"Modelling/#data-modelling","text":"Een belangrijk onderdeel van de databronnen die we bij het Kadaster ontsluiten is het datamodel. Er zijn verschillende organisaties die het beheer van deze datamodellen op zich nemen, zoals Geonovum en Logius. Daar komt bij dat deze datamodellen vaak hergebruik maken van bestaande (web-)standaarden. In het cree\u00ebren van Linked Data zijn deze datamodellen van essenti\u00ebel belang. In deze documentatie vind je dan ook onze aanpak rondom het modelleren van Linked Data.","title":"Data Modelling"},{"location":"Netwerk/","text":"Netwerk Omdat we zowel open als gesloten data ontsluiten, hebben we beveiliging in zones geimplementeerd. Zo hebben we een zone in Azure staan waar alle open data kan worden ontsloten en een zone binnen het Kadaster waar alleen met behulp van identificerende authenticatie toegang mogelijk is. Voor meer informatie over verbinden met gesloten data, zie gebruik Hieronder is een afbeelding met een schematische weergaven van de twee netwerk zones. Voor meer informatie over de werking van de afgebeelde lagen, zie GraphQL","title":"Netwerk"},{"location":"Netwerk/#netwerk","text":"Omdat we zowel open als gesloten data ontsluiten, hebben we beveiliging in zones geimplementeerd. Zo hebben we een zone in Azure staan waar alle open data kan worden ontsloten en een zone binnen het Kadaster waar alleen met behulp van identificerende authenticatie toegang mogelijk is. Voor meer informatie over verbinden met gesloten data, zie gebruik Hieronder is een afbeelding met een schematische weergaven van de twee netwerk zones. Voor meer informatie over de werking van de afgebeelde lagen, zie GraphQL","title":"Netwerk"},{"location":"Pipeline/","text":"Pipeline Gedurende het gehele proces zoals beschreven in de Solution Architecture maken we zoveel mogelijk gebruik van herbruikbare componenten en maken we zo min mogelijk maatwerk code. Wel begeleiden we het hele proces in pipeline software. Deze pipeline wordt voor het gehele proces van omzetting van brondata tot en met Linked Data omschreven door de volgende plaat: Apache Airflow We maken voor onze pipeline gebruik van het open-source framework Apache Airflow . Dit framework gebruikt minimale Python code om zogenoemde Directe Acyclic Graphs (DAGs) te configureren. DAGs en Tasks Een DAG kan worden ondergesplitst in een aantal taken. Een task beschrijft \u00e9\u00e9n stap in het gehele proces van het omzetten van brondata tot een Linked Data bron. (Of andere ETL activiteiten). Vervolgens kunnen deze taken individueel worden gemonitord en opnieuw worden afgetrapt als er een fout ontstaat. Microservice In de architectuurplaat bovenaan deze pagina wordt omschreven hoe wij onze eerder beschreven componenten hergebruiken om het totale proces vorm te geven. Deze bevat ook een zogenoemde microservice. In de praktijk is dit een Task binnen Airflow, waarin met beperkte code de Enhancer serieel wordt aangesproken en de resultaten als Linked Data wordt verzameld. Bij het verzamelen van deze resultaten wordt ook SHACL validatie toegepast. Op deze manier valideren we of de uiteindelijke Linked Data voldoet aan het datamodel wat we origineel gedefini\u00eberd hebben. Zo voorkomen we fouten in de transformatie.","title":"Pipeline"},{"location":"Pipeline/#pipeline","text":"Gedurende het gehele proces zoals beschreven in de Solution Architecture maken we zoveel mogelijk gebruik van herbruikbare componenten en maken we zo min mogelijk maatwerk code. Wel begeleiden we het hele proces in pipeline software. Deze pipeline wordt voor het gehele proces van omzetting van brondata tot en met Linked Data omschreven door de volgende plaat:","title":"Pipeline"},{"location":"Pipeline/#apache-airflow","text":"We maken voor onze pipeline gebruik van het open-source framework Apache Airflow . Dit framework gebruikt minimale Python code om zogenoemde Directe Acyclic Graphs (DAGs) te configureren.","title":"Apache Airflow"},{"location":"Pipeline/#dags-en-tasks","text":"Een DAG kan worden ondergesplitst in een aantal taken. Een task beschrijft \u00e9\u00e9n stap in het gehele proces van het omzetten van brondata tot een Linked Data bron. (Of andere ETL activiteiten). Vervolgens kunnen deze taken individueel worden gemonitord en opnieuw worden afgetrapt als er een fout ontstaat.","title":"DAGs en Tasks"},{"location":"Pipeline/#microservice","text":"In de architectuurplaat bovenaan deze pagina wordt omschreven hoe wij onze eerder beschreven componenten hergebruiken om het totale proces vorm te geven. Deze bevat ook een zogenoemde microservice. In de praktijk is dit een Task binnen Airflow, waarin met beperkte code de Enhancer serieel wordt aangesproken en de resultaten als Linked Data wordt verzameld. Bij het verzamelen van deze resultaten wordt ook SHACL validatie toegepast. Op deze manier valideren we of de uiteindelijke Linked Data voldoet aan het datamodel wat we origineel gedefini\u00eberd hebben. Zo voorkomen we fouten in de transformatie.","title":"Microservice"},{"location":"Semantics/","text":"Data Modelling In linked data zijn er twee soorten definities: klassen en eigenschappen. Deze sectie legt vast hoe deze definities gemodelleerd worden. Generieke modelleereisen Deze sectie behandelt de modelleereisen die zowel voor klassen alsook voor eigenschappen worden toegepast. Verplichte eigenschappen: skos:definition Deze relatie moet worden gebruik om een menselijk leesbare definitie van de klasse vast te leggen. Deze eigenschap is vereist omdat anders niet duidelijk is wat door de klasse wordt aangeduid. skos:prefLabel Deze relatie moet worden gebruikt om de offici\u00eble naam van een klasse vast te leggen. Iedere klasse moet precies \u00e9\u00e9n offici\u00eble naam hebben. De waardes van deze eigenschap moeten een taal code (bijvoorbeeld @nl ) hebben. Toegestane eigenschappen: dct:source Deze eigenschap wordt gebruikt om de bron op te geven waar deze definitie wordt vastgelegd. rdfs:seeAlso Deze relatie geeft een link naar een intern of extern document waarin deze klasse wordt beschreven. Deze relatie is met name nuttig wanneer een data model al elders (maar niet als linked data) is vastgelegd. Zo is het linked data model optimaal verbonden met andere modellen en documentatie. De waarde van deze eigenschap moet van het type `xsd:anyURI` zijn. skos:altLabel Deze relatie moet worden gebruikt om alle alternatieve namen van een klasse vast te leggen. Een alternatieve naam is iedere naam die niet de geprefereerde naam is. Wanneer een klasse geen alternatieve namen heeft zal deze eigenschap voor die klasse ontbreken. De waardes van deze eigenschap moeten een taal code (bijvoorbeeld @nl ) hebben. Modelleereisen voor klassen Deze sectie behandelt de modelleereisen voor klassen. Deze eisen zijn aanvullend ten opzichte van de vastgelegde generieke eisen. Voor iedere verzameling van objecten die in een dataset voorkomt moet een klasse worden aangemaakt. Of een term X die in een dataset voorkomt een verzameling van objecten aanduidt kan herkend worden door het volgende zinnetje te maken: \"Er zijn twee X-en.\" Wanneer dit zinnetje betekenisvol is hebben we te maken met een klasse. Als voorbeeld nemen we X=\"gebouw\"; het zinnetje wordt dan: \"Er zijn twee gebouwen\". Dit zinnetje is betekenisvol, dus \"gebouw\" is een klasse. Verplichte eigenschappen: rdfs:subClassOf Deze relatie geeft aan onder welke generiekere klasse een klasse behoort. Hierbij is het van belang dat de meer specifieke generiekere klasse wordt opgegeven. Het is mogelijk om meer dan \u00e9\u00e9n generiekere klasse op te geven, maar dit is meestal niet wenselijk. Iedere klasse moet een generiekere klasse hebben, desnoods kan de meest generieke klasse rdfs:Resource worden gebruikt. Hier volgt een volledig uitgewerkt voorbeeld van een klasse vastlegging: brt: Gebouw rdfs: seeAlso \"https://kadaster.github.io/imbrt/#75-objectklasse-gebouw\" ^^ xsd:anyURI ; rdfs: subClassOf nen3610: Top10nlObject ; skos: definition \"Vrijstaande, overdekte en geheel of gedeeltelijk met wanden omsloten toegankelijke ruimte of door pilaren ondersteunde dakconstructie, die direct of indirect met de grond is verbonden.\" @ nl ; skos: prefLabel \"Gebouw\" @ nl ; skos: scopeNote \"\"\" <section lang=\"nl\"> <h1>Inwinningscriteria</h1> <p>Met ingang van april 2020 is het muteren van gebouwen in de BRT gebaseerd op mutaties in de Basisregistraties Adressen en Gebouwen (BAG). Alle mutaties die in de BAG plaatsvinden worden in enigszins gegeneraliseerde vorm overgenomen in de BRT. Als peildatum voor de BAG-mutaties is hierbij 1 juni gebruikt, omdat dit het beste aansluit bij de luchtfoto\u2019s waarmee de andere elementen in de BRT worden bijgewerkt.</p> <p>Een gebouw moet een permanent karakter hebben en bedoeld zijn voor verblijf, handel, verkeer en/of arbeid.</p> <p>De orthogonale projectie van de uiterste buitenrand inclusief carports en passages (overbouwing van een weg reikend van gebouw tot gebouw, enkel bestaand uit een al dan niet licht doorlatend dak), exclusief luifels, op onderliggend terrein, wegen of water wordt opgenomen. Een stationsoverkapping wordt ingewonnenn als gebouw, een overkapping van alleen een perron op een station wordt niet opgenomen. Bebouwing boven (hoge) poorten maakt onderdeel uit van de opgaande bebouwing. Bebouwing, geheel of gedeeltelijk gelegen over een ander object, wordt als bebouwing aangegeven.</p> <p>De minimumgrootte voor een gebouwvlak is 9 m\u00b2.</p> <p>Gebouwen, gelegen onder de projectie van andere gebouwen wordt niet opgenomen. Is echter een deel van het gebouw wel zichtbaar dan wordt het gehele gebouw op basis van interpretatie zo goed mogelijk aangegeven waarbij het gebouwdeel gelegen onder het object een hoogteniveau kleiner dan nul krijgt.</p> <p>Twee stukken bebouwing worden samengevoegd indien de afstand tussen de orthogonale projecties 2 meter of minder bedraagt, behalve als er tussen de gebouwen een weg of water voorkomt en als de gebouwen in verschillende rijen van bebouwing staan, gezien vanaf de ontsluitingsweg.</p> <p>Uitbouwsels tot plm. 3x3 meter en luifels worden verwaarloosd. Inspringingen tot plm. 3x3 meter worden aangegeven als onderdeel van de bebouwing. Een loopgang of loopbrug wordt als onderdeel van het gebouw opgenomen indien deze 3 meter of breder is. Bij openingen groter dan plm. 3 meter wordt het hierdoor ontsloten binnenterrein wel gegeven, waarna een nieuwe afweging gemaakt wordt of er sprake is van een gebouw dan wel een bebouwd oppervlak.</p> <p>Een open gedeelte binnen bebouwing (waarbij loopgangen buiten beschouwing worden gelaten), niet direct bereikbaar vanaf de openbare weg, kleiner dan ongeveer 1000 m\u00b2 wordt niet opgenomen. Deze regel geldt echter niet voor boerderijen met ommuurde binnenplaats zoals deze in Limburg voorkomen.</p> <p>Het al dan niet aangegeven van een gebouw is afhankelijk van de omgeving waarin dit gebouw staat. In een gebied met weinig bebouwing wordt elk gebouw aangegeven (vanwege de ori\u00ebnterende waarde).</p> <p>In een gebied met drukke bebouwing worden gebouwen kleiner dan 50 m\u00b2 achter de eerste rij gebouwen gezien vanaf de ontsluitingsweg niet opgenomen.</p> <p>Boothuizen worden als gebouw ingewonnen.</p> <p>Op een volkstuincomplex worden de gebouwen gegeneraliseerd weergegeven.</p> <p>Een kas wordt aangegeven als een gebouw van het type kas, warenhuis, indien groter dan 200 m\u00b2.</p> <p>Hooibergen worden niet opgenomen. Echter wordt een carport, al dan niet vrijstaand, wel opgenomen.</p> <p>Bij een steeg (nauwe straat binnen bebouwd gebied, smaller dan 2 meter) wordt de weg als vlak i.p.v. als lijn ingewonnen en worden de gebouwen vertekend opgenomen.</p> <p>De torens van een stormvloedkering worden als gebouw ingewonnen.</p> <p>Een tribune die een geheel vormt met de bebouwing wordt als gebouw ingewonnen.</p> <p>Voor bestaande bebouwing gelden, in tegenstelling tot nieuw in te winnen gebouwen, afwijkende inwinregels. Kleinere mutaties in de vorm van het gebouw, zoals een aanbouw of carport, worden bij de actualisering genegeerd. Deze regel is ge\u00efntroduceerd vanwege het gebruik van de TOP10NL gebouwen door het CBS en nu nog actief vanwege de komst van de BAG als bron voor de gebouwen in TOP10NL.</p> <p>Drijvende bebouwing met het voorkomen van een huis en met een permanente (flexibele) verankering (waterwoning) wordt aangegeven als normale bebouwing. Het onderliggende waterdeel wordt overkluisd gegeven. Woonboten worden, ongeacht de verschijningsvorm, niet aangegeven.</p> <p>Loopstallen ten behoeve van stalling van rundvee (ook wel ligboxenstal genoemd), zowel voorkomend met een open als een gesloten (dak)constructie worden als gebouw ingewonnen.</p> <p>Op een volkstuincomplex worden de gebouwen gegeneraliseerd weergegeven.</p> </section>\"\"\"^^rdf:HTML. brt:GebouwRegistratie rdfs:subClassOf brt:Registratie; skos:definition \"\"\" <section lang=\"nl\"> <p>Een registratie van een <a href=\"https://brt.basisregistraties.overheid.nl/top10nl/def/Gebouw\">gebouw</a>.</p> </section>\"\"\"^^rdf:HTML; skos:prefLabel \"Gebouw registratie\"@nl. Modelleereisen voor eigenschappen Linked data eigenschappen worden gebruikt om attributen en relaties mee aan te duiden. Een attribuut wordt gebruikt om waardes aan objecten te relateren. In linked data zijn deze waardes altijd voorzien van een datatype. Een voorbeeld van een attribuut is de naam van een gegeven. De naam wordt v (datatype: string). Een ander voorbeeld is het aantal inwoners (datatype: natuurlijk getal). Een relatie wordt gebruikt om objecten aan objecten te relateren. In linked data zijn de gerelateerde objecten gerepresenteerd als IRIs. Een voorbeeld van een relatie is Verplichte eigenschappen: rdf:type Eigenschappen die attributen aanduiden moeten van het type owl:DatatypeProperty zijn. Eigenschappen die relaties aanduiden moeten van het type owl:ObjectProperty zijn. rdfs:domain Het domein geeft het type aan van de instanties waarop deze eigenschap wordt toegepast. rdfs:range De range geeft het type aan van de waardes die deze eigenschap kan hebben. Hier volgt een volledig uitgewerkt voorbeeld van een eigenschap die een attribuut aanduidt: brt: aantalInwoners a owl: DatatypeProperty ; rdfs: domain brt: PlaatsRegistratie ; rdfs: range xsd: nonNegativeInteger ; rdfs: seeAlso \"https://kadaster.github.io/imbrt/#attribuut-aantal-inwoners\" ^^ xsd:anyURI ; skos: definition \"Het aantal inwoners dat in een plaats woont.\" @ nl ; skos: prefLabel \"heeft aantal inwoners\" @ nl ; skos: scopeNote \"\"\" <section lang=\"nl\"> <p>Het aantal inwoners van een topografische bebouwde kom is het totaal van alle mensen die als bewoner op een van de binnen het vlak gelegen adressen geregistreerd staan in de Basisregistratie Personen (BRP) op peildatum 1 juli van het jaar waarin de luchtfoto\u2019s genomen zijn, die gebruikt zijn voor het intekenen van de vlakken. Omdat voor de vlakbegrenzing de oever van een water als grens is aangehouden, waardoor woonboten langs een oever niet binnen een vlak vallen, is het inwoneraantal van het vlak vermeerderd met de mensen die als bewoner van een woonboot grenzend aan een vlak geregistreerd staan. Hiervoor is een buffer van 25 meter aangehouden gerekend vanaf de vlakgrens.</p> <p>Bij deze telling moet opgemerkt dat niet alle in de BRP geregistreerde inwoners van Nederland gekoppeld zijn aan een adreslocatie. Het gaat echter om minder dan 0,1% van de in de BRP geregistreerde inwoners die niet bij de berekening wordt meegenomen.</p> <p>De berekening en telling van het aantal inwoners van de topografische bebouwde kommen wordt uitgevoerd door het Centraal Bureau voor de Statistiek (CBS), dat toegang heeft tot de BRP-gegevens.</p> </section>\"\"\"^^rdf:HTML. Hier volgt een volledig uitgewerkt voorbeeld van een eigenschap die een relatie aanduidt: bag: ligtAan a owl: ObjectProperty ; dct: source \"Grondslagen Basis Registratie Adressen versie 2.0\" @ nl ; rdfs: domain bag: NummeraanduidingRegistratie ; rdfs: range bag: OpenbareRuimte ; rdfs: seeAlso \"https://imbag.github.io/catalogus/hoofdstukken/attributen--relaties#7312-relatie-ligt-aan-gerelateerde-openbare-ruimte\" ^^ xsd:anyURI ; skos: altLabel \"heeft gerelateerde openbare ruimte\" @ nl ; skos: definition \"De unieke aanduiding van een Openbare ruimte waaraan een adresseerbaar object is gelegen.\" @ nl ; skos: prefLabel \"ligt aan\" @ nl ; skos: scopeNote \"Een adresseerbaar object ligt in een woonplaats.\" @ nl .","title":"Definities"},{"location":"Semantics/#data-modelling","text":"In linked data zijn er twee soorten definities: klassen en eigenschappen. Deze sectie legt vast hoe deze definities gemodelleerd worden.","title":"Data Modelling"},{"location":"Semantics/#generieke-modelleereisen","text":"Deze sectie behandelt de modelleereisen die zowel voor klassen alsook voor eigenschappen worden toegepast. Verplichte eigenschappen: skos:definition Deze relatie moet worden gebruik om een menselijk leesbare definitie van de klasse vast te leggen. Deze eigenschap is vereist omdat anders niet duidelijk is wat door de klasse wordt aangeduid. skos:prefLabel Deze relatie moet worden gebruikt om de offici\u00eble naam van een klasse vast te leggen. Iedere klasse moet precies \u00e9\u00e9n offici\u00eble naam hebben. De waardes van deze eigenschap moeten een taal code (bijvoorbeeld @nl ) hebben. Toegestane eigenschappen: dct:source Deze eigenschap wordt gebruikt om de bron op te geven waar deze definitie wordt vastgelegd. rdfs:seeAlso Deze relatie geeft een link naar een intern of extern document waarin deze klasse wordt beschreven. Deze relatie is met name nuttig wanneer een data model al elders (maar niet als linked data) is vastgelegd. Zo is het linked data model optimaal verbonden met andere modellen en documentatie. De waarde van deze eigenschap moet van het type `xsd:anyURI` zijn. skos:altLabel Deze relatie moet worden gebruikt om alle alternatieve namen van een klasse vast te leggen. Een alternatieve naam is iedere naam die niet de geprefereerde naam is. Wanneer een klasse geen alternatieve namen heeft zal deze eigenschap voor die klasse ontbreken. De waardes van deze eigenschap moeten een taal code (bijvoorbeeld @nl ) hebben.","title":"Generieke modelleereisen"},{"location":"Semantics/#modelleereisen-voor-klassen","text":"Deze sectie behandelt de modelleereisen voor klassen. Deze eisen zijn aanvullend ten opzichte van de vastgelegde generieke eisen. Voor iedere verzameling van objecten die in een dataset voorkomt moet een klasse worden aangemaakt. Of een term X die in een dataset voorkomt een verzameling van objecten aanduidt kan herkend worden door het volgende zinnetje te maken: \"Er zijn twee X-en.\" Wanneer dit zinnetje betekenisvol is hebben we te maken met een klasse. Als voorbeeld nemen we X=\"gebouw\"; het zinnetje wordt dan: \"Er zijn twee gebouwen\". Dit zinnetje is betekenisvol, dus \"gebouw\" is een klasse. Verplichte eigenschappen: rdfs:subClassOf Deze relatie geeft aan onder welke generiekere klasse een klasse behoort. Hierbij is het van belang dat de meer specifieke generiekere klasse wordt opgegeven. Het is mogelijk om meer dan \u00e9\u00e9n generiekere klasse op te geven, maar dit is meestal niet wenselijk. Iedere klasse moet een generiekere klasse hebben, desnoods kan de meest generieke klasse rdfs:Resource worden gebruikt. Hier volgt een volledig uitgewerkt voorbeeld van een klasse vastlegging: brt: Gebouw rdfs: seeAlso \"https://kadaster.github.io/imbrt/#75-objectklasse-gebouw\" ^^ xsd:anyURI ; rdfs: subClassOf nen3610: Top10nlObject ; skos: definition \"Vrijstaande, overdekte en geheel of gedeeltelijk met wanden omsloten toegankelijke ruimte of door pilaren ondersteunde dakconstructie, die direct of indirect met de grond is verbonden.\" @ nl ; skos: prefLabel \"Gebouw\" @ nl ; skos: scopeNote \"\"\" <section lang=\"nl\"> <h1>Inwinningscriteria</h1> <p>Met ingang van april 2020 is het muteren van gebouwen in de BRT gebaseerd op mutaties in de Basisregistraties Adressen en Gebouwen (BAG). Alle mutaties die in de BAG plaatsvinden worden in enigszins gegeneraliseerde vorm overgenomen in de BRT. Als peildatum voor de BAG-mutaties is hierbij 1 juni gebruikt, omdat dit het beste aansluit bij de luchtfoto\u2019s waarmee de andere elementen in de BRT worden bijgewerkt.</p> <p>Een gebouw moet een permanent karakter hebben en bedoeld zijn voor verblijf, handel, verkeer en/of arbeid.</p> <p>De orthogonale projectie van de uiterste buitenrand inclusief carports en passages (overbouwing van een weg reikend van gebouw tot gebouw, enkel bestaand uit een al dan niet licht doorlatend dak), exclusief luifels, op onderliggend terrein, wegen of water wordt opgenomen. Een stationsoverkapping wordt ingewonnenn als gebouw, een overkapping van alleen een perron op een station wordt niet opgenomen. Bebouwing boven (hoge) poorten maakt onderdeel uit van de opgaande bebouwing. Bebouwing, geheel of gedeeltelijk gelegen over een ander object, wordt als bebouwing aangegeven.</p> <p>De minimumgrootte voor een gebouwvlak is 9 m\u00b2.</p> <p>Gebouwen, gelegen onder de projectie van andere gebouwen wordt niet opgenomen. Is echter een deel van het gebouw wel zichtbaar dan wordt het gehele gebouw op basis van interpretatie zo goed mogelijk aangegeven waarbij het gebouwdeel gelegen onder het object een hoogteniveau kleiner dan nul krijgt.</p> <p>Twee stukken bebouwing worden samengevoegd indien de afstand tussen de orthogonale projecties 2 meter of minder bedraagt, behalve als er tussen de gebouwen een weg of water voorkomt en als de gebouwen in verschillende rijen van bebouwing staan, gezien vanaf de ontsluitingsweg.</p> <p>Uitbouwsels tot plm. 3x3 meter en luifels worden verwaarloosd. Inspringingen tot plm. 3x3 meter worden aangegeven als onderdeel van de bebouwing. Een loopgang of loopbrug wordt als onderdeel van het gebouw opgenomen indien deze 3 meter of breder is. Bij openingen groter dan plm. 3 meter wordt het hierdoor ontsloten binnenterrein wel gegeven, waarna een nieuwe afweging gemaakt wordt of er sprake is van een gebouw dan wel een bebouwd oppervlak.</p> <p>Een open gedeelte binnen bebouwing (waarbij loopgangen buiten beschouwing worden gelaten), niet direct bereikbaar vanaf de openbare weg, kleiner dan ongeveer 1000 m\u00b2 wordt niet opgenomen. Deze regel geldt echter niet voor boerderijen met ommuurde binnenplaats zoals deze in Limburg voorkomen.</p> <p>Het al dan niet aangegeven van een gebouw is afhankelijk van de omgeving waarin dit gebouw staat. In een gebied met weinig bebouwing wordt elk gebouw aangegeven (vanwege de ori\u00ebnterende waarde).</p> <p>In een gebied met drukke bebouwing worden gebouwen kleiner dan 50 m\u00b2 achter de eerste rij gebouwen gezien vanaf de ontsluitingsweg niet opgenomen.</p> <p>Boothuizen worden als gebouw ingewonnen.</p> <p>Op een volkstuincomplex worden de gebouwen gegeneraliseerd weergegeven.</p> <p>Een kas wordt aangegeven als een gebouw van het type kas, warenhuis, indien groter dan 200 m\u00b2.</p> <p>Hooibergen worden niet opgenomen. Echter wordt een carport, al dan niet vrijstaand, wel opgenomen.</p> <p>Bij een steeg (nauwe straat binnen bebouwd gebied, smaller dan 2 meter) wordt de weg als vlak i.p.v. als lijn ingewonnen en worden de gebouwen vertekend opgenomen.</p> <p>De torens van een stormvloedkering worden als gebouw ingewonnen.</p> <p>Een tribune die een geheel vormt met de bebouwing wordt als gebouw ingewonnen.</p> <p>Voor bestaande bebouwing gelden, in tegenstelling tot nieuw in te winnen gebouwen, afwijkende inwinregels. Kleinere mutaties in de vorm van het gebouw, zoals een aanbouw of carport, worden bij de actualisering genegeerd. Deze regel is ge\u00efntroduceerd vanwege het gebruik van de TOP10NL gebouwen door het CBS en nu nog actief vanwege de komst van de BAG als bron voor de gebouwen in TOP10NL.</p> <p>Drijvende bebouwing met het voorkomen van een huis en met een permanente (flexibele) verankering (waterwoning) wordt aangegeven als normale bebouwing. Het onderliggende waterdeel wordt overkluisd gegeven. Woonboten worden, ongeacht de verschijningsvorm, niet aangegeven.</p> <p>Loopstallen ten behoeve van stalling van rundvee (ook wel ligboxenstal genoemd), zowel voorkomend met een open als een gesloten (dak)constructie worden als gebouw ingewonnen.</p> <p>Op een volkstuincomplex worden de gebouwen gegeneraliseerd weergegeven.</p> </section>\"\"\"^^rdf:HTML. brt:GebouwRegistratie rdfs:subClassOf brt:Registratie; skos:definition \"\"\" <section lang=\"nl\"> <p>Een registratie van een <a href=\"https://brt.basisregistraties.overheid.nl/top10nl/def/Gebouw\">gebouw</a>.</p> </section>\"\"\"^^rdf:HTML; skos:prefLabel \"Gebouw registratie\"@nl.","title":"Modelleereisen voor klassen"},{"location":"Semantics/#modelleereisen-voor-eigenschappen","text":"Linked data eigenschappen worden gebruikt om attributen en relaties mee aan te duiden. Een attribuut wordt gebruikt om waardes aan objecten te relateren. In linked data zijn deze waardes altijd voorzien van een datatype. Een voorbeeld van een attribuut is de naam van een gegeven. De naam wordt v (datatype: string). Een ander voorbeeld is het aantal inwoners (datatype: natuurlijk getal). Een relatie wordt gebruikt om objecten aan objecten te relateren. In linked data zijn de gerelateerde objecten gerepresenteerd als IRIs. Een voorbeeld van een relatie is Verplichte eigenschappen: rdf:type Eigenschappen die attributen aanduiden moeten van het type owl:DatatypeProperty zijn. Eigenschappen die relaties aanduiden moeten van het type owl:ObjectProperty zijn. rdfs:domain Het domein geeft het type aan van de instanties waarop deze eigenschap wordt toegepast. rdfs:range De range geeft het type aan van de waardes die deze eigenschap kan hebben. Hier volgt een volledig uitgewerkt voorbeeld van een eigenschap die een attribuut aanduidt: brt: aantalInwoners a owl: DatatypeProperty ; rdfs: domain brt: PlaatsRegistratie ; rdfs: range xsd: nonNegativeInteger ; rdfs: seeAlso \"https://kadaster.github.io/imbrt/#attribuut-aantal-inwoners\" ^^ xsd:anyURI ; skos: definition \"Het aantal inwoners dat in een plaats woont.\" @ nl ; skos: prefLabel \"heeft aantal inwoners\" @ nl ; skos: scopeNote \"\"\" <section lang=\"nl\"> <p>Het aantal inwoners van een topografische bebouwde kom is het totaal van alle mensen die als bewoner op een van de binnen het vlak gelegen adressen geregistreerd staan in de Basisregistratie Personen (BRP) op peildatum 1 juli van het jaar waarin de luchtfoto\u2019s genomen zijn, die gebruikt zijn voor het intekenen van de vlakken. Omdat voor de vlakbegrenzing de oever van een water als grens is aangehouden, waardoor woonboten langs een oever niet binnen een vlak vallen, is het inwoneraantal van het vlak vermeerderd met de mensen die als bewoner van een woonboot grenzend aan een vlak geregistreerd staan. Hiervoor is een buffer van 25 meter aangehouden gerekend vanaf de vlakgrens.</p> <p>Bij deze telling moet opgemerkt dat niet alle in de BRP geregistreerde inwoners van Nederland gekoppeld zijn aan een adreslocatie. Het gaat echter om minder dan 0,1% van de in de BRP geregistreerde inwoners die niet bij de berekening wordt meegenomen.</p> <p>De berekening en telling van het aantal inwoners van de topografische bebouwde kommen wordt uitgevoerd door het Centraal Bureau voor de Statistiek (CBS), dat toegang heeft tot de BRP-gegevens.</p> </section>\"\"\"^^rdf:HTML. Hier volgt een volledig uitgewerkt voorbeeld van een eigenschap die een relatie aanduidt: bag: ligtAan a owl: ObjectProperty ; dct: source \"Grondslagen Basis Registratie Adressen versie 2.0\" @ nl ; rdfs: domain bag: NummeraanduidingRegistratie ; rdfs: range bag: OpenbareRuimte ; rdfs: seeAlso \"https://imbag.github.io/catalogus/hoofdstukken/attributen--relaties#7312-relatie-ligt-aan-gerelateerde-openbare-ruimte\" ^^ xsd:anyURI ; skos: altLabel \"heeft gerelateerde openbare ruimte\" @ nl ; skos: definition \"De unieke aanduiding van een Openbare ruimte waaraan een adresseerbaar object is gelegen.\" @ nl ; skos: prefLabel \"ligt aan\" @ nl ; skos: scopeNote \"Een adresseerbaar object ligt in een woonplaats.\" @ nl .","title":"Modelleereisen voor eigenschappen"},{"location":"SparQL/","text":"Linked data ontsluiten middels SPARQL Het endpoint voor SPARQL is hier te vinden: SPARQL Voor meer informatie over deze bron kijk op deze pagina: Kadaster Knowledge Graph Ook zijn hier de enkelvoudige SPARQL endpoints te vinden van bijvoorbeeld de BAG of de BGT. Deze staan op deze lijst: Kadaster data Gebruiken in de browser Het endpoint kan via de YASGUI gebruikt worden om in de browser SPARQL queries af te vuren. Resultaat wordt meteen zichtbaar in tabel of andere vorm zoals configureerbaar in de GUI. Ook kan het endpoint worden gebruikt in applicaties door middel van REST requests op het API endpoint, bijvoorbeeld: https://api.labs.kadaster.nl/datasets/kadaster/kg/services/default/sparql Hier kan met behulp van GET en POST requests een SPARQL query mee uitgevoerd worden. Voor meer gebruik van SPARQL en voorbeelden, kijk op onze website of bij Use Cases","title":"Linked Data (SPARQL)"},{"location":"SparQL/#linked-data-ontsluiten-middels-sparql","text":"Het endpoint voor SPARQL is hier te vinden: SPARQL Voor meer informatie over deze bron kijk op deze pagina: Kadaster Knowledge Graph Ook zijn hier de enkelvoudige SPARQL endpoints te vinden van bijvoorbeeld de BAG of de BGT. Deze staan op deze lijst: Kadaster data","title":"Linked data ontsluiten middels SPARQL"},{"location":"SparQL/#gebruiken-in-de-browser","text":"Het endpoint kan via de YASGUI gebruikt worden om in de browser SPARQL queries af te vuren. Resultaat wordt meteen zichtbaar in tabel of andere vorm zoals configureerbaar in de GUI. Ook kan het endpoint worden gebruikt in applicaties door middel van REST requests op het API endpoint, bijvoorbeeld: https://api.labs.kadaster.nl/datasets/kadaster/kg/services/default/sparql Hier kan met behulp van GET en POST requests een SPARQL query mee uitgevoerd worden. Voor meer gebruik van SPARQL en voorbeelden, kijk op onze website of bij Use Cases","title":"Gebruiken in de browser"},{"location":"Status/","text":"Status Status per: 6 Augustus 2021 Huidige versie: De Kadastrale Kaart (DKK) is bereikbaar middels Linked Data. De Publieksrechtelijke Beperkingen uit de Basisregistratie Kadaster (BRK-PB) is bereikbaar middels Linked Data en GraphQL. De objectviewer is vernieuwd naar een modernere versie gebaseerd op Generieke geocomponenten van het Kadaster. Uploaden van eigen data en deze automatisch koppelen aan basisgegevens is mogelijk. Documentatie over de opbouw van onze Schema.org Knowledge Graph is te vinden onder deze link . In de pijplijn: De koppeling tussen de BRK en BAG (BRK Adressen) wordt beschikbaar gesteld als Linked Data. De Knowledge Graph wordt verrijkt op basis van de toegevoegde data van de laatste tijd. Verschillende quality-of-life verbeteringen voor developers worden doorgevoerd.","title":"Status"},{"location":"Status/#status","text":"Status per: 6 Augustus 2021 Huidige versie: De Kadastrale Kaart (DKK) is bereikbaar middels Linked Data. De Publieksrechtelijke Beperkingen uit de Basisregistratie Kadaster (BRK-PB) is bereikbaar middels Linked Data en GraphQL. De objectviewer is vernieuwd naar een modernere versie gebaseerd op Generieke geocomponenten van het Kadaster. Uploaden van eigen data en deze automatisch koppelen aan basisgegevens is mogelijk. Documentatie over de opbouw van onze Schema.org Knowledge Graph is te vinden onder deze link . In de pijplijn: De koppeling tussen de BRK en BAG (BRK Adressen) wordt beschikbaar gesteld als Linked Data. De Knowledge Graph wordt verrijkt op basis van de toegevoegde data van de laatste tijd. Verschillende quality-of-life verbeteringen voor developers worden doorgevoerd.","title":"Status"},{"location":"UseCases/","text":"Use cases Voor een overzicht van onze Use Cases kun je terecht op Labs.Kadaster .","title":"Overzicht"},{"location":"UseCases/#use-cases","text":"Voor een overzicht van onze Use Cases kun je terecht op Labs.Kadaster .","title":"Use cases"},{"location":"Visie/","text":"Visie op Self-Service GIS Introductie Een belangrijke peiler het strategische meerjarenplan van het Kadaster is \u2018geo-informatie voor iedereen\u2019 te bieden en hiermee het beantwoorden van de meest relevante maatschappelijke vragen te ondersteunen. Hoewel we veel van de data die we momenteel hebben in een voor ontwikkelaars goed bruikbaar technisch format kunnen aanbieden, zal het beschikbaar stellen van data in andere formats en via andere middelen een breder scala aan gebruikers toegang geven om de data van het Kadaster te gebruiken. Onze langetermijnsvisie is om burgers de mogelijkheid te geven om zowel kadastergegevens als gegevens uit andere (open) bronnen te gebruiken, zodanig dat gebruikers de gegevens van Kadaster gemakkelijk kunnen verkennen en deze kunnen combineren met hun eigen gegevens. Daarnaast willen we ruimtelijke analyses van een bepaald niveau die gemakkelijk online (in de browser) kunnen worden uitgevoerd. Dit brengt de gegevens dichter bij de gebruiker, waardoor klanten zelf antwoorden op hun (ruimtelijke) vragen kunnen vinden. Een oplossing hiervoor is het gebruik van webtechnologie\u00ebn om deze \"self-service\" tool naar de eindgebruikers van het Kadaster te brengen in de vorm van een interactieve web mapping interface of web GIS (Geospatial Information System). De volgende pagina geeft enig inzicht in hoe \"self-service GIS\" kan worden bereikt binnen het Kadaster. Doelgroep Het doel van de ontwikkeling van deze self-service tool is om de betrokken gebruiker en actieve burger te voorzien van de middelen om ruimtelijke analyse uit te voeren, als ze proberen om een vraag te beantwoorden. Tot deze gebruikersgroep kan bijvoorbeeld een data- of onderzoeksjournalist behoren, die op zoek is naar een gedragspatroon, een potenti\u00eble nieuwe huiseigenaar die op zoek is naar milieu-informatie over zijn nieuwe woning of een lid van een woningcorporatie die de criminaliteit in zijn buurt wil onderzoeken. Deze gebruikersgroep is doorgaans niet goed thuis in de technische fijne kneepjes van ruimtelijke analyse en de mogelijkheden van een volwaardig GIS pakket, maar is gewoon ge\u00efnteresseerd in het gebruik van (een combinatie van) door het Kadaster verstrekte gegevens en de gegevens van andere aanbieders of hun eigen gegevens om een bepaalde ruimtelijke vraag te beantwoorden. Wat zijn de kenmerken van Self-Service GIS? Esri, de toonaangevende commerci\u00eble leverancier van geo-spatiale software en clouddiensten voor geo-informatie, definieert self-service GIS als een uitbreiding op de typische functionaliteit die binnen een web GIS wordt gevonden. Over het algemeen is een self-service GIS een applicatie die gemakkelijke interactie door de gebruiker en eenvoudige analyse van georuimtelijke gegevens via webgebaseerde geografische toepassingen, mogelijk maakt. Bij het bedienen van de bovengenoemde gebruikersgroep, wordt de vraag gesteld wat de features zijn van self-service GIS. Deze features kunnen zowel de functionaliteit bevatten, die beschikbaar moet zijn voor de gebruiker in de toepassing vanuit het perspectief van de gebruikersinterface, als ook welke gegevens of welke functies van deze gegevens beschikbaar moeten zijn voor de gebruiker in de webtoepassing. Om te bepalen wat de belangrijke features van self-service GIS zijn voor ons doel en de doelgroep van het Kadaster, kijken we ook naar de wensen vanuit onze klanten. Een analyse van welke ruimtelijke vragen de klanten van het Kadaster stellen, wordt uitgevoerd als onderdeel van een interne analyse van de gebruikersbehoeften. Welke vragen worden gesteld, zal benadrukken welke functionaliteit nuttig kan zijn voor de gebruikers in een selfservice GIS-toepassing. Het geeft ook inzicht in hoe gebruikers gebruik willen maken van de gegevens van het Kadaster en met welke andere gegevens de Kadastergegevens meestal worden gecombineerd bij het beantwoorden van ruimtelijke vragen. De features in de visie van het Kadaster voor self-service GIS, zijn ook afhankelijk van de technologische mogelijkheden en toekomstvisie voor het Kadaster als geheel.","title":"Visie"},{"location":"Visie/#visie-op-self-service-gis","text":"","title":"Visie op Self-Service GIS"},{"location":"Visie/#introductie","text":"Een belangrijke peiler het strategische meerjarenplan van het Kadaster is \u2018geo-informatie voor iedereen\u2019 te bieden en hiermee het beantwoorden van de meest relevante maatschappelijke vragen te ondersteunen. Hoewel we veel van de data die we momenteel hebben in een voor ontwikkelaars goed bruikbaar technisch format kunnen aanbieden, zal het beschikbaar stellen van data in andere formats en via andere middelen een breder scala aan gebruikers toegang geven om de data van het Kadaster te gebruiken. Onze langetermijnsvisie is om burgers de mogelijkheid te geven om zowel kadastergegevens als gegevens uit andere (open) bronnen te gebruiken, zodanig dat gebruikers de gegevens van Kadaster gemakkelijk kunnen verkennen en deze kunnen combineren met hun eigen gegevens. Daarnaast willen we ruimtelijke analyses van een bepaald niveau die gemakkelijk online (in de browser) kunnen worden uitgevoerd. Dit brengt de gegevens dichter bij de gebruiker, waardoor klanten zelf antwoorden op hun (ruimtelijke) vragen kunnen vinden. Een oplossing hiervoor is het gebruik van webtechnologie\u00ebn om deze \"self-service\" tool naar de eindgebruikers van het Kadaster te brengen in de vorm van een interactieve web mapping interface of web GIS (Geospatial Information System). De volgende pagina geeft enig inzicht in hoe \"self-service GIS\" kan worden bereikt binnen het Kadaster.","title":"Introductie"},{"location":"Visie/#doelgroep","text":"Het doel van de ontwikkeling van deze self-service tool is om de betrokken gebruiker en actieve burger te voorzien van de middelen om ruimtelijke analyse uit te voeren, als ze proberen om een vraag te beantwoorden. Tot deze gebruikersgroep kan bijvoorbeeld een data- of onderzoeksjournalist behoren, die op zoek is naar een gedragspatroon, een potenti\u00eble nieuwe huiseigenaar die op zoek is naar milieu-informatie over zijn nieuwe woning of een lid van een woningcorporatie die de criminaliteit in zijn buurt wil onderzoeken. Deze gebruikersgroep is doorgaans niet goed thuis in de technische fijne kneepjes van ruimtelijke analyse en de mogelijkheden van een volwaardig GIS pakket, maar is gewoon ge\u00efnteresseerd in het gebruik van (een combinatie van) door het Kadaster verstrekte gegevens en de gegevens van andere aanbieders of hun eigen gegevens om een bepaalde ruimtelijke vraag te beantwoorden.","title":"Doelgroep"},{"location":"Visie/#wat-zijn-de-kenmerken-van-self-service-gis","text":"Esri, de toonaangevende commerci\u00eble leverancier van geo-spatiale software en clouddiensten voor geo-informatie, definieert self-service GIS als een uitbreiding op de typische functionaliteit die binnen een web GIS wordt gevonden. Over het algemeen is een self-service GIS een applicatie die gemakkelijke interactie door de gebruiker en eenvoudige analyse van georuimtelijke gegevens via webgebaseerde geografische toepassingen, mogelijk maakt. Bij het bedienen van de bovengenoemde gebruikersgroep, wordt de vraag gesteld wat de features zijn van self-service GIS. Deze features kunnen zowel de functionaliteit bevatten, die beschikbaar moet zijn voor de gebruiker in de toepassing vanuit het perspectief van de gebruikersinterface, als ook welke gegevens of welke functies van deze gegevens beschikbaar moeten zijn voor de gebruiker in de webtoepassing. Om te bepalen wat de belangrijke features van self-service GIS zijn voor ons doel en de doelgroep van het Kadaster, kijken we ook naar de wensen vanuit onze klanten. Een analyse van welke ruimtelijke vragen de klanten van het Kadaster stellen, wordt uitgevoerd als onderdeel van een interne analyse van de gebruikersbehoeften. Welke vragen worden gesteld, zal benadrukken welke functionaliteit nuttig kan zijn voor de gebruikers in een selfservice GIS-toepassing. Het geeft ook inzicht in hoe gebruikers gebruik willen maken van de gegevens van het Kadaster en met welke andere gegevens de Kadastergegevens meestal worden gecombineerd bij het beantwoorden van ruimtelijke vragen. De features in de visie van het Kadaster voor self-service GIS, zijn ook afhankelijk van de technologische mogelijkheden en toekomstvisie voor het Kadaster als geheel.","title":"Wat zijn de kenmerken van Self-Service GIS?"}]}