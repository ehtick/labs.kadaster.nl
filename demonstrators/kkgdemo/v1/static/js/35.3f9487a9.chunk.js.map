{"version":3,"sources":["components/widgets/ExcelWidget.tsx","hooks/use-force-update.ts"],"names":["LUCKY_CSS","margin","padding","width","height","loadLuckySheetIfNeeded","window","luckysheet","Promise","resolve","reject","resources","loadedCount","resourceLoaded","length","forEach","resource","endsWith","linkElement","document","createElement","rel","href","onload","onerror","head","appendChild","scriptElement","src","getCellIndexes","sheet","highlightParameter","cellIndexes","rowIndex","row","colIndex","col","excelColumnToIndex","range","split","start","end","startRow","parseInt","replace","startCol","endRow","endCol","parseExcelRange","push","data","columnName","index","i","charCodeAt","indexToColumn","column","modulo","String","fromCharCode","Math","floor","ExcelWidget","props","sparqlData","highlightConfigs","results","bindings","map","binding","sheetIndex","value","sheetName","color","useState","sheetloaded","setSheetLoaded","luckysheetId","widgetId","forceUpdate","useForceUpdate","excelUrlFromTopic","pubsub","excelUrlTopic","getFile","url","axios","method","responseType","withCredentials","response","loadExcel","excelUrl","LuckyExcel","file","transformExcelToLucky","exportJson","create","container","sheets","showinfobar","title","userInfo","info","creator","hook","rangeSelect","publishCellLocationAndSheetName","workbookCreateAfter","err","alert","input","colonIndex","indexOf","substring","trimAfterColon","getRangeAxis","getRangeValuesWithFlatte","v","publish","selectedCellLocation","selectedCellValue","currentActiveSheetName","name","useEffect","highlightSparqlData","undoHighlight","useRef","highlight","highlights","allUndos","current","undo","getAllSheets","console","error","findIndex","setSheetActive","undos","cellIndex","cellValue","origBg","bg","setCellFormat","refresh","fastHighlight","allSheets","sheetNameToIndexMap","reduce","filter","cellRanges","join","createRange","origBgs","setRangeFormat","log","query","fastHighlighting","style","display","flexDirection","id","useReducer"],"mappings":"gNAmCMA,EAAY,CAChBC,OAAQ,MACRC,QAAS,MACTC,MAAO,OACPC,OAAQ,QA8QV,SAASC,IACP,OAAIC,OAAOC,WACFC,QAAQC,QAAQH,OAAOC,YAGzB,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAY,CAChB,0EACA,mEACA,kEACA,4EACA,oEACA,iEACA,kEAGEC,EAAc,EAElB,SAASC,MACPD,IACoBD,EAAUG,QAC5BL,EAAQH,OAAOC,WAEnB,CAEAI,EAAUI,SAAQ,SAAAC,GAChB,GAAIA,EAASC,SAAS,QAAS,CAC7B,IAAMC,EAAcC,SAASC,cAAc,QAC3CF,EAAYG,IAAM,aAClBH,EAAYI,KAAON,EACnBE,EAAYK,OAASV,EACrBK,EAAYM,QAAUd,EACtBS,SAASM,KAAKC,YAAYR,EAC5B,MAAO,GAAIF,EAASC,SAAS,OAAQ,CACnC,IAAMU,EAAgBR,SAASC,cAAc,UAC7CO,EAAcC,IAAMZ,EACpBW,EAAcJ,OAASV,EACvBc,EAAcH,QAAUd,EACxBS,SAASM,KAAKC,YAAYC,EAC5B,CACF,GACF,GACF,CAkBA,SAASE,EAAeC,EAAYC,GAClC,IAAMC,EAAoC,GAEpCC,EAAWF,EAAmBG,IAAMH,EAAmBG,IAAM,EAAI,KACjEC,EAAWJ,EAAmBK,IAAMC,EAAmBN,EAAmBK,KAAO,KAEvF,GAAIL,EAAmBO,MAErB,IADA,MA8CJ,SAAyBA,GACvB,MAAmBA,EAAMC,MAAM,KAAI,mBAA9BC,EAAK,KAAEC,EAAG,KAEI,qBAARA,IACTA,EAAMD,GAGR,MAAO,CACLE,SAAUC,SAASH,EAAMI,QAAQ,SAAU,KAAO,EAClDC,SAAUR,EAAmBG,EAAMI,QAAQ,MAAO,KAClDE,OAAQH,SAASF,EAAIG,QAAQ,SAAU,KAAO,EAC9CG,OAAQV,EAAmBI,EAAIG,QAAQ,MAAO,KAElD,CA3DmDI,CAAgBjB,EAAmBO,OAA1EI,EAAQ,EAARA,SAAUI,EAAM,EAANA,OAAQD,EAAQ,EAARA,SAAUE,EAAM,EAANA,OAC3Bd,EAAWS,EAAUT,GAAYa,EAAQb,IAChD,IAAK,IAAIE,EAAWU,EAAUV,GAAYY,EAAQZ,IAChDH,EAAYiB,KAAK,CAAEhB,EAAUE,SAG5B,GAAgB,MAAZF,GAAgC,MAAZE,EAE7B,IADA,IAAMD,EAAMJ,EAAMoB,KAAKjB,GACdE,EAAW,EAAGA,EAAWD,EAAIpB,OAAQqB,IAAY,CAExD,IADaD,EAAIC,GACN,MACXH,EAAYiB,KAAK,CAAEhB,EAAUE,GAC/B,MACK,GAAgB,MAAZA,GAAgC,MAAZF,EAC7B,IAAK,IAAIA,EAAW,EAAGA,EAAWH,EAAMoB,KAAKpC,OAAQmB,IAAY,CACnDH,EAAMoB,KAAKjB,GACNE,IAEjBH,EAAYiB,KAAK,CAAEhB,EAAUE,GAC/B,MACK,GAAgB,MAAZA,GAAgC,MAAZF,EAAkB,CAC/C,IAAMC,EAAMJ,EAAMoB,KAAKjB,GACvB,GAAIC,EACWA,EAAIC,IAEfH,EAAYiB,KAAK,CAAEhB,EAAUE,GAGnC,CAEA,OAAOH,CACT,CAEA,SAASK,EAAmBc,GAI1B,IAHA,IAAIC,EAAQ,EACNtC,EAASqC,EAAWrC,OAEjBuC,EAAI,EAAGA,EAAIvC,EAAQuC,IAAK,CAG/BD,EAAgB,GAARA,GADSD,EAAWG,WAAWD,GAAK,IACZ,CAClC,CAEA,OAAOD,EAAQ,CACjB,CAiBA,SAASG,EAAcH,GACrB,IAAII,EAAS,GAEb,IADAJ,IACOA,EAAQ,GAAG,CACd,IAAIK,GAAUL,EAAQ,GAAK,GAC3BI,EAASE,OAAOC,aAAa,GAAKF,GAAUD,EAC5CJ,EAAQQ,KAAKC,OAAOT,EAAQK,GAAU,GAC1C,CACA,OAAOD,CACT,CACeM,UArZf,SAAqBC,GAenB,IAAMC,EAAaD,EAAMb,KACnBe,EAA0CD,EAAYA,EAAWE,QAAQC,SAASC,KAAI,SAAAC,GAAO,MAAK,CACtGC,WAAYD,EAAQC,WAAY3B,SAAS0B,EAAQC,WAAWC,OAAQ,KACpEC,UAAWH,EAAQG,UAAWH,EAAQG,UAAUD,MAAO,KACvDrC,IAAKmC,EAAQnC,IAAMS,SAAS0B,EAAQnC,IAAIqC,OAAS,KACjDnC,IAAKiC,EAAQjC,IAAMiC,EAAQjC,IAAImC,MAAQ,KACvCjC,MAAO+B,EAAQ/B,MAAQ+B,EAAQ/B,MAAMiC,MAAQ,KAC7CA,MAAOF,EAAQE,MAAQF,EAAQE,MAAMA,MAAQ,KAC7CE,MAAOJ,EAAQI,MAAMF,MACtB,IAAK,GACN,EAAsCG,oBAAS,GAAM,mBAA9CC,EAAW,KAAEC,EAAc,KAE5BC,EAAe,qBAAcd,EAAMe,UAAWlC,QAAQ,IAAK,KAC3DmC,EAAcC,cACdC,EAAoBlB,EAAMmB,OAAOnB,EAAMoB,eAKvCC,EAAO,iDAAG,WAAOC,GAAW,iGACTC,YAAM,CAACD,MAAKE,OAAQ,MAAOC,aAAc,OAAQC,iBAAiB,IAAM,OAAjF,OAARC,EAAQ,yBACPA,EAASxC,MAAI,2CACrB,gBAHY,sCAKPyC,EAAS,iDAAG,WAAOC,GAAgB,qGACjCvF,IAAwB,OACxBE,EAAaD,OAAOC,WACpBsF,EAAavF,OAAOuF,WAC1BjB,GAAe,GACTkB,EAAOV,EAAQQ,GACrBC,EAAWE,sBAAsBD,GAAM,SAACE,GACtCzF,EAAW0F,OAAO,CAChBC,UAAWrB,EACX3B,KAAM8C,EAAWG,OACjBC,aAAa,EACbC,MAAOT,EACPU,SAAUN,EAAWO,KAAKC,QAC1BC,KAAM,CACJC,YAAaC,EACbC,oBAAqB,WAAOhC,GAAe,EAAK,IAGtD,IACA,SAACiC,GACCC,MAAM,4CACR,IACA/B,IAAa,2CACd,gBAvBc,sCAyBT4B,EAAkC,SAAC7E,GACvC,IAQMvB,EAAaD,OAAOC,WACpB+B,EATiB,SAACyE,GACtB,IAAIC,EAAaD,EAAME,QAAQ,KAC/B,OAAoB,IAAhBD,EACOD,EAAMG,UAAU,EAAGF,GAEnBD,CAEb,CAEcI,CAAe5G,EAAW6G,eAAe,IACjD7C,EAAQhE,EAAW8G,2BAA2B,GAAK9G,EAAW8G,2BAA2B,GAAGC,EAAI,OAEtGvD,EAAMwD,QAAQxD,EAAMyD,qBAAsBlF,GAC1CyB,EAAMwD,QAAQxD,EAAM0D,kBAAmBlD,GACvCR,EAAMwD,QAAQxD,EAAM2D,uBAAwB5F,EAAM6F,KACpD,EAEAC,qBAAU,WACJ7D,EAAMoB,cACRQ,EAAUV,GACDlB,EAAM6B,UACfD,EAAU5B,EAAM6B,SAGpB,GAAG,CAAEX,EAAmBlB,EAAM6B,WAE9BgC,qBAAU,WACJjD,GAAakD,GAEnB,GAAG,CAAE7D,EAAYW,IAEjB,IAAMmD,EAAgBC,iBAA8B,MAE9CC,EAAY,SAACC,GACjB,IAGgC,EAH1B1H,EAAaD,OAAOC,WACtB2H,EAA2B,GAAG,cAEZD,GAAU,qBAAG,IAM7B3D,EANG0D,EAAS,QAQhB,GAPIF,EAAcK,UAChBL,EAAcK,QAAQpH,SAAQ,SAAAqH,GAAI,OAAIA,GAAM,IAC5CN,EAAcK,QAAU,IAKE,MAAxBH,EAAU1D,YAEZ,IADAA,EAAa0D,EAAU1D,YACN,GAAKA,GAAc/D,EAAW8H,eAAevH,OACS,OAArEwH,QAAQC,MAAM,gCAAD,OAAiCP,EAAU1D,aAAa,eAGlE,KAAI0D,EAAUxD,UAMb,MAAD,WAJL,GADAF,EAAc/D,EAAW8H,eAAeG,WAAU,SAAC1G,GAAU,OAAKA,EAAM6F,OAASK,EAAUxD,SAAS,IAChGF,EAAa,EAC6C,OAA5DgE,QAAQC,MAAM,wBAAD,OAAyBP,EAAUxD,YAAY,UAKhE,CAEA,IAAM1C,EAAQvB,EAAW8H,eAAe/D,GACxC/D,EAAWkI,eAAenE,GAK1B,IAHA,IAAMoE,EAAwB,GAExB1G,EAAcH,EAAeC,EAAOkG,GAAW,aAChD,IAAMW,EAAS,KACZC,EAAY9G,EAAMoB,KAAKyF,EAAU,IAAIA,EAAU,IAAM7G,EAAMoB,KAAKyF,EAAU,IAAIA,EAAU,IAAIrB,EAAI,KACtG,GAAIU,EAAUzD,OAASqE,GAAaZ,EAAUzD,QAAUqE,EAAW,CACjE,IAAMC,EAAS/G,EAAMoB,KAAKyF,EAAU,IAAIA,EAAU,IAAM7G,EAAMoB,KAAKyF,EAAU,IAAIA,EAAU,IAAIG,GAAK,UACpGvI,EAAWwI,cAAcJ,EAAU,GAAIA,EAAU,GAAI,KAAMX,EAAUvD,OACrEiE,EAAMzF,MAAK,kBAAM1C,EAAWwI,cAAcJ,EAAU,GAAIA,EAAU,GAAI,KAAME,EAAO,GACrF,CACF,EAPA,MAAwB7G,EAAW,mBASnCkG,EAASjF,MAAK,WACZ1C,EAAWkI,eAAenE,GAC1BoE,EAAM3H,SAAQ,SAAAqH,GAAI,OAAIA,GAAM,GAC9B,GACF,EA3CA,8BA6CA,+BACA7H,EAAWyI,UAEXlB,EAAcK,QAAUD,CAC1B,EAMMe,EAAgB,SAAChB,GACrB,IASgC,EAT1B1H,EAAaD,OAAOC,WACpB2I,EAAY3I,EAAW8H,eACvBc,EAAsBD,EAAUE,QAAO,SAAChF,EAAUtC,EAAWsB,GAEjE,OADAgB,EAAItC,EAAM6F,MAAQvE,EACXgB,CACT,GAAG,CAAC,GAEA8D,EAA2B,GAAG,cAEZD,GAAU,qBAAG,IAM7B3D,EANG0D,EAAS,QAQhB,GAPIF,EAAcK,UAChBL,EAAcK,QAAQpH,SAAQ,SAAAqH,GAAI,OAAIA,GAAM,IAC5CN,EAAcK,QAAU,IAKE,MAAxBH,EAAU1D,YAEZ,IADAA,EAAa0D,EAAU1D,YACN,GAAKA,GAAc/D,EAAW8H,eAAevH,OACS,OAArEwH,QAAQC,MAAM,gCAAD,OAAiCP,EAAU1D,aAAa,eAGlE,KAAI0D,EAAUxD,UAMb,MAAD,WAJL,IADAF,EAAc6E,EAAoBnB,EAAUxD,YAC3B,EAC6C,OAA5D8D,QAAQC,MAAM,wBAAD,OAAyBP,EAAUxD,YAAY,UAKhE,CAEA,IAAM1C,EAAQoH,EAAU5E,GACxB/D,EAAWkI,eAAenE,GAE1B,IAAMoE,EAAwB,GAExB1G,EAAcH,EAAeC,EAAOkG,GAAWqB,QAAO,YAAiB,IAAD,mBAAdnH,EAAG,KAAEE,EAAG,KAC9DwG,EAAY9G,EAAMoB,KAAKhB,GAAKE,GAAON,EAAMoB,KAAKhB,GAAKE,GAAKkF,EAAI,KAClE,OAAOU,EAAUzD,OAASqE,GAAaZ,EAAUzD,QAAUqE,CAC7D,IAEA,GAAI5G,EAAYlB,OAAS,EAAG,CAC1B,IAAMwI,EAjDQ,SAACtH,GACnB,OAAOA,EAAYoC,KAAI,mCAAElC,EAAG,KAAEE,EAAG,qBAASmB,EAAcnB,IAAI,OAAGF,EAAM,EAAC,IAAIqH,KAAK,IACjF,CA+CyBC,CAAYxH,GACzByH,EAAUzH,EAAYoC,KAAI,mCAAElC,EAAG,KAAEE,EAAG,YAAMN,EAAMoB,KAAKhB,GAAKE,GAAON,EAAMoB,KAAKhB,GAAKE,GAAK0G,GAAK,SAAS,IAE1GvI,EAAWmJ,eAAe,KAAM1B,EAAUvD,MAAO,CAACnC,MAAOgH,IAEzDZ,EAAMzF,MAAK,WACTwG,EAAQ1I,SAAQ,SAAC8H,EAAQxF,GACvB9C,EAAWwI,cAAc/G,EAAYqB,GAAG,GAAIrB,EAAYqB,GAAG,GAAI,KAAMwF,EACvE,GACF,GACF,CAEAX,EAASjF,MAAK,WACZ1C,EAAWkI,eAAenE,GAC1BoE,EAAM3H,SAAQ,SAAAqH,GAAI,OAAIA,GAAM,GAC9B,GACF,EAnDA,8BAqDA,+BACA7H,EAAWyI,UAEXlB,EAAcK,QAAUD,CAC1B,EAEML,EAAmB,iDAAG,wFACT,MAAZ9D,EAAMb,MAAkC,MAApBa,EAAMb,KAAKgB,SAA8C,MAA7BH,EAAMb,KAAKgB,QAAQC,UAAyD,IAAvCJ,EAAMb,KAAKgB,QAAQC,SAASrD,OAClHwH,QAAQqB,IAAI,+BAAgC5F,EAAM6F,OAE9C7F,EAAM8F,iBACRZ,EAAchF,GAEd+D,EAAU/D,GAEb,2CACJ,kBAVwB,mCAmBzB,OACE,sBAAK6F,MAAO,CACV3J,MAAO,OACPC,OAAQ,OACR2J,QAAS,OACTC,cAAe,UACf,UACA,qBACEC,GAAIpF,EACJiF,MAAO9J,KA9NK,IAyOpB,C,uFC9SO,SAASgF,IAGd,MAAwBkF,sBAAW,iBAAO,CAAC,CAAC,GAAG,CAAC,GAChD,OADkD,iBAA9B,EAEtB,C","file":"static/js/35.3f9487a9.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\"\nimport { useForceUpdate } from \"../../hooks/use-force-update\"\nimport { SparqlResults } from \"../../helpers/sparqlResultHelpers\"\nimport axios from \"axios\"\n\ndeclare global {\n  interface Window {\n    luckysheet: any\n    LuckyExcel: any\n  }\n}\n\ninterface HighlightParameters {\n  sheetIndex: number | null\n  sheetName: string | null\n  row: number | null\n  col: string | null\n  range: string | null\n  value: string | null\n  color: string\n}\n\ninterface LuckSheetConfig {\n  name: string, // Worksheet name\n  index : number, // Worksheet index\n  status: boolean, // Worksheet active status\n  hide: boolean, // Whether worksheet hide \n  row: number, // the number of rows in a sheet\n  column: number, // the number of columns in a sheet\n}\n\ntype HighlightSparQLResults = SparqlResults<\"sheetIndex\" | \"sheetName\" | \"row\" | \"col\" | \"value\" | \"range\" | \"color\" >\n\n\n\nconst LUCKY_CSS = {\n  margin: '0px',\n  padding: '0px',\n  width: '100%',\n  height: '100%'\n} as const\n\nfunction ExcelWidget(props: {\n  query: string\n  data?: HighlightSparQLResults\n  pubsub: any\n  excelUrl: string\n  excelUrlTopic: string\n  selectedCellLocation: string\n  selectedCellValue: string\n  currentActiveSheetName: string\n  highlightColor: string\n  fastHighlighting: boolean\n  queryCellsForHighlighting: string\n  widgetId: string\n  publish: (topic: string, value: unknown) => void\n}) {\n  const sparqlData = props.data\n  const highlightConfigs: HighlightParameters[] = sparqlData? sparqlData.results.bindings.map(binding => ({\n    sheetIndex: binding.sheetIndex? parseInt(binding.sheetIndex.value): null,\n    sheetName: binding.sheetName? binding.sheetName.value: null,\n    row: binding.row ? parseInt(binding.row.value) : null,\n    col: binding.col ? binding.col.value : null,\n    range: binding.range ? binding.range.value : null,\n    value: binding.value ? binding.value.value : null,\n    color: binding.color.value\n  })) : []\n  const [sheetloaded, setSheetLoaded] = useState(false)\n\n  const luckysheetId = `luckysheet-${props.widgetId}`.replace(' ', '_')\n  const forceUpdate = useForceUpdate()\n  const excelUrlFromTopic = props.pubsub[props.excelUrlTopic]\n  // put an excel in /public folder\n  // const excelUrl = '/002.922.40 1005439 IDO-indienen-16juni2022.xlsx'\n  const debugging = false\n\n  const getFile = async (url: string) => {\n    const response = await axios({url, method: 'GET', responseType: 'blob', withCredentials: true})\n    return response.data\n  }\n\n  const loadExcel = async (excelUrl: string) => {\n    await loadLuckySheetIfNeeded()\n    const luckysheet = window.luckysheet\n    const LuckyExcel = window.LuckyExcel\n    setSheetLoaded(false)\n    const file = getFile(excelUrl)\n    LuckyExcel.transformExcelToLucky(file, (exportJson: any) => {\n      luckysheet.create({\n        container: luckysheetId,\n        data: exportJson.sheets,\n        showinfobar: false,\n        title: excelUrl,\n        userInfo: exportJson.info.creator,\n        hook: {\n          rangeSelect: publishCellLocationAndSheetName,\n          workbookCreateAfter: () => {setSheetLoaded(true)}\n        }\n      });\n    },\n    (err: any) => {\n      alert(\"Import failed. Is your file a valid xlsx?\")\n    })\n    forceUpdate()\n  }\n\n  const publishCellLocationAndSheetName = (sheet: LuckSheetConfig) => {\n    const trimAfterColon = (input: string) => {\n      let colonIndex = input.indexOf(':');\n      if (colonIndex !== -1) {\n          return input.substring(0, colonIndex);\n      } else {\n          return input;\n      }\n    }\n    const luckysheet = window.luckysheet\n    const range = trimAfterColon(luckysheet.getRangeAxis()[0])\n    const value = luckysheet.getRangeValuesWithFlatte()[0] ? luckysheet.getRangeValuesWithFlatte()[0].v : 'null'\n\n    props.publish(props.selectedCellLocation, range)\n    props.publish(props.selectedCellValue, value)\n    props.publish(props.currentActiveSheetName, sheet.name)\n  }\n\n  useEffect(() => {\n    if (props.excelUrlTopic) {\n      loadExcel(excelUrlFromTopic)  \n    } else if (props.excelUrl) {\n      loadExcel(props.excelUrl)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ excelUrlFromTopic, props.excelUrl ])\n\n  useEffect(() => {\n    if (sheetloaded) highlightSparqlData()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ sparqlData, sheetloaded ])\n\n  const undoHighlight = useRef<(() => void)[] | null>(null);\n\n  const highlight = (highlights: HighlightParameters[]) => {\n    const luckysheet = window.luckysheet\n    let allUndos: (() => void)[] = [];\n    \n    for (let highlight of highlights) {\n      if (undoHighlight.current) {\n        undoHighlight.current.forEach(undo => undo());\n        undoHighlight.current = [];\n      }\n\n      let sheetIndex: number\n\n      if (highlight.sheetIndex != null) {\n        sheetIndex = highlight.sheetIndex\n        if (sheetIndex < 0 || sheetIndex >= luckysheet.getAllSheets().length) {\n          console.error(`Sheet index is out of range: ${highlight.sheetIndex}`)\n          continue\n        }\n      } else if (highlight.sheetName) {\n        sheetIndex =  luckysheet.getAllSheets().findIndex((sheet: any) => sheet.name === highlight.sheetName)\n        if (sheetIndex < 0) {\n          console.error(`Could not find sheet ${highlight.sheetName}`)\n          continue\n        }\n      } else {\n        continue\n      }\n  \n      const sheet = luckysheet.getAllSheets()[sheetIndex];\n      luckysheet.setSheetActive(sheetIndex);\n  \n      const undos: (() => void)[] = [];\n    \n      const cellIndexes = getCellIndexes(sheet, highlight);\n      for (const cellIndex of cellIndexes) {\n        const cellValue = sheet.data[cellIndex[0]][cellIndex[1]] ? sheet.data[cellIndex[0]][cellIndex[1]].v : null\n        if (highlight.value && cellValue && highlight.value === cellValue) {\n          const origBg = sheet.data[cellIndex[0]][cellIndex[1]] ? sheet.data[cellIndex[0]][cellIndex[1]].bg : \"#ffffff\";\n          luckysheet.setCellFormat(cellIndex[0], cellIndex[1], \"bg\", highlight.color);\n          undos.push(() => luckysheet.setCellFormat(cellIndex[0], cellIndex[1], \"bg\", origBg));\n        }\n      }\n  \n      allUndos.push(() => {\n        luckysheet.setSheetActive(sheetIndex);\n        undos.forEach(undo => undo());\n      });\n    }\n  \n    // Refresh after all highlights have been applied\n    luckysheet.refresh();\n    \n    undoHighlight.current = allUndos;\n  }\n\n  const createRange = (cellIndexes: [ number, number ][]) => {\n    return cellIndexes.map(([row, col]) => `${indexToColumn(col)}${row + 1}`).join(\",\")\n  }\n\n  const fastHighlight = (highlights: HighlightParameters[]) => {\n    const luckysheet = window.luckysheet;\n    const allSheets = luckysheet.getAllSheets();\n    const sheetNameToIndexMap = allSheets.reduce((map: any, sheet:any, index:number) => {\n      map[sheet.name] = index;\n      return map;\n    }, {});\n  \n    let allUndos: (() => void)[] = [];\n    \n    for (let highlight of highlights) {\n      if (undoHighlight.current) {\n        undoHighlight.current.forEach(undo => undo());\n        undoHighlight.current = [];\n      }\n  \n      let sheetIndex: number\n\n      if (highlight.sheetIndex != null) {\n        sheetIndex = highlight.sheetIndex\n        if (sheetIndex < 0 || sheetIndex >= luckysheet.getAllSheets().length) {\n          console.error(`Sheet index is out of range: ${highlight.sheetIndex}`)\n          continue\n        }\n      } else if (highlight.sheetName) {\n        sheetIndex =  sheetNameToIndexMap[highlight.sheetName]\n        if (sheetIndex < 0) {\n          console.error(`Could not find sheet ${highlight.sheetName}`)\n          continue\n        }\n      } else {\n        continue\n      }\n  \n      const sheet = allSheets[sheetIndex];\n      luckysheet.setSheetActive(sheetIndex)\n  \n      const undos: (() => void)[] = [];\n  \n      const cellIndexes = getCellIndexes(sheet, highlight).filter(([row, col]) => {\n        const cellValue = sheet.data[row][col] ? sheet.data[row][col].v : null;\n        return highlight.value && cellValue && highlight.value === cellValue;\n      });\n  \n      if (cellIndexes.length > 0) {\n        const cellRanges = createRange(cellIndexes);\n        const origBgs = cellIndexes.map(([row, col]) => sheet.data[row][col] ? sheet.data[row][col].bg : \"#ffffff\");\n        \n        luckysheet.setRangeFormat(\"bg\", highlight.color, {range: cellRanges});\n  \n        undos.push(() => {\n          origBgs.forEach((origBg, i) => {\n            luckysheet.setCellFormat(cellIndexes[i][0], cellIndexes[i][1], \"bg\", origBg);\n          });\n        });\n      }\n  \n      allUndos.push(() => {\n        luckysheet.setSheetActive(sheetIndex)\n        undos.forEach(undo => undo());\n      });\n    }\n  \n    // Refresh after all highlights have been applied\n    luckysheet.refresh();\n  \n    undoHighlight.current = allUndos;\n  }\n  \n  const highlightSparqlData = async() => {\n    if ( props.data==null || props.data.results==null || props.data.results.bindings==null || props.data.results.bindings.length === 0) {\n        console.log(\"Empty sparql highlight data \", props.query)\n      } else {\n        if (props.fastHighlighting) {\n          fastHighlight(highlightConfigs)\n        } else {\n          highlight(highlightConfigs)\n        }\n      }\n  }\n\n  const clearHighlight = () => {\n    if (undoHighlight.current) {\n      undoHighlight.current.forEach(undo => undo());\n      undoHighlight.current = [];\n    }\n  }\n\n  return (\n    <div style={{\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column'\n    }}>\n      <div\n        id={luckysheetId}\n        style={LUCKY_CSS} />\n      { debugging && (<div>\n        <button onClick={() => {\n          highlightSparqlData()\n        }} type=\"button\">Highlight sparql data</button>\n        <button onClick={() => {\n          clearHighlight()\n        }} type=\"button\">clearHighlight</button>\n      </div>)}\n    </div>\n  )\n}\n\nfunction loadLuckySheetIfNeeded() {\n  if (window.luckysheet) {\n    return Promise.resolve(window.luckysheet)\n  }\n\n  return new Promise((resolve, reject) => {\n    const resources = [\n      'https://cdn.jsdelivr.net/npm/luckysheet/dist/plugins/css/pluginsCss.css',\n      'https://cdn.jsdelivr.net/npm/luckysheet/dist/plugins/plugins.css',\n      'https://cdn.jsdelivr.net/npm/luckysheet/dist/css/luckysheet.css',\n      'https://cdn.jsdelivr.net/npm/luckysheet/dist/assets/iconfont/iconfont.css',\n      'https://cdn.jsdelivr.net/npm/luckysheet/dist/plugins/js/plugin.js',\n      'https://cdn.jsdelivr.net/npm/luckysheet/dist/luckysheet.umd.js',\n      'https://cdn.jsdelivr.net/npm/luckyexcel/dist/luckyexcel.umd.js'\n    ];\n\n    let loadedCount = 0;\n\n    function resourceLoaded() {\n      loadedCount++;\n      if (loadedCount === resources.length) {\n        resolve(window.luckysheet)\n      }\n    }\n\n    resources.forEach(resource => {\n      if (resource.endsWith('.css')) {\n        const linkElement = document.createElement('link');\n        linkElement.rel = 'stylesheet';\n        linkElement.href = resource;\n        linkElement.onload = resourceLoaded;\n        linkElement.onerror = reject;\n        document.head.appendChild(linkElement);\n      } else if (resource.endsWith('.js')) {\n        const scriptElement = document.createElement('script');\n        scriptElement.src = resource;\n        scriptElement.onload = resourceLoaded;\n        scriptElement.onerror = reject;\n        document.head.appendChild(scriptElement);\n      }\n    });\n  });\n}\n\nfunction getRangeStringFromHighlight(sheet: any, highlightParameter: HighlightParameters) {\n  const maxRowInTheSheet: number = sheet.data.length\n  const maxColInTheSheet: number = sheet.data[0].length\n  const maxColAxis: string = indexToColumn(maxColInTheSheet)\n    \n  if (highlightParameter.range) {\n    return highlightParameter.range\n  } else if (highlightParameter.row != null && highlightParameter.col == null) {\n    return `A${highlightParameter.row}:${maxColAxis}${highlightParameter.row}`\n  } else if (highlightParameter.col != null && highlightParameter.row == null) {\n    return `${highlightParameter.col}1:${highlightParameter.col}${maxRowInTheSheet}`\n  } else if (highlightParameter.col != null && highlightParameter.row != null) {\n    return `${highlightParameter.col}${highlightParameter.row}`\n  }\n}\n\nfunction getCellIndexes(sheet: any, highlightParameter: HighlightParameters): [ number, number ][] {\n  const cellIndexes: [ number, number ][] = []\n\n  const rowIndex = highlightParameter.row ? highlightParameter.row - 1 : null\n  const colIndex = highlightParameter.col ? excelColumnToIndex(highlightParameter.col) : null\n\n  if (highlightParameter.range) {\n    const { startRow, endRow, startCol, endCol } = parseExcelRange(highlightParameter.range)\n    for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {\n      for (let colIndex = startCol; colIndex <= endCol; colIndex++) {\n        cellIndexes.push([ rowIndex, colIndex ])\n      }\n    }\n  } else if (rowIndex != null && colIndex == null) {\n    const row = sheet.data[rowIndex]\n    for (let colIndex = 0; colIndex < row.length; colIndex++) {\n      const cell = row[colIndex]\n      if (!cell) break\n      cellIndexes.push([ rowIndex, colIndex ])\n    }\n  } else if (colIndex != null && rowIndex == null) {\n    for (let rowIndex = 0; rowIndex < sheet.data.length; rowIndex++) {\n      const row = sheet.data[rowIndex]\n      const cell = row[colIndex]\n      if (!cell) continue\n      cellIndexes.push([ rowIndex, colIndex ])\n    }\n  } else if (colIndex != null && rowIndex != null) {\n    const row = sheet.data[rowIndex]\n    if (row) {\n      const cell = row[colIndex]\n      if (cell) {\n        cellIndexes.push([ rowIndex, colIndex ])\n      }\n    }\n  }\n\n  return cellIndexes\n}\n\nfunction excelColumnToIndex(columnName: string): number {\n  let index = 0\n  const length = columnName.length\n\n  for (let i = 0; i < length; i++) {\n    // Subtracting 65 to get the zero-based index for 'A'\n    const charCode = columnName.charCodeAt(i) - 65\n    index = index * 26 + charCode + 1\n  }\n\n  return index - 1\n}\n\nfunction parseExcelRange(range: string): { startRow: number, endRow: number, startCol: number, endCol: number } {\n  let [start, end] = range.split(':');\n\n  if (typeof end === 'undefined') {\n    end = start;  // If the range is a single cell, set end equal to start\n  }\n\n  return {\n    startRow: parseInt(start.replace(/[^\\d]/g, '')) - 1,\n    startCol: excelColumnToIndex(start.replace(/\\d/g, '')),\n    endRow: parseInt(end.replace(/[^\\d]/g, '')) - 1,\n    endCol: excelColumnToIndex(end.replace(/\\d/g, ''))\n  };\n}\n\nfunction indexToColumn(index: number): string {\n  let column = '';\n  index++; // Because this is a 1-based system\n  while (index > 0) {\n      let modulo = (index - 1) % 26;\n      column = String.fromCharCode(65 + modulo) + column;\n      index = Math.floor((index - modulo) / 26);\n  }\n  return column;\n}\nexport default ExcelWidget\n","import { useReducer } from \"react\"\n\n/**\n * Hook that forces a re-render, similar to `forceUpdate` in class components.\n */\nexport function useForceUpdate(): () => void {\n  // Create a new empty object each update, so that the new state always\n  // has different referential equality than the previous state\n  const [, forceUpdate] = useReducer(() => ({}), {})\n  return forceUpdate\n}\n"],"sourceRoot":""}