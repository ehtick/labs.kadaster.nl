{"version":3,"sources":["components/widgets/bb/BBMermaid.js"],"names":["BBMermaid","props","mermaiddiv","createRef","handleZoom","event","setState","zoomLevel","scale","resetZoom","empty","updateMeR","onPanEnd","e","panStart","onPanStart","onStateChange","state","mermaid","initialize","startOnLoad","me","this","setTimeout","prevProps","prevstate","previous","parseTextForVariables","current","updateMe","element","removeAttribute","mermaidS","textContent","contentLoaded","console","log","redraw","zoom","noStateUpdate","ref","className","Component"],"mappings":"yOASMA,EAAS,kDAIX,WAAYC,GAAQ,IAAD,EAIf,OAJe,qBACjB,cAAMA,IAJRC,WAAaC,sBAAW,EAWxBC,WAAa,SAACC,GAEZ,EAAKC,SAAS,CAAEC,UAAWF,EAAMG,OACnC,EAAE,EAEFC,UAAY,WAEV,EAAKH,SAAS,CAAEI,OAAM,EAAKH,UAAW,IAEtC,EAAKI,WACP,EAAE,EAsFJC,SAAS,SAACC,GAIT,EAAKC,UAAS,CACf,EAAC,EACDC,WAAW,SAACF,GAEV,EAAKC,UAAS,CAChB,EAAC,EACDE,cAAc,SAACH,GAEL,EAAKC,QAKf,EAvHI,EAAKG,MAAQ,CACXV,UAAW,GACX,CACJ,CAmID,OAnIE,8CAgBH,WAGEW,IAAQC,WAAW,CACjBC,aAAa,IAIf,IAIMC,EAAGC,KACPC,YAAW,WAAYF,EAAGZ,WAAW,GAAE,IACvCc,YAAY,WACVF,EAAGV,WACP,GAAE,KAGJ,GAAC,gCAGD,SAAmBa,EAAUC,GAE3B,IAAIC,EAAWF,EAAUN,QACzBQ,EAASC,YAAsBD,EAASF,GAGxC,IAAII,EAAUN,KAAKrB,MAAMiB,QAErBQ,KADJE,EAAQD,YAAsBC,EAAQN,KAAKrB,SAMzCqB,KAAKO,UACT,GAAC,sBAED,WAGE,IAAIR,EAAGC,KAEPC,YAAW,WAAYF,EAAGZ,WAAW,GAAE,GAGzC,GAAC,uBAGA,WAGA,GAA0B,GAAtBa,KAAKL,MAAMV,UAEhB,IAGE,IAAMuB,EAAUR,KAAKpB,WAAW0B,QAK9B,GAAIE,EACJ,CAEEA,EAAQC,gBAAgB,kBACxB,IAAIC,EAASV,KAAKrB,MAAMiB,QACxBc,EAASL,YAAsBK,EAASV,KAAKrB,OAC7C6B,EAAQG,YAAaD,EAErBd,IAAQgB,eAEV,CACF,CACA,MAAMrB,GAEFsB,QAAQC,IAAIvB,EAChB,CAEF,GAAC,oBAwBD,WAEE,OAAIS,KAAKL,MAAMoB,OAEN,KAGD,8BACN,cAAC,UAAO,CAAMC,KAAMhB,KAAKL,MAAMV,UAAegC,eAAe,EAAK,SAC/D,qBAAOC,IAAKlB,KAAKpB,WAAYuC,UAAU,eAG9C,KAAC,EA5IY,CAASC,aA+IT1C,W","file":"static/js/31.6e4bf4d5.chunk.js","sourcesContent":["// src/components/MermaidFlowchartClass.js\r\nimport React, { Component ,createRef} from 'react';\r\nimport mermaid from 'mermaid';\r\nimport { PanZoom } from 'react-easy-panzoom'\r\nimport { parseTextForVariables } from '../../../helpers/sparql';\r\nimport { deleteAppConfig } from '../../../api/delete-app-config';\r\nimport throttle from 'lodash/throttle'\r\n \r\n\r\nclass BBMermaid extends Component {\r\n    mermaiddiv = createRef()\r\n  \r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        zoomLevel: 1,\r\n      };\r\n    }\r\n\r\n\r\n    handleZoom = (event) => {\r\n      // Update the zoom level in state\r\n      this.setState({ zoomLevel: event.scale });\r\n    };\r\n\r\n    resetZoom = () => {\r\n      // Set the zoom level back to the initial state or a default value\r\n      this.setState({ empty:true,zoomLevel: 1 });\r\n\r\n      this.updateMeR();\r\n    };\r\n  \r\n\r\n  componentDidMount() {\r\n    // Initialize Mermaid.js\r\n    \r\n    mermaid.initialize({\r\n      startOnLoad: true,\r\n    });\r\n    \r\n\r\n    const zoomOptions = {\r\n        zoom: true,\r\n      };\r\n\r\n      var me=this;\r\n      setTimeout(function() {me.resetZoom()},10);\r\n      setTimeout( function() { \r\n        me.updateMeR();\r\n    },1050);\r\n     \r\n   \r\n  }\r\n\r\n  \r\n  componentDidUpdate(prevProps,prevstate)\r\n  {\r\n    var previous = prevProps.mermaid;\r\n    previous=parseTextForVariables(previous,prevProps);\r\n\r\n\r\n    var current = this.props.mermaid;\r\n    current=parseTextForVariables(current,this.props);\r\n    if (previous===current)\r\n    {\r\n      return;\r\n    }\r\n     // this.setState({redraw:true});\r\n      this.updateMe();\r\n  }\r\n\r\n  updateMe()\r\n  {\r\n    \r\n    var me=this;\r\n   // this.setState({redraw:false});\r\n    setTimeout(function() {me.resetZoom()},10);\r\n\r\n    \r\n  }\r\n\r\n\r\n   updateMeR()\r\n{ \r\n\r\n   if (this.state.zoomLevel!=1) return;\r\n  \r\n  try\r\n  {\r\n   // this.setState({ empty:false });\r\n    const element = this.mermaiddiv.current;\r\n\r\n    //console.log(\"setting data into mermaid\",element);\r\n   \r\n    // Modify or remove attributes using standard DOM manipulation\r\n      if (element) \r\n      {\r\n        //this.resetZoom();\r\n        element.removeAttribute('data-processed');\r\n        var mermaidS=this.props.mermaid;\r\n        mermaidS=parseTextForVariables(mermaidS,this.props);\r\n        element.textContent =mermaidS;\r\n    //console.log(\"mermaid component did update\",mermaidS.substring(0,40));\r\n        mermaid.contentLoaded();\r\n      \r\n      } \r\n    }\r\n    catch(e)\r\n    {\r\n        console.log(e);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  onPanEnd=(e) =>\r\n  {\r\n   //console.log(e);\r\n   //this.updateMe();\r\n   this.panStart=false;\r\n  }\r\n  onPanStart=(e) =>\r\n  {\r\n    this.panStart=true;\r\n  }\r\n  onStateChange=(e) =>\r\n  {\r\n        if (this.panStart)\r\n        {\r\n          return;\r\n        }\r\n   \r\n  }\r\n\r\n  \r\n  render() {\r\n  \r\n    if (this.state.redraw)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return  <div> \r\n      <PanZoom      zoom={this.state.zoomLevel}     noStateUpdate={true} >\r\n         <div   ref={this.mermaiddiv} className=\"mermaid\"></div> \r\n         </PanZoom>\r\n    </div>;\r\n  }\r\n}\r\n\r\nexport default BBMermaid;\r\n"],"sourceRoot":""}