{"version":3,"sources":["components/widgets/SplitLayoutTest.module.css","components/widgets/SplitLayoutTest.js","components/AbstractArea.tsx"],"names":["module","exports","SplitLayoutTest","this","props","withinSelectedTab","firstTime","testRender2","error","console","log","className","styles","main","areaSizes","split","mode","direction","areaConfig","areas","panelstyle","orientation","areaContainer","index","config","onChange","total","length","o0","e","o1","o2","o3","createArea","panel","areaSize","trim","flex","test","minSizes","minSize","isNaN","size","map","paneLocation","fixedSize","heightOrWidth","maxSize","style","name","component","label","variables","type","options","value","AbstractArea","React","Component"],"mappings":"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","file":"static/js/18.7b96a939.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"SplitLayoutTest_main__jQHXX\",\"preview\":\"SplitLayoutTest_preview__19m8f\",\"row\":\"SplitLayoutTest_row__2JNH9\",\"column\":\"SplitLayoutTest_column__31Ahu\",\"areaContainer\":\"SplitLayoutTest_areaContainer__2zlEt\",\"refresh\":\"SplitLayoutTest_refresh__2Dfp1\",\"threeColorTemplate\":\"SplitLayoutTest_threeColorTemplate__3UQ86\"};","import React from 'react'\nimport styles from './SplitLayoutTest.module.css'\nimport Area from '../Area'\nimport AbstractArea from '../AbstractArea'\n\nimport { ReflexContainer, ReflexSplitter, ReflexElement } from 'react-reflex'\n\nimport 'react-reflex/styles.css'\n\nclass SplitLayoutTest extends AbstractArea {\n  static getDescription() {\n    return {\n      name: 'SplitLayoutTest',\n      component: SplitLayoutTest,\n      label: 'Split Layout Test',\n      variables: [\n        {\n          name: 'direction',\n          type: 'select',\n          label: 'Direction',\n          options: [\n            {\n              label: 'Rijen',\n              value: 'column',\n            },\n            {\n              label: 'Kolommen',\n              value: 'row',\n            },\n          ],\n        },\n        {\n          name: 'areaSizes',\n          type: 'array',\n          // label: 'Column widths or row heights (separated by commas). Value can be a number (which will be set as flex values/verhoudingswaarden) or a px/% value',\n          label:\n            \"Kolom Breedte of Rij hoogte, gescheiden door comma's. Waarden kunnen gegeven worden in getallen. Een getal is verhoudingsgetal ten opzichte van de andere Rijen/Kolommen. (Een voorbeeld: 1,3,1)\",\n        },\n        {\n          name: 'minSizes',\n          type: 'array',\n          // label: 'Column widths or row heights (separated by commas). Value can be a number (which will be set as flex values/verhoudingswaarden) or a px/% value',\n          label:\n            \"initiele grootte, gescheiden door comma's. Waarden kunnen gegeven worden in pixels. (Een voorbeeld: 130px,200px,300px)\",\n        },\n        {\n          name: 'cardSizes',\n          type: 'array',\n          // label: 'Column widths or row heights (separated by commas). Value can be a number (which will be set as flex values/verhoudingswaarden) or a px/% value',\n          label:\n            'padding Waarden kunnen gegeven worden in pixels, percentage of getallen. Een getal is verhoudingsgetal ten opzichte van de andere Rijen/Kolommen. (Een voorbeeld: 130px,1,10%)',\n        },\n        {\n          name: 'areas',\n          type: 'json',\n          // label: 'Column widths or row heights (separated by commas). Value can be a number (which will be set as flex values/verhoudingswaarden) or a px/% value',\n          label: 'area definitions',\n        },\n      ],\n    }\n  }\n\n  render() {\n    try {\n      if (this.props.withinSelectedTab === false && this.firstTime == null) {\n        return null\n      } else {\n        this.firstTime = false\n      }\n\n      // return this.renderNormalPanels();\n      //return this.renderResizeablePanels();\n      return this.testRender2()\n    } catch (error) {\n      console.log(error)\n    }\n    return <div className={styles.main + ' ' + styles['preview']}> </div>\n  }\n\n  testRender() {\n    let areaSizes = this.props.areaSizes\n    if (typeof areaSizes === 'string') {\n      areaSizes = areaSizes.split(' ')\n    }\n\n    let mode = this.props.mode || 'preview'\n\n    let direction = 'vertical'\n    if (this.props.direction !== 'row') {\n      direction = 'horizontal'\n    }\n    let index = 0\n    let areaConfig = this.props.areas[index] || {}\n\n    return (\n      <div\n        className={\n          styles.main + ' ' + styles[this.props.direction] + ' ' + styles[mode] + ' ' + styles[this.props.panelstyle]\n        }\n      >\n        <ReflexContainer orientation={direction}>\n          <ReflexElement className=\"left-pane\">\n            <div className={styles.areaContainer}>\n              <Area\n                {...this.props}\n                index={index}\n                config={areaConfig}\n                onChange={this.props.onChange}\n              />\n            </div>\n          </ReflexElement>\n\n          <ReflexSplitter />\n\n          <ReflexElement className=\"right-pane\">\n            <div className={styles.areaContainer}>\n              <Area\n                {...this.props}\n                index={index}\n                config={areaConfig}\n                onChange={this.props.onChange}\n              />\n            </div>\n          </ReflexElement>\n        </ReflexContainer>\n      </div>\n    )\n  }\n\n  testRender2() {\n    let areaSizes = this.props.areaSizes\n    if (typeof areaSizes === 'string') {\n      areaSizes = areaSizes.split(' ')\n    }\n    let mode = this.props.mode || 'preview'\n    let direction = 'vertical'\n    if (this.props.direction !== 'row') {\n      direction = 'horizontal'\n    }\n    let total = 0\n    try {\n      total = this.props.areaSizes.length || 0\n    } catch (error) {}\n\n    //console.log(total,this.props.areas);\n\n    let o0 = {}\n    try {\n      o0 = this.props.areas[0]\n    } catch (e) {}\n    let o1 = {}\n    try {\n      o1 = this.props.areas[1]\n    } catch (e) {}\n    let o2 = {}\n    try {\n      o2 = this.props.areas[2]\n    } catch (e) {}\n    let o3 = {}\n    try {\n      o3 = this.props.areas[3]\n    } catch (e) {}\n\n    return (\n      <div\n        className={\n          styles.main + ' ' + styles[this.props.direction] + ' ' + styles[mode] + ' ' + styles[this.props.panelstyle]\n        }\n      >\n        <ReflexContainer orientation={direction}>\n          {0 < total && this.createArea(0, 'left-pane', o0)}\n          {1 < total && <ReflexSplitter />}\n          {1 < total && this.createArea(1, 'middle-pane', o1)}\n          {2 < total && <ReflexSplitter />}\n          {2 < total && this.createArea(2, 'right-pane', o2)}\n          {3 < total && <ReflexSplitter />}\n          {3 < total && this.createArea(3, 'right-pane', o3)}\n          {4 < total && <ReflexSplitter />}\n          {4 < total && this.createArea(4, 'right-pane', this.props.areas[4])}\n          {5 < total && <ReflexSplitter />}\n          {5 < total && this.createArea(5, 'right-pane', this.props.areas[5])}\n        </ReflexContainer>\n      </div>\n    )\n  }\n\n  createArea(index, panel, areaConfig) {\n    if (areaConfig == null) {\n      areaConfig = {}\n    }\n\n    let areaSizes = this.props.areaSizes\n    if (typeof areaSizes === 'string') {\n      areaSizes = areaSizes.split(' ')\n    }\n    let areaSize = areaSizes[index]\n\n    areaSize = areaSize.trim()\n\n    let flex = '0 0 auto'\n\n    if (index === areaSizes.length - 1) {\n      flex = '1 1 auto'\n    }\n\n    if (/^\\d+$/.test(areaSize)) {\n      if (areaSize === '0') {\n        areaSize = '0 1 auto'\n      }\n\n      flex = areaSize\n    }\n    //if ((flex==NaN)||(flex==\"NaN\")){flex=\"\"}\n    // if (flex=\"1\"){flex=\"0 1 auto\";}\n\n    let minSizes = this.props.minSizes\n    if (typeof minSizes === 'string') {\n      minSizes = minSizes.split(' ')\n    }\n    let minSize = null\n    if (minSizes != null) minSize = minSizes[index] || null\n    if (isNaN(flex) || flex === 'NaN') {\n      flex = '0 1 auto' // tja\n    }\n    //console.log(index+\" flex:\",flex,minSize);\n    if (minSize == null) {\n      minSize = false\n    }\n    return (\n      <ReflexElement\n        className={panel}\n        {...(minSize && { size: minSize })}\n        flex={flex}\n      >\n        <div className={styles.areaContainer}>\n          <Area\n            {...this.props}\n            index={index}\n            config={areaConfig}\n            onChange={this.props.onChange}\n          />\n        </div>\n      </ReflexElement>\n    )\n  }\n\n  renderResizeablePanels() {\n    let areaSizes = this.props.areaSizes\n    if (typeof areaSizes === 'string') {\n      areaSizes = areaSizes.split(' ')\n    }\n\n    let mode = this.props.mode || 'preview'\n\n    return (\n      <div\n        className={\n          styles.main + ' ' + styles[this.props.direction] + ' ' + styles[mode]\n        }\n      >\n        <ReflexContainer orientation=\"vertical\">\n          {areaSizes.map((areaSize, index) => {\n            let paneLocation = 'left-pane'\n            if (index > 0) {\n              paneLocation = 'middle-pane'\n            }\n            if (index > 0) {\n              paneLocation = 'right-pane'\n            }\n\n            let areaConfig = this.props.areas[index] || {}\n            areaSize = areaSize.trim()\n\n            let flex = '0 0 auto'\n            let fixedSize = 'auto'\n\n            if (index === areaSizes.length - 1) {\n              flex = '1 1 auto'\n            }\n\n            if (/^\\d+$/.test(areaSize)) {\n              if (areaSize === '0') {\n                areaSize = '0 0 auto'\n              }\n\n              flex = areaSize\n            } else {\n              fixedSize = areaSize\n            }\n            let heightOrWidth =\n              this.props.direction === 'row' ? 'width' : 'height'\n\n            return (\n              <div key={index}>\n                <ReflexElement\n                  minSize=\"200\"\n                  maxSize=\"800\"\n                  className={paneLocation}\n                >\n                  <div className=\"pane-content\">\n                    <div\n                      className={styles.areaContainer}\n                      style={{ flex, [heightOrWidth]: fixedSize }}\n                    >\n                      <Area\n                        {...this.props}\n                        index={index}\n                        config={areaConfig}\n                        onChange={this.props.onChange}\n                      />\n                    </div>\n                  </div>\n                </ReflexElement>\n                <ReflexSplitter />\n              </div>\n            )\n          })}\n        </ReflexContainer>\n      </div>\n    )\n  }\n\n  renderNormalPanels() {\n    let areaSizes = this.props.areaSizes\n    if (typeof areaSizes === 'string') {\n      areaSizes = areaSizes.split(' ')\n    }\n\n    let mode = this.props.mode || 'preview'\n\n    return (\n      <div\n        className={\n          styles.main + ' ' + styles[this.props.direction] + ' ' + styles[mode]\n        }\n      >\n        {areaSizes.map((areaSize, index) => {\n          let areaConfig = this.props.areas[index] || {}\n          areaSize = areaSize.trim()\n\n          let flex = '0 0 auto'\n          let fixedSize = 'auto'\n\n          if (index === areaSizes.length - 1) {\n            flex = '1 1 auto'\n          }\n\n          if (/^\\d+$/.test(areaSize)) {\n            if (areaSize === '0') {\n              areaSize = '0 0 auto'\n            }\n\n            flex = areaSize\n          } else {\n            fixedSize = areaSize\n          }\n          let heightOrWidth =\n            this.props.direction === 'row' ? 'width' : 'height'\n\n          return (\n            <div\n              key={index}\n              className={styles.areaContainer}\n              style={{ flex, [heightOrWidth]: fixedSize }}\n            >\n              <Area\n                {...this.props}\n                index={index}\n                config={areaConfig}\n                onChange={this.props.onChange}\n              />\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nexport default SplitLayoutTest\n","import React from 'react'\n\nexport default class AbstractArea<P = DefaultP, S = DefaultS, SS = DefaultSS> extends React.Component<P,S,SS> {\n  isAA() {\n    return true\n  }\n}\n\ntype DefaultP = ExtractDefaultP<React.Component>\ntype DefaultS = ExtractDefaultS<React.Component>\ntype DefaultSS = ExtractDefaultSS<React.Component>\ntype ExtractDefaultP<T> = T extends React.Component<infer P> ? P : never\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype ExtractDefaultS<T> = T extends React.Component<infer P, infer S> ? S : never\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype ExtractDefaultSS<T> = T extends React.Component<infer P, infer S, infer SS> ? SS : never\n"],"sourceRoot":""}