{"version":3,"sources":["components/widgets/bb/BBCheckboxTree.module.css","components/widgets/bb/BBCheckboxTree.js"],"names":["module","exports","BBCheckboxTree","state","checked","expanded","nodes","this","getNodes","props","data","Exception","uri_node","roots","results","bindings","n","binding","uri","value","parent","label","text","o","id","name","push","console","log","children","e","length","defaultExpanded","sx","height","flexGrow","maxWidth","overflowY","React","Component"],"mappings":"2HACAA,EAAOC,QAAU,CAAC,YAAY,kC,8JCSTC,EAAc,iKAMtB,OANsB,oCAC/BC,MAAQ,CACJC,QAAS,GACTC,SAAU,IACZ,EAENC,MAAQ,KAAI,EAkHP,OAlHO,8CACR,WAEIC,KAAKC,UACT,GAAC,mCAED,SAAsBC,EAAMN,GAExB,IAMA,OAJIM,EAAMC,MAAMH,KAAKE,MAAMC,MAEvBH,KAAKC,YAEF,CACX,CACA,MAAMG,GACL,CACD,OAAO,CACP,GAAC,sBAGD,WAGG,IAGa,IAAIC,EAAS,CAAC,EACVC,EAAM,GACV,GAAqB,MAAjBN,KAAKE,MAAMC,KAAY,OAC3B,GAA6B,MAAzBH,KAAKE,MAAMC,KAAKI,QAAe,OACnC,GAAsC,MAAlCP,KAAKE,MAAMC,KAAKI,QAAQC,SAAgB,OAC5C,IAAIA,EAAcR,KAAKE,MAAMC,KAAKI,QAAQC,SAC1C,IAAK,IAAIC,KAAKD,EACd,CACI,IAAIE,EAAUF,EAASC,GAEnBE,EAAKD,EAAQC,IAAIC,MAET,OADRC,EAASH,EAAQG,UACHA,EAAOA,EAAOD,OAChC,IAAIE,EAAQJ,EAAQK,KAEhBC,EAAE,CAACC,GAAGR,EAAEE,IAAIA,EAAIO,KADFJ,EAAP,MAAPA,EAAoB,UAAwBA,EAAMF,MACvBC,OAAOA,GACtCR,EAASM,GAAKK,EACF,MAARH,GAEAP,EAAMa,KAAKH,EAInB,CAGA,IAAK,IAAIL,KAAON,EAChB,CAEI,GAAc,OADVW,EAAEX,EAASM,IACTE,OACN,CACI,IAAIA,EACJ,GAAY,OADRA,EAAOR,EAASW,EAAEH,SAEtB,CACIO,QAAQC,IAAI,mCACZ,KACJ,CACqB,MAAjBR,EAAOS,WAAgBT,EAAOS,SAAS,IAC3CT,EAAOS,SAASH,KAAKH,EACzB,CACJ,CAEAhB,KAAKD,MAAMO,CAE3B,CAAE,MAAMiB,GAGJvB,KAAKD,MAAM,EACf,CAGA,GAAC,oBAED,WAMI,IAEqB,MAAZC,KAAKD,OAAYC,KAAKC,UAG/B,CACA,MAAMsB,GAGN,CACA,OAAgB,MAAZvB,KAAKD,MAAqB,8BAAK,iBAEZ,GAAnBC,KAAKD,MAAMyB,OAEH,8BAAK,WAGjBJ,QAAQC,IAAIrB,KAAKD,OACX,cAAC,IAAQ,CACf,aAAW,cAEX0B,gBAAiB,CAAC,QAElBC,GAAI,CAAEC,OAAQ,IAAKC,SAAU,EAAGC,SAAU,IAAKC,UAAW,QAC3D3B,KAAMH,KAAKD,QAGd,KAAC,EAxH8B,CAASgC,IAAMC,U","file":"static/js/23.cf25c8b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rct-title\":\"BBCheckboxTree_rct-title__3rmTQ\"};","import React from 'react';\r\n\r\n\r\nimport './BBCheckboxTree.module.css'\r\n\r\nimport { TreeView } from '@patternfly/react-core';\r\n\r\n\r\n\r\n\r\nexport default class BBCheckboxTree extends React.Component {\r\n    state = {\r\n        checked: [],\r\n        expanded: [],\r\n    };\r\n\r\nnodes = null;\r\n    componentDidMount()\r\n    {\r\n        this.getNodes();\r\n    }\r\n\r\n    shouldComponentUpdate(props,state)\r\n    {\r\n        try{\r\n       \r\n        if (props.data!=this.props.data)\r\n        {\r\n            this.getNodes();\r\n        }\r\n        return true;\r\n    }\r\n    catch(Exception)\r\n    {}\r\n    return true;\r\n    }\r\n\r\n\r\n    getNodes()\r\n    {\r\n\r\n       try\r\n       {\r\n\r\n                    var uri_node={};\r\n                    var roots=[];\r\n                    if (this.props.data==null) return;\r\n                    if (this.props.data.results==null) return;\r\n                    if (this.props.data.results.bindings==null) return;\r\n                    var bindings=     this.props.data.results.bindings;\r\n                    for (var n in bindings)\r\n                    {\r\n                        var binding = bindings[n];\r\n                        \r\n                        var uri= binding.uri.value;\r\n                        var parent = binding.parent;\r\n                        if (parent!=null){parent=parent.value;}\r\n                        var label = binding.text;\r\n                        if (label==null){ label=\"nolabel\";} else {label=label.value;}\r\n                        var o={id:n,uri:uri,name:label,parent:parent};\r\n                        uri_node[uri]=o;\r\n                        if (parent==null)\r\n                        {\r\n                            roots.push(o);\r\n                        }\r\n                    \r\n                        \r\n                    }\r\n\r\n\r\n                    for (var uri in uri_node)\r\n                    {\r\n                        var o=uri_node[uri];\r\n                        if (o.parent!=null)\r\n                        {\r\n                            var parent=uri_node[o.parent];\r\n                            if (parent==null)\r\n                            {\r\n                                console.log(\"error in tree, parent not found\");\r\n                                break;\r\n                            }\r\n                            if (parent.children==null) parent.children=[];\r\n                            parent.children.push(o);\r\n                        }\r\n                    }\r\n\r\n                    this.nodes=roots;\r\n\r\n    } catch(e)\r\n    {\r\n       // console.log(e);\r\n        this.nodes=[];\r\n    }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n       // console.log(\"render bbcheckboxtree\",this.nodes)\r\n\r\n       //if (true) return (<div>debug</div>);\r\n      \r\n        try \r\n        {\r\n             if (this.nodes==null)this.getNodes();\r\n            \r\n         \r\n        }\r\n        catch(e)\r\n        {\r\n\r\n        }\r\n        if (this.nodes==null) return (<div>sparql error</div>);\r\n       \r\n        if (this.nodes.length==0)\r\n        {\r\n            return (<div>empty</div>);\r\n          //  this.nodes.push({text:\"nothing\",uri:\"http://www.buildingbits.nl/reset\"});\r\n        }\r\n        console.log(this.nodes);\r\n      return (<TreeView\r\n        aria-label=\"rich object\"\r\n       \r\n        defaultExpanded={['root']}\r\n       \r\n        sx={{ height: 110, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\r\n       data={this.nodes}\r\n       >\r\n      </TreeView>)\r\n    }\r\n}"],"sourceRoot":""}