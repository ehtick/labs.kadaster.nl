{"version":3,"sources":["components/widgets/Tree.module.css","components/widgets/Tree.js"],"names":["module","exports","TreeItem","state","childrenVisible","props","depth","treeItemClicked","arg","target","slot","e","item","treeItemCheckboxClicked","checked","arrowClicked","setState","children","containsSelection","this","shouldNonSelectedSubTreeClose","selectedItem","determineVisibility","prevProps","onClick","className","styles","treeArrow","down","right","treeItemURIKey","publishVariable2","pubsub","labelKey","data","head","vars","icon","defaultIcon","handlePublishingUri2OrNot","checkbox","checkedHash","uri","extraStyle","textstyle","treeItem","id","treeLabel","renderArrow","size","transform","icon2","icon3","selected","noselect","label","type","defaultChecked","map","index","React","Component","Tree","items","checkboxchecks","multipleCheckBoxParameter","s","PublishUtils","getMultiplePropValueAsSingleValue","multipleselectparametertype","me","setTimeout","publish","selectEvent","publishVariable","v1","v2","nid","subscribeVariable","scrollLatestUriIntoView","parent","i","length","child","console","log","findInChild","selectedURI","scrollSelectionIntoView","latestTreeSelection","p","document","getElementById","element","contains","scrollIntoView","parseInitialURLForSelection","url","window","top","location","href","startsWith","setSelectionInURLStartsString","queryString","search","selection","URLSearchParams","get","error","processURLSelection","initialSelection","nselectedURI","selectedURI2","nselectedURI2","nselectedURI22","lookupPublishVariable2","var1","n","results","bindings","binding","value","URI2","b","ar","headVars","parentItemURIKey","parents","uri_items","itemsar","push","parentO","id_binding","double","key","result","k","exists","rootitem","createTreeItems","checkHash","setSelectionInURL","baseUrl","origin","suri","replace","pathname","debugSetSelectionInURL","history","pushState","expandLevel","Array","isArray","main","panelstyle","disabled","loading","title","titem","root","aggregate","restructureResponse","findParents","openSelectie","rootLabel"],"mappings":"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","file":"static/js/21.149c748b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Tree_main__2U69K\",\"treeItem\":\"Tree_treeItem__3GbeU\",\"checkbox\":\"Tree_checkbox__2OB1o\",\"treeLabel\":\"Tree_treeLabel__DGe-D\",\"w2ui\":\"Tree_w2ui__ATF8z\",\"selected\":\"Tree_selected__1wXwi\",\"treeArrow\":\"Tree_treeArrow__1dDJV\",\"right\":\"Tree_right__3hO93\",\"down\":\"Tree_down__3os-n\",\"noselect\":\"Tree_noselect__pu0tM\",\"refresh\":\"Tree_refresh__3pfqJ\",\"threeColorTemplate\":\"Tree_threeColorTemplate__2HVQ2\",\"label\":\"Tree_label__3BOrf\"};","import React from 'react'\nimport styles from './Tree.module.css'\nimport { restructureResponse } from '../../helpers/sparql'\nimport PublishUtils from './../../helpers/PublishUtils'\nimport { BrowserRouter as Router, BrowserRouter, Link } from 'react-router-dom'\nimport { Icon } from './Icon'\n\n//console.log(faHandPointLeft.iconName);\n\nclass TreeItem extends React.Component {\n  state = {\n    childrenVisible: this.props.depth >0 ,\n    \n  }\n\n  determineVisibility(item) {\n    if (!item.children) return\n    if (item.containsSelection) {\n       this.setState({\n        childrenVisible: true\n      });\n    } else {\n      if (this.props.shouldNonSelectedSubTreeClose) {\n        this.setState({\n          childrenVisible: false,\n        })\n      }\n    }\n  }\n\n  componentDidMount() {\n    if (!this.props.selectedItem) return\n    this.determineVisibility(this.props.item)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!this.props.selectedItem) return\n    if (prevProps.selectedItem === this.props.selectedItem) return\n    this.determineVisibility(this.props.item)\n  }\n\n  treeItemClicked = (arg) => {\n    try\n    {\n    \n          if (arg.target.slot==\"arrow\") {\n         //   console.log(\"no tree item click but an expend click\");\n            return;\n          }\n    }\n    catch(e){}\n    \n    this.props.treeItemClicked(this.props.item)\n  }\n\n  treeItemCheckboxClicked= (arg) => {\n   \n   var checked=arg.target.checked;\n   this.props.item.checked=checked;\n   \n      \n    this.props.treeItemCheckboxClicked(this.props.item);\n  }\n\n  arrowClicked = () => {\n    this.setState({\n      childrenVisible: !this.state.childrenVisible,\n    })\n  }\n\n  renderArrow(item) {\n    if (!item.children) return <span slot=\"arrow\" className={styles.treeArrow} />\n    if (this.state.childrenVisible) {\n      return (\n        <span slot=\"arrow\"\n          onClick={this.arrowClicked}\n          className={styles.treeArrow + ' ' + styles.down}\n          />\n      )\n    } else {\n      return (\n        <span slot=\"arrow\"\n          onClick={this.arrowClicked}\n          className={styles.treeArrow + ' ' + styles.right}\n          />\n      )\n    }\n  }\n\n  handlePublishingUri2OrNot(item, treeItemURIKey) {\n    if (this.props.selectedItem === item[treeItemURIKey]) {\n      let publishVariable2 = this.props.publishVariable2\n\n      if (publishVariable2) {\n        var current = this.props.pubsub[publishVariable2]\n        var contender = item['URI2']\n        //  console.log(\"found selected item \",item,publishVariable2,current,contender);\n        if (current !== contender) {\n          // console.log(\"publishing uri2 \",publishVariable2, item[\"URI2\"]);\n          // this.props.publish(publishVariable2, item[\"URI2\"]);\n        }\n      }\n    }\n  }\n\n  render() {\n\n    let item = this.props.item\n    let labelKey = this.props.data.head.vars[0]\n    let treeItemURIKey = this.props.data.head.vars[1]\n    // let setSelectionInURL = this.props.setSelectionInURL;\n    let setSelectionInURL = false // code kan nog opgeschoond worden. implementatie verloopt nu simpeler\n\n    // sorteren doen we voorlopig even via sparql\n    /*\n    if (item.children) {\n      item.children.sort((a, b) => {\n        if (!a[labelKey]) return 0;\n        return a[labelKey].localeCompare(b[labelKey]);\n      });\n    }\n    */\n\n    if (item.icon == null) {\n      if (this.props.defaultIcon !== '') {\n        item.icon = this.props.defaultIcon\n      }\n    }\n    this.handlePublishingUri2OrNot(item, treeItemURIKey)\n\n    if (this.props.selectedItem === item[treeItemURIKey]) {\n    //  console.log('selected item ')\n    }\n\n    /*\n\n    if (this.props.selectedItem === item[treeItemURIKey])\n    {\n    \n      let publishVariable2 = this.props.publishVariable2;\n      if (publishVariable2)\n      {\n        var current=this.props.pubsub[publishVariable2];\n        var contender = item[\"URI2\"];\n      //  console.log(current,contender,publishVariable2);\n        if (current!=contender)\n        {\n         \n          this.props.publish(publishVariable2, item[\"URI2\"]);\n          if (setSelectionInURL)\n          {\n           // console.log(\"we moeten publish variable 2  uitvoeren incl url rewrite\");\n          }\n          else\n          {\n           // console.log(\"we moeten publish variable 2  uitvoeren\");\n          }\n        }\n        \n      }\n    }\n    */\n\n    let curi = 'oude implementatie'\n\n     let checkbox=false;\n     checkbox =item.checkbox;\n    \n     if (checkbox==\"true\") {checkbox=true} else {checkbox=false;}\n        \n     let checked=  this.props.checkedHash[item.uri];\n     if (checked==null) checked=false;\n    var extraStyle=this.props.textstyle;\n    extraStyle=styles[extraStyle];\n\n   \n     \n    // <Icon icon=\"info\" size=\"xs\" transform=\"down-6; right-4\" />\n    return (\n      <Router  >\n        \n        <div    \n          className={styles.treeItem}\n          id={\n            this.props.selectedItem === item[treeItemURIKey]\n              ? item[treeItemURIKey]\n              : null\n          }\n        >\n         \n          <div className={styles.treeLabel+\" \"+extraStyle}  onClick={this.treeItemClicked}>\n            {this.renderArrow(item)}\n            {item.icon != null && (\n              <Icon\n                icon={item.icon}\n                size=\"xs\"\n                transform=\"down-6; left-4\"\n                onClick={this.treeItemClicked}\n              />\n            )}\n            {item.icon2 != null && (\n              <Icon\n                icon={item.icon2}\n                size=\"xs\"\n                transform=\"down-6; left-4\"\n                onClick={this.treeItemClicked}\n              />\n            )}\n            {item.icon3 != null && (\n              <Icon\n                icon={item.icon3}\n                size=\"xs\"\n                transform=\"down-6; left-4\"\n                onClick={this.treeItemClicked}\n              />\n            )}\n            {setSelectionInURL ? (\n              <BrowserRouter basename=\"/\" >\n                <Link to={curi} >\n                  <span\n                    onClick={this.treeItemClicked}\n                    className={\n                      this.props.selectedItem === item[treeItemURIKey]\n                        ? styles.selected\n                        : ''\n                    }\n                  >\n                    {item[labelKey]}\n                  </span>\n                </Link>\n              </BrowserRouter>\n            ) : (\n              <span\n                onClick={this.treeItemClicked}\n                className={\n                  this.props.selectedItem === item[treeItemURIKey]\n                    ? styles.selected+ \" \"+styles.noselect + ' ' + styles.label+\"  \"\n                    : 'anders '+styles.noselect + ' ' + styles.label+' '\n                }\n              >\n                {checkbox && ( <input onClick={this.treeItemCheckboxClicked}  className={styles.checkbox+' '+styles.noselect + ' ' + styles.label} type=\"checkbox\" defaultChecked={checked}></input>) }\n                {item[labelKey]}\n              </span>\n            )}\n          </div>\n          {item.children &&\n            this.state.childrenVisible &&\n            item.children.map((item, index) => {\n              return (\n                <TreeItem\n                  key={index}\n                  {...this.props}\n                  item={item}\n                  depth={this.props.depth - 1}\n                />\n              )\n            })}\n        </div>\n      </Router>\n    )\n  }\n}\n\nclass Tree extends React.Component {\n\n\n \n    state = {\n      items: [],\n      checked:{}\n         \n  }\n\n\n  \n  constructor(props)\n  {\n    super(props);\n    if (this.id==null)\n    {\n      if (Tree.nid==null) Tree.nid=0;\n      Tree.nid++;\n      this.id=\"tree\"+Tree.nid;\n    }\n  \n  }\n \n  \n\n\n  componentDidUpdate() {\n    if (this.props.subscribeVariable == null) {\n      return\n    }\n    if (this.selectEvent) {\n      this.selectEvent = false\n      return\n    }\n    \n    this.scrollLatestUriIntoView();\n  }\n\n  findInChild(parent,id)\n  {\n    try\n    {\n    for (let i = 0; i < parent.children.length; i++) {\n        var child =parent.children[i];\n        console.log(child.id);\n        if (child.id==id) return child;\n    }\n\n    for (let i = 0; i < parent.children.length; i++) {\n      var child =parent.children[i];\n         return this.findInChild(child,id)\n  }\n}\ncatch(e)\n{console.log(e);}\n  return null;\n\n  }\n  scrollLatestUriIntoView()\n  {\n   \n       let selectedURI = this.props.pubsub[this.props.subscribeVariable]\n       \n    if (this.props.scrollSelectionIntoView === true) {\n      //not sure if this works correctly\n    //  console.log(\"scroll into view \",selectedURI);\n      if (selectedURI != null && this.state.latestTreeSelection == selectedURI) {\n         // console.log(\"scroll into view not necessary, already ok\");\n          return;\n      } else {\n            if (selectedURI != null) {\n               var me=this;\n          setTimeout(function () {\n           \n             const p=document.getElementById(me.id);\n             \n\n             if (p==null)\n             {\n            //  console.log(\"not scrolling into view as tree is not yet available\") ;\n              return;\n             }\n            // console.log(\"scroll into view \",me.id,selectedURI);\n             \n             \n             var element = document.getElementById(selectedURI)\n             if (p.contains(element))\n             {\n             // console.log(\"element contained by parent!\");\n             }\n             else\n             {\n             // console.log(\"element not contained by parent!\");\n              element=null;\n             }\n            // console.log(\"tree component did update  element foud \",element);\n            if (element != null) {\n            //  console.log(\" smooth tree scrolling \",me.props[\"titleMenubar\"],selectedURI,me.state.latestTreeSelection,me.state);\n            // console.log(\"really scrolling into view\");\n              element.scrollIntoView()\n            }\n          }, 0)\n        } else {\n          // reset scroll\n          const p=document.getElementById(this.id);\n          if (p==null)\n          {\n           // console.log(\"scroll into view id not available\");\n            return\n            ;}\n          var element = document.getElementById('begin')\n          if (p.contains(element))\n          {\n          // console.log(\"element contained by parent!\");\n          }\n          else\n          {\n          // console.log(\"element not contained by parent!\");\n           element=null;\n          }\n         // const element = this.findInChild(p,'begin');\n         \n          if (element != null) {\n           // console.log(\"really scrolling into view 22\");\n            element.scrollIntoView()\n          }\n          else\n          {\n\n          }\n        }\n      }\n    }\n   // console.log(\"end scroll into view\");\n  }\n\n  processURLSelection() {\n    if (this.props != null) {\n      if (this.props.parseInitialURLForSelection) {\n        var url = window.top.location.href\n        //  console.log(\"trying to find selection from url\",url);\n        if (url.startsWith(this.props.setSelectionInURLStartsString)) {\n          //  console.log(\"try parsing url path\",url);\n\n          this.props.pubsub[this.props.subscribeVariable] = url\n        } else {\n          try {\n            //  console.log(\"trying to find selection from url parameter\");\n            const queryString = window.top.location.search\n            //  console.log(queryString);\n            const urlParams = new URLSearchParams(queryString)\n            var selection = urlParams.get('selection')\n            if (selection != null) {\n              if (\n                selection.startsWith(\n                  this.props.setSelectionInURLStartsString\n                ) ||\n                selection.startsWith('http://localhost:3000/')\n              ) {\n                //  console.log(\"try parsing url from selection\",selection);\n                this.props.pubsub[this.props.subscribeVariable] = selection\n                return true\n              } else {\n                console.log(\n                  'initial parametervalue not according to ',\n                  this.props.setSelectionInURLStartsString\n                )\n              }\n            } else {\n              console.log('no initial selection parameter value found', url)\n            }\n          } catch (error) {\n            console.log(error)\n          }\n        }\n\n        //url=\"https://otl.waternet.nl/def/Document\"; //voorbeeld\n        // remove url parameters\n      }\n    }\n    return false\n  }\n\n  componentDidMount() \n  {\n    if (this.processURLSelection()) {\n      //console.log(\"component did mount1\");\n  this.scrollLatestUriIntoView();\n      return\n    }\n    //this.processURLSelection();\n    // check of we een selectie (niet zeker of die bestaat) moeten registerern op basis van de url.\n    if (this.props.initialSelection != null) {\n      if (\n        this.props.subscribeVariable != null ||\n        this.props.publishVariable != null\n      ) {\n        // console.log(\"setting initial selection value\");\n        let selection = this.props.subscribeVariable\n        if (selection == null) {\n          selection = this.props.publishVariable\n        }\n        this.props.pubsub[selection] = this.props.initialSelection\n      }\n    }\n   // console.log(\"component did mount2\");\n  this.scrollLatestUriIntoView();\n  }\n  shouldComponentUpdate222(props, state) // needs an update when uri is selected for highlighting\n  {\n    \n    var sv=this.props.subscribeVariable;\n    if (sv==null) return true;\n    let selectedURI = this.props.pubsub[this.props.subscribeVariable]\n    let nselectedURI=props.pubsub[props.subscribeVariable];\n   \n    if ((selectedURI!=nselectedURI) )\n    {\n      let publishVariable2 = this.props.publishVariable2;\n      if (publishVariable2!=null)   \n      {\n        let selectedURI2 = this.props.pubsub[this.props.publishVariable2]\n        let nselectedURI2=props.pubsub[props.publishVariable2];\n        \n        if (selectedURI2==nselectedURI2)\n        {\n         console.log(\"we should check variable 2?\");\n         var nselectedURI22= this.lookupPublishVariable2(nselectedURI);\n         if (nselectedURI2!=nselectedURI22)\n         {\n          console.log(\"confirmed to update publisch varaible 2 \",nselectedURI22);\n         }\n        }\n\n      }\n    }\n\n    \n    return true;\n    \n  }\n  lookupPublishVariable2(uri)\n  {\n    try{\n    var var1=this.props.subscribeVariable;\n    //console.log(this.props);\n    if (this.props.data==null) return null;\n    //var var2=this.props.publishVariable2;\n    for (var n in this.props.data.results.bindings) \n    {\n      var binding = this.props.data.results.bindings[n];\n      var value = binding[var1].value;\n      if (value==uri)\n      {\n        \n        return binding.URI2.value;\n      }\n\n    }\n  }\n  catch(e){console.log(e);}\n  return null;\n  }\n\n  treeItemCheckboxClicked = (item) => \n  {\n    let checked=item.checked;\n    let checkboxchecks = this.state.checked;\n\n    let treeItemURIKey = this.props.data.head.vars[1]\n    var uri = item[treeItemURIKey]\n    checkboxchecks[uri]=checked;\n    \n    this.setState({checked:checkboxchecks});\n     if (this.props.multipleCheckBoxParameter!=null)\n     {\n         var s=PublishUtils.getMultiplePropValueAsSingleValue(this.props.multipleselectparametertype,checkboxchecks);\n        // console.log(\"tree publshing multi parameter:\",this.props.multipleCheckBoxParameter,s);\n         var me=this;\n        setTimeout(function() {\n         var m=me.props.publish(me.props.multipleCheckBoxParameter,s);\n        \n        },100);\n         \n\n     }\n  \n\n\n\n  }\n \n\n\n  treeItemClicked = (item) => \n  {\n    \n   \n    this.selectEvent = true\n    \n    // console.log(\"latest tree selection\",item.uri);\n    let treeItemURIKey = this.props.data.head.vars[1]\n    let publishVariable = this.props.publishVariable\n    let publishVariable2 = this.props.publishVariable2;\n    var v1 = item[treeItemURIKey]\n    \n    if (publishVariable2) {\n     \n      var v2 = item['URI2']\n      if (v2!=null)\n      {\n        this.props.publish(publishVariable2, v2);\n      }\n \n    }\n    if (publishVariable!=null)\n    {\n       this.props.publish(publishVariable, v1);\n       //console.log(\"tree publish selected item\");\n       this.setState({ \"selectedItem\":v1 ,\"latestTreeSelection\":v1 });\n    }\n    \n  }\n\n  containsSelection(selectedURI, treeItemURIKey, item) {\n    if (item[treeItemURIKey] == selectedURI) {\n      return true\n    }\n    var b = false\n    for (var n in item.children) {\n      var child = item.children[n]\n      //console.log(item,child);\n      child.containsSelection = this.containsSelection(\n        selectedURI,\n        treeItemURIKey,\n        child\n      )\n      if (child.containsSelection == true) {\n        b = true\n      }\n    }\n    return b\n  }\n\n  openSelectie(items) {\n    let selectedURI = this.props.pubsub[this.props.subscribeVariable]\n    if (selectedURI == null) {\n      return\n    }\n    let treeItemURIKey = this.props.data.head.vars[1]\n    for (var n in items) {\n      var item = items[n]\n      item.containsSelection = this.containsSelection(\n        selectedURI,\n        treeItemURIKey,\n        item\n      )\n    }\n  }\n\n  findParents(ar) {\n\n    let headVars = this.props.data.head.vars\n    let treeItemURIKey = headVars[1]\n    let parentItemURIKey = headVars[2]\n    let parents = []\n    let uri_items = {}\n    // zoek parents en creeer uri hash\n    for (var n in ar) {\n      let item = ar[n]\n\n      var itemsar = uri_items[item[treeItemURIKey]]\n      if (itemsar == null) {\n        itemsar = []\n        uri_items[item[treeItemURIKey]] = itemsar\n      }\n      itemsar.push(item)\n    }\n\n    // zet children\n   \n    for (const n in ar) {\n      var item = ar[n]\n      // no parent\n      if (uri_items[item[parentItemURIKey]] == null)\n       {\n          // only once\n              parents.push(item);\n        // console.log(\"finding parent \"+item[labelKey],parents[0]);\n       }\n      // console.log(parents) ;\n\n      var parent = item[parentItemURIKey]\n      if (parent != null) {\n        itemsar = uri_items[parent]\n        if (itemsar != null) {\n          for (var i in itemsar) {\n            var parentO = itemsar[i]\n            var children = parentO.children\n            if (children == null) {\n              children = []\n              parentO.children = children\n            }\n            children.push(item)\n          }\n        }\n      }\n    }\n\n\n  // remove double parents?\n\n\n    return parents\n  }\n\n  aggregate(items) {\n    try {\n      let headVars = this.props.data.head.vars\n      let treeItemURIKey = headVars[1]\n      let parentItemURIKey = headVars[2]\n\n      var id_binding = {}\n      for (var n in items.results.bindings) {\n        var binding = items.results.bindings[n]\n        var parent = 'onbekend'\n        if (binding[parentItemURIKey] != null)\n          parent = binding[parentItemURIKey].value\n        var id = parent + '_' + binding[treeItemURIKey].value\n        var double = id_binding[id]\n        if (double != null) {\n          for (var key in binding) {\n            double[key] = binding[key]\n          }\n        } else {\n          id_binding[id] = binding\n        }\n      }\n      var result = []\n      //console.log(id_binding);\n      for (var k in id_binding) result.push(id_binding[k])\n\n      items.results.bindings = result\n      // console.log(items);\n      return items\n    } catch (e) {\n      console.log(e)\n    }\n    return null\n  }\n\n  /*shouldComponentUpdate()\n  {\n    console.log(\"tree needs to be updated\");\n    return true;\n  }\n*/\n  exists(uri, item) {\n    //console.log(uri,item);\n    try {\n      if (item.child === uri) {\n        return true\n      }\n      if (item.children == null) {\n        return false\n      }\n      for (var n in item.children) {\n        var b = this.exists(uri, item.children[n])\n        if (b) {\n          return true\n        }\n      }\n    } catch (e) {\n      console.log(e)\n    }\n\n    return false\n  }\n\n  render() {\n    //console.log(\"render tree \",this.props.data);\n    if (!this.props.data) return null\n    var item = this.state.rootitem\n    if (item == null) {\n      item = this.createTreeItems()\n      //this.state.rootitem=item;\n    }\n    var checkHash = this.state.checked;\n\n    if (item == null) {\n      return null\n    }\n\n    let selectedURI = this.props.pubsub[this.props.subscribeVariable]\n    //console.log(\"selectedURI  \",this.props.subscribeVariable,selectedURI,this.props.pubsub);\n    if (selectedURI == null) {\n     \n      selectedURI = this.state.selectedItem\n    }\n    else\n    {\n     \n\n    }\n\n    if (selectedURI && this.props.setSelectionInURL) {\n     var b=true;\n      var getUrl = window.top.location;\n      var baseUrl = getUrl.origin + '/'\n      var suri = baseUrl + selectedURI.replace(baseUrl, '') // makesure it has the same origin\n      if (suri !== selectedURI) \n      {\n        \n        if (suri==\"http://www.buildingbits.nl/reset\")\n        {\n          suri = window.top.location.origin+window.top.location.pathname;\n        }\n        else\n        {\n          if (this.props.debugSetSelectionInURL)\n          {\n            suri = window.top.location.origin+window.top.location.pathname+\"?selection=\"+selectedURI;\n          }\n          else\n          {\n            b=false;\n          }\n        }\n       // console.log(\"selected uri not in this domain. creating fake url \",suri);\n      }\n\n     \n    \n      /*\n      if (!this.exists(selectedURI, item)) {\n         console.log( \"selected uri bestaat niet \",selectedURI);\n        suri = getUrl\n      }\n      */\n     \n\n      // if (suri!=baseUrl)\n      //console.log(\"should push suri \",suri);\n      if (b) {\n        //console.log(\"selected uri in this domain so changing url\",selectedURI);\n        setTimeout(function () {\n          try {\n            window.top.history.pushState({}, null, suri)\n          } catch (e) {\n            console.log(e)\n          }\n        }, 0)\n      } else {\n       // console.log('not reloading')\n      }\n    }\n    \n\n\n    //console.log(this.props.data,item);\n    var depth = 0\n    if (this.props.expandLevel!=null) {depth=this.props.expandLevel;}\n\n    \n\n    //console.log(item,Array.isArray(item));\n     if (Array.isArray(item))\n     {\n      \n      \n\n      return (\n        <div id={this.id} className={styles.main + ' ' + styles[this.props.panelstyle]} disabled={this.state.loading}>\n          {this.props.title && (\n            <div className={styles.title}>{this.props.title}</div>\n          )}\n            {item.map((titem, index) => {  \n               return (\n          <TreeItem\n             key={index}\n            {...this.props}\n            item={titem}\n            treeItemClicked={(item) =>this.treeItemClicked(item)}\n            treeItemCheckboxClicked={(item) =>this.treeItemCheckboxClicked(item)}\n            selectedItem={selectedURI}\n            checkedHash={checkHash}\n            depth={depth}\n            root={true}\n          />\n              )})}\n        </div>\n      )\n     }\n     else\n     {\n      \n    return (\n      <div id={this.id} className={styles.main + ' ' + styles[this.props.panelstyle]} disabled={this.state.loading}>\n        {this.props.title && (\n          <div className={styles.title}>{this.props.title}</div>\n        )}\n        <TreeItem\n          {...this.props}\n          item={item}\n          treeItemClicked={(item) =>this.treeItemClicked(item)}\n          treeItemCheckboxClicked={(item) =>this.treeItemCheckboxClicked(item)}\n          selectedItem={selectedURI}\n          checkedHash={checkHash}\n          depth={depth}\n          root={true}\n        />\n      </div>\n    )\n        }\n  }\n\n  createTreeItems() {\n    let selectedURI = this.props.pubsub[this.props.subscribeVariable]\n\n    let items = this.props.data\n    if (this.props.aggregate) {\n      items = this.aggregate(items)\n    }\n    if (items == null) {\n      return null\n    }\n    items = restructureResponse(items)\n    if (items == null) {\n      return null\n    }\n\n    let headVars = this.props.data.head.vars\n\n    items = this.findParents(items)\n  \n    this.openSelectie(items)\n\n    let labelKey = headVars[0]\n    let item = {\n      [labelKey]: this.props.rootLabel,\n      children: items,\n      containsSelection: !!selectedURI,\n    }\n\n    if (\n      (this.props.rootLabel == '' || this.props.rootLabel == null) &&\n      items.length == 1\n    ) {\n      item = items[0]\n      // console.log(\"setting single data parent as root of the table\",item);\n    }\n    else\n    {\n      item=items;\n    }\n    // console.log(\"returning tree items \",item);\n    return item\n  }\n}\n\nexport default Tree\n"],"sourceRoot":""}